<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Tutorials on MeVisLab Examples</title><link>https://mevislab.github.io/examples/tutorials/</link><description>Recent content in Tutorials on MeVisLab Examples</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Wed, 15 Jun 2022 08:58:44 +0200</lastBuildDate><atom:link href="https://mevislab.github.io/examples/tutorials/index.xml" rel="self" type="application/rss+xml"/><item><title>Example 2: Macro Modules and Module Interaction</title><link>https://mevislab.github.io/examples/tutorials/basicmechanisms/macromodules/</link><pubDate>Wed, 15 Jun 2022 08:58:44 +0200</pubDate><guid>https://mevislab.github.io/examples/tutorials/basicmechanisms/macromodules/</guid><description>Example 2: Macro Modules Macro Modules and Module Interactions via User Interface and Python Scripting MeVisLab provides different types of modules, which can be distinguished by their color. The brown modules are called macro modules. Macro modules condense a whole network into one module. You can open the internal network by pressing the middle mouse button or via right mouse click and select [ Help &amp;rarr; Show Internal Network ]. Macro modules provide the possibility to create customized user interfaces and and python interactions.</description></item><item><title>Example 2.1: Package Creation</title><link>https://mevislab.github.io/examples/tutorials/basicmechanisms/macromodules/package/</link><pubDate>Wed, 15 Jun 2022 08:58:44 +0200</pubDate><guid>https://mevislab.github.io/examples/tutorials/basicmechanisms/macromodules/package/</guid><description>Package creation &amp;nbsp;&amp;nbsp;&amp;nbsp;This example is also available on Youtube. Introduction Packages are the way MeVisLab organizes different development projects.
Macro modules and projects are stored in packages. If you like to create a global macro module, you need a package in which this macro module can be stored in. In this chapter, we will create our own package. We start our package creation by creating a package group, because every package needs to be stored in a package group.</description></item><item><title>Example 2.2: Creation of Global Macro Modules</title><link>https://mevislab.github.io/examples/tutorials/basicmechanisms/macromodules/globalmacromodules/</link><pubDate>Wed, 15 Jun 2022 08:58:44 +0200</pubDate><guid>https://mevislab.github.io/examples/tutorials/basicmechanisms/macromodules/globalmacromodules/</guid><description>Global Macro Modules &amp;nbsp;&amp;nbsp;&amp;nbsp;This example is also available on Youtube. Introduction In this chapter you will learn how to create global macro modules. There are many ways to do this. You can convert local macros into global macro modules or you can directly create global macro modules using the Project Wizard. In contrast to local macro modules, global macro modules are commonly available throughout projects and can be found via module search and under [ Modules ].</description></item><item><title>Chapter II: Open Inventor</title><link>https://mevislab.github.io/examples/tutorials/openinventor/</link><pubDate>Wed, 15 Jun 2022 08:56:33 +0200</pubDate><guid>https://mevislab.github.io/examples/tutorials/openinventor/</guid><description>Open Inventor Modules Introduction Besides blue modules (ML Modules) and brown macro modules, there is a third type of modules, called Open Inventor modules. These modules are green and start with the letters So\* (for Scene Objects). Open Inventor Modules process and render 3D scene objects and enable image interactions. Scene objects are transmitted via round input and output connectors. With the help of these modules, Open Inventor scenes can be implemented.</description></item><item><title>Introduction</title><link>https://mevislab.github.io/examples/tutorials/introduction/</link><pubDate>Wed, 15 Jun 2022 08:56:33 +0200</pubDate><guid>https://mevislab.github.io/examples/tutorials/introduction/</guid><description>MeVisLab Tutorial Introduction Welcome Welcome to MeVisLab!
MeVisLab is a development environment for rapid prototyping and product development of medical and industrial imaging applications. It includes a Software Development Kit (SDK) and an ApplicationBuilder for deploying your applications to end-customers.
The MeVisLab SDK consists of an Integrated Development Environment (IDE) for visual programming and the advanced text editor MATE for Python scripting including code completion, debugging, profiling and automated test development or execution.</description></item><item><title>Chapter I: Basic Mechanisms of MeVisLab</title><link>https://mevislab.github.io/examples/tutorials/basicmechanisms/</link><pubDate>Wed, 15 Jun 2022 08:54:53 +0200</pubDate><guid>https://mevislab.github.io/examples/tutorials/basicmechanisms/</guid><description>MeVisLab Tutorial Chapter I &amp;nbsp;&amp;nbsp;&amp;nbsp;This example is also available on Youtube. Basic Mechanics of MeVisLab (Example: Building a Contour Filter) In this chapter you will learn the basic mechanics of the MeVisLab IDE. You will learn how to re-use existing Modules to load and view data, and you will build your first processing pipeline. Extra Infos:&amp;nbsp; Additional information about the basics of MeVisLab are explained here Loading Data First, we need to load the data we like to work on.</description></item><item><title>Example 1: Data import in MeVisLab</title><link>https://mevislab.github.io/examples/tutorials/basicmechanisms/dataimport/</link><pubDate>Wed, 15 Jun 2022 08:54:53 +0200</pubDate><guid>https://mevislab.github.io/examples/tutorials/basicmechanisms/dataimport/</guid><description>Example 1: Data Import in MeVisLab MeVisLab provides several pre-defined modules to import data for processing in your networks.
This chapter explains the basic data formats and modules to use in your network:
Images DICOM Data Segmentations / 2D Contours 3D Data / Meshes Extra Infos:&amp;nbsp; More detailed explanations for loading images in MeVisLab can be found here Images A very simple module for loading images is the ImageLoad module. ImageLoad Module The ImageLoad module can import the following formats:</description></item></channel></rss>