[{"date":"1655276324","url":"https://mevislab.github.io/examples/tutorials/basicmechanisms/macromodules/","title":"Example 2: Macro Modules and Module Interaction","summary":"Example 2: Macro Modules Macro Modules and Module Interactions via User Interface and Python Scripting MeVisLab provides different types of modules, which can be distinguished by their color. The brown modules are called macro modules. Macro modules condense a whole network into one module. You can open the internal network by pressing the middle mouse button or via right mouse click and select [ Help \u0026rarr; Show Internal Network ]. Macro modules provide the possibility to create customized user interfaces and and python interactions.","content":"Example 2: Macro Modules Macro Modules and Module Interactions via User Interface and Python Scripting MeVisLab provides different types of modules, which can be distinguished by their color. The brown modules are called macro modules. Macro modules condense a whole network into one module. You can open the internal network by pressing the middle mouse button or via right mouse click and select [ Help \u0026rarr; Show Internal Network ]. Macro modules provide the possibility to create customized user interfaces and and python interactions.\nIn Chapter I - Basic Mechanics we built a contour filter and condensed all the modules into one local macro module. Until now, the local macro module containing the contour filter can only be used in the current network. In the following chapters, we like to make the macro module commonly available throughout projects and equip this macro module with panels and help pages. Commonly available macro modules are called global macros and can be found in MeVisLab [ Module Search ]. Global macros and projects are stored in packages. A package structure makes it easy to exchange projects and different functionalities between people.\nTherefore, this chapter will cover:\nPackage creation Creation of global macro modules Creation of help files and example networks GUI development: Interactions with macro modules via user interfaces (using MDL) Interactions with macro modules via Python scripting ","tags":["Beginner","Tutorial","Macro","Macro Modules"],"section":"tutorials"},{"date":"1655276324","url":"https://mevislab.github.io/examples/tutorials/basicmechanisms/macromodules/package/","title":"Example 2.1: Package Creation","summary":"Package creation \u0026nbsp;\u0026nbsp;\u0026nbsp;This example is also available on Youtube. Introduction Packages are the way MeVisLab organizes different development projects.\nMacro modules and projects are stored in packages. If you like to create a global macro module, you need a package in which this macro module can be stored in. In this chapter, we will create our own package. We start our package creation by creating a package group, because every package needs to be stored in a package group.","content":"Package creation \u0026nbsp;\u0026nbsp;\u0026nbsp;This example is also available on Youtube. Introduction Packages are the way MeVisLab organizes different development projects.\nMacro modules and projects are stored in packages. If you like to create a global macro module, you need a package in which this macro module can be stored in. In this chapter, we will create our own package. We start our package creation by creating a package group, because every package needs to be stored in a package group. You can find detailed information about packages and package groups here and in the package documentation .\nSteps to do To create packages and package groups, we will use the Project Wizard. Open the Project Wizard via [ File \u0026rarr; Run Project Wizard ... ]. Then, select [ Package \u0026rarr; New Package ] and Run Wizard.\nThe Project Wizard Next you need to:\nFind a name for your package group, for example your company name or in our example the name MyPackageGroup.\nFind a name for your package, in our example we call it General.\nSelect the path your package group is supposed to be stored in (If you like to add a package to an existing package group, select its name and chose the path the package group is stored in)\nIf you now create the package, you can find a folder structure in the desired directory. The folder of your package group contains the folder of your package. We have now successfully created a package in which we can store our global macro module.\nPackage creation Summary Packages are needed to store global macro modules and projects. Package groups contain packages. Packages and package groups can be created using the Project Wizard. Detailed information about packages can be found in the package documentation . ","tags":["Beginner","Tutorial","Package"],"section":"tutorials"},{"date":"1655276324","url":"https://mevislab.github.io/examples/tutorials/basicmechanisms/macromodules/globalmacromodules/","title":"Example 2.2: Creation of Global Macro Modules","summary":"Global Macro Modules \u0026nbsp;\u0026nbsp;\u0026nbsp;This example is also available on Youtube. Introduction In this chapter you will learn how to create global macro modules. There are many ways to do this. You can convert local macros into global macro modules or you can directly create global macro modules using the Project Wizard. In contrast to local macro modules, global macro modules are commonly available throughout projects and can be found via module search and under [ Modules ].","content":"Global Macro Modules \u0026nbsp;\u0026nbsp;\u0026nbsp;This example is also available on Youtube. Introduction In this chapter you will learn how to create global macro modules. There are many ways to do this. You can convert local macros into global macro modules or you can directly create global macro modules using the Project Wizard. In contrast to local macro modules, global macro modules are commonly available throughout projects and can be found via module search and under [ Modules ].\nSteps to do Transform a local macro module into a global macro module To transform our local macro module Filter from Chapter I into a global macro module, right-click the macro module to open the context menu and select [ Extras \u0026rarr; Convert To Global Module... ]\nConvert local macro to global macro Define module properties Choose a unique module name\nState the module author\nSelect the genre of the module. For this, browse through the module genres to select the appropriate genre. In our case, as our macro module contains a contour filter, we will choose the genre Filters.\nThe Genre defines the location where your module will be shown in MeVisLab [ Modules ] menu.\nTick the box Add reference to example network to directly create the template for an example network for your macro module.\nSelect the package you like to store the module in. We choose the package we created before. Your module is saved in an .mlab format and can be found in \\MyPackageGroup\\General\\Modules\\Macros\\MyProject.\nInfo:\u0026nbsp; Make sure to chose Directory Structure as self-contained. This makes sure that all files of your module are stored in a single directory. Create global macro module Use the Project Wizard to create global macro modules Instead of converting a local macro module into a global macro module, you can also use the Project Wizard to create new macro modules. Open the Project Wizard via [ File \u0026rarr; Run Project Wizard ... ]. Then, select [ Modules (Scripting) \u0026rarr; Macro Module ] and Run Wizard.\nDefine module properties Choose a unique module name\nState the module author\nSelect the genre of the module. For this, browse through the module genres to select the appropriate genre. In our case, as our macro module contains a contour filter, we will choose the genre Filters.\nTick the box Add reference to example network to directly create the template for an example network for your macro module.\nSelect the package you like to store the module in. We choose the package we created before. Your module is saved in an .mlab format and can be found in \\MyPackageGroup\\General\\Modules\\Macros\\MyProject.\nInfo:\u0026nbsp; Make sure to chose Directory Structure as self-contained. This makes sure that all files of your module are stored in a single directory. Press Next \u0026gt; to edit further properties. You have the opportunity to directly define the internal network of the macro module, for example by copying an existing network. In this case, we could copy the network of the local macro module Filter we already created. In addition, you have the opportunity to directly create a Python file. Python scripting can be used for the implementation of module interactions and other module functionalities. More information about Python scripting can be found here.\nProjectWizard1 ProjectWizard2 Structure of global macro modules After creating your global macro module, you can find the created project MyProject in your package. This project contains your macro module Filter. For the macro module exist three files:\nFilter.def: Module definition file Filter.mlab: Network file which contains the internal network of your macro module Filter.script: MDL script file, which defines in- and outputs of your macro module as well as fields. This file defines the module panel, as well as references to python scripts. In addition, two folders may be created:\nmhelp: contains the help files of all modules of this project network: contains the example networks of all modules of this project Structure of global macro modules How to find global macro modules All available modules are categorized and can be found via [ Modules ] in the respective genre. After creating a global macro, the new module can be found via [ Modules \u0026rarr; Filters ]. In addition, you can now find your macro module via module search.\nFind module in menu Hint:\u0026nbsp; If you do not find your new global macro module, try to reload the module database. Reload module database Summary Via right-click [ Extras \u0026rarr; Convert To Global Module... ] global macro modules can be created out of local macro modules You can use the Project Wizard to create new macro modules You need to have a package structure to store your global macro module Global macro modules are available throughout projects and can be found via Module Search and under menu item [ Modules ]. ","tags":["Beginner","Tutorial","Macro","Macro Modules","Global Macro"],"section":"tutorials"},{"date":"1655276324","url":"https://mevislab.github.io/examples/tutorials/basicmechanisms/macromodules/helpfiles/","title":"Example 2.3: Creation of module help","summary":"Creation of module help Generating help of a Macro Module is part of the video about Macro Modules from Example 2: Creation of Global Macro Modules \u0026nbsp;\u0026nbsp;\u0026nbsp;This example is also available on Youtube. Introduction In this chapter, you will learn how to create a help page and an example network. For hands-on training, we will use the macro module Filter, which was created in the previous chapter.\nDepending on the way the macro module was created the default help page and example network might or might not exist.","content":"Creation of module help Generating help of a Macro Module is part of the video about Macro Modules from Example 2: Creation of Global Macro Modules \u0026nbsp;\u0026nbsp;\u0026nbsp;This example is also available on Youtube. Introduction In this chapter, you will learn how to create a help page and an example network. For hands-on training, we will use the macro module Filter, which was created in the previous chapter.\nDepending on the way the macro module was created the default help page and example network might or might not exist. In case they exist, the help page only contains information about module in- and outputs as well as module fields. The example network only contains the macro module itself. Both, the help page and the example network, can be created and edited after module creation.\nSteps to do Creation of help files using MeVisLab MATE We will start by creating a help file using the build in text editor MeVisLab MATE (MeVisLab Advanced Text Editor). If you open the context menu of your global macro module and select [ Help ], it might be, that no help page is given. We will start to create a help file by selecting [ Help \u0026rarr; Create Help ]. If a help page already exists, select [ Help \u0026rarr; Edit Help ].\nCreation of module help When doing so, MeVisLab MATE opens. An .mhelp file (Filter.mhelp) is created automatically and is stored in the folder your macro module Filter is stored in. You can find the folder structure in MATE on the left side. Editing the text field, you can edit the help file.\nEdit module help file via MATE When creating the help file of a module, all important information of the module down to the field specifications are extracted and created automatically. Thus, the basic module information is always available in the module help. Additional documentation should be added by the module author. On the left side, you can find the outline of the help file. Each section can be edited. In this example, we added the purpose of the module to the help file.\nEdit module help file via MATE MATE offers the possibility to format the text. By using the button M, module names can be formatted in such a way that links to the respective help file of the modules are created.\nEdit module help file via MATE After finishing your documentation, you can click Generate Help or F7 and your final help file is generated.\nExtra Infos:\u0026nbsp; More information on MeVisLab MATE can be found here\nThe Module Help Editor is explained here\nThe result can be seen when opening the help file via context menu in MeVisLab IDE (or by pressing F1 ).\nHelp file of the module Watch out:\u0026nbsp; Depending on the way the macro module was created, more or less features are automatically given in the help file and the example network. All missing features can be added manually. Creation of an example network To add an example network to your module, you need to add a reference to the respective .mlab file to the module definition file (.def). Open the file Filter.def. You can find the line exampleNetwork = \u0026ldquo;$(LOCAL)/networks/FilterExample.mlab\u0026rdquo;, which defines the reference to the .mlab file containing the example network. Per default the name of the example network is ModulenameExample.mlab. An .mlab file containing only the module Filter is created insight the folder networks.\nIt is possible that the reference to the example network or the file FilterExample.mlab is missing. One reason could be, that its creation was not selected when creating the macro module. In this case, add the reference and the file manually.\nReference to Example Network To create the example network, open the file FilterExample.mlab in MeVisLab and create an appropriate example.\nExample Network Summary MeVisLab MATE is a build-in text editor which can be used to create module help files, module panels or to create module interactionss via Python scripting. You can create help files via the module context menu using MeVisLab Mate. You can add an example network to your macro module via the .def file ","tags":["Beginner","Tutorial","Macro","Macro Modules","Global Macro","Help"],"section":"tutorials"},{"date":"1655276324","url":"https://mevislab.github.io/examples/tutorials/basicmechanisms/macromodules/guidesign/","title":"Example 2.4: GUI development","summary":"Building a Panel Layout: Interactions with Macro Modules \u0026nbsp;\u0026nbsp;\u0026nbsp;This example is also available on Youtube. Introduction This chapter will give you an introduction into the creation of module panels and user interfaces. For the implementation you will need to use the MeVisLab Definition Language (MDL) .\nExtra Infos:\u0026nbsp; More information about GUI design in MeVisLab can be found here Creating a panel for the macro module flilter Creation of a module panel In this chapter we created the global macro module Filter.","content":"Building a Panel Layout: Interactions with Macro Modules \u0026nbsp;\u0026nbsp;\u0026nbsp;This example is also available on Youtube. Introduction This chapter will give you an introduction into the creation of module panels and user interfaces. For the implementation you will need to use the MeVisLab Definition Language (MDL) .\nExtra Infos:\u0026nbsp; More information about GUI design in MeVisLab can be found here Creating a panel for the macro module flilter Creation of a module panel In this chapter we created the global macro module Filter. By now, this module does not have a proper panel. When double-clicking the module, the Automatic Panel is shown.\nThe Automatic Panel contains fields, as well as module in and outputs. In this case, no fields exists except the instanceName. Accordingly, there is no possibility to interact with the module. Only the input and the output of the module are given.\nAutomatic Panel To add and edit a panel, open the context menu and select [ Related Files \u0026rarr; Filter.script ]. The text-editor MATE opens. You can see the file Filter.script, which you can edit to define a custom User Interface for the Module.\nModule script file Module interface Per default, the .script file contains the interface of the module. In the interface section (everything insight the curled brackets behind the name Interface) you can define the module inputs, the module outputs and also all module fields (or Parameters).\nFilter.script\nInterface { Inputs { Field input0 { internalName = Convolution.input0 } } Outputs { Field output0 { internalName = Arithmetic2.output0 } } } Module inputs and outputs To create an input/output, you need to define a Field in the respective input/output environment. Each input/output gets a name (here input0/output0) which you can use to reference this field. The module input maps to an input of the internal network. You need to define this mapping. In this case the input of the macro module Filter maps to the input of the module Convolution of the internal network (internalName = Convolution.input0). Similarly, you need to define which output of the internal network maps to the output of the macro module Filter. In this example, the output of the internal module Arithmethic2 maps to the output of our macro module Filter (internalName = Arithmetic2.output0).\nCreating an input/output causes:\nInput/output connectors are added to the module. You can find placeholders for the input and output in the internal network (see image). Input/output fields are added to the automatic panel. A description of the input/output fields is automatically added to the module help file, when opening the .mhelp file after input/output creation. Helpfile creation is explained this chapter. Internal Network of your macro module Module fields In the environment Parameters you can define fields of your macro module. These fields may map to existing fields of the internal network (internalName = \u0026hellip; ), but they do not need to and can also be completely new. You can reference these fields when creating a panel, to allow interactions with these fields. All fields appear in the Automatic Panel.\nModule panel layout To create your own User Interface, we need to create a Window . A window is one of the layout elements which exist in MDL. These layout elements are called controls . The curled brackets define the window environment, in which you can define properties of the window and insert further controls like a Box .\nInitially, we call the window MyWindowTitle, which can be used to reference this window.\nDouble-clicking on your Module now opens your first self developed User Interface.\nFilter.script\nInterface { Inputs { Field input0 { internalName = Convolution.input0 } } Outputs { Field output0 { internalName = Arithmetic2.output0 } } Parameters { } } Window MyWindowName { title = MyWindowTitle Box MyBox { } } Module Panel You can define different properties of your control. For a window, you can for example define a title, or whether the window should be shown in full screen (fullscreen = True).\nThese properties are called tags and are individually different for each control. Which tags exist for the control window can be found here . The control box has different tags. You can for example define a title for the box, but you can not define whether to present the box in full screen.\nIf you like to add more than one control to your window, for example one box and one label, you can specify their design like in the following examples:\nFilter.script\nWindow MyWindowName { title = MyWindowTitle w = 100 h = 50 Vertical { Box MyBox { title = \u0026#34;Title of my Box\u0026#34; } Label MyLabel { title = \u0026#34;This is a label below the box\u0026#34; } } } Vertical layout of Box and Text Filter.script\nWindow MyWindowName { title = MyWindowTitle w = 100 h = 50 Horizontal { Box MyBox { title = \u0026#34;Title of my Box\u0026#34; } Label MyLabel { title = \u0026#34;This is a label below the box\u0026#34; } } } Horizontal layout of Box and Text There are much more controls, which can be used. For example a CheckBox, a Table, a Grid, a Button, ... . To find out more, take a look into the MDL Reference .\nModule interactions Until now, we learned how to create the layout of a panel. As a next step, we like to get an overview over interactions.\nExtra Infos:\u0026nbsp; You can add the Module GUIExample to your workspace and play around with is. Access to existing fields of the internal network To interact with fields of the internal network in your User Interface, we need to access these fields. To access the field of the internal module Convolution, which defines the kernel, we need to use the internal network name. To find the internal field name, open the internal network of the macro module Filter (click on the module using the middle mouse button ).\nThen, open the panel of the module Convolution and right-click the field title Use of the box Predefined Kernel and select Copy Name. You now copied the internal network name of the field to your clipboard. The name is made up of ModuleName.FieldName, in this case Convolution.predefKernel.\nIn the panel of the module Convolution, you can change this variable Kernel via a drop-down menu. In MDL a drop-down menu is called a ComboBox . We can take over the field predefKernel, its drop-down menu and all its properties by creating a new field in our panel and reference to the internal field Convolution.predefKernel, which already exist in the internal network.\nChanges of the properties of this field can be done in the curled brackets using tags (here, we changed the title).\nFilter.script\nWindow MyWindowName { title = MyWindowTitle Field Convolution.predefKernel { title = Kernel } } Selecting the kernel As an alternative, you can define the field kernel in the Parameters environment, and reference the defined field by its name. The result in the panel is the same. You can see a difference in the Automatic Panel. All fields, which are defined in the interface in the Parameters environment appear in the Automatic Panel. Fields of the internal network, which are used but not declared in the section Parameters of the module interface do not appear in the Automatic Panel.\nFilter.script\nInterface { Inputs { Field input0 { internalName = Convolution.input0 } } Outputs { Field output0 { internalName = Arithmetic2.output0 } } Parameters { Field kernel { internalName = Convolution.predefKernel title = Kernel: } } } Window MyWindowName { title = MyWindowTitle Field kernel {} } Commands We can not only use existing functionalities, but also add new interactions via Python scripting.\nIn below example we added a wakeupCommand to the Window and a simple command to the Button.\nFilter.script\nWindow MyWindowName { title = MyWindowTitle wakeupCommand = myWindowCommand Button MyButton { command = myButtonAction } } The wakeupCommand defines a Python function which is executed as soon as the Window is opened. The Button command is executed when the user clicks on the Button.\nBoth commands reference a Python function which is executed whenever both actions (open the Window or click the Button) are executed.\nIf you like to learn more about Python scripting, take a look at this chapter.\nWe need to define the Python script, which contains our Python functions. In order to do this, add a Command section outside your window and define the tag source.\nExample: Filter.script\nCommands { source = $(LOCAL)/Filter.py } Infos:\u0026nbsp; The section Source should already be available and generated automatically in case you enable the Wizard to add a Python file to your Module. You can right-click on the command in your .script file and select [ Open definition... ]. The text editor MATE opens automatically and generates an initial Python function for you. You can simply add a logging function or implement complex logic here.\nExample: Filter.py\ndef myWindowCommand: MLAB.log(\u0026#34;Window opened\u0026#34;) def myButtonAction: MLAB.log(\u0026#34;Button clicked\u0026#34;) Field listeners A field listener watches a given field in your network and reacts on any changes of the field value. You can define Python functions to execute in case a change has been detected.\nIn order to define such a listener, you need to create a Command section in your .script file.\nExample: Filter.script\nCommands { source = $(LOCAL)/Filter.py FieldListener View2D.startSlice { command = printCurrentSliceNumber } } In the above example, we react on changes of the field startSlice of the module View2D. Whenever the field value (currently displayed slice) changes, the Python function printCurrentSliceNumber is executed.\nIn your Python file Filter.py you can now add the following:\nFilter.py\ndef printCurrentSliceNumber(field): MLAB.log(field.value) Summary User interfaces and several module panels can be created for each macro module. You can create a panel, define in and outputs as well as interactions, in your .script file in MATE by using the MeVisLab Definition Language (MDL) . Module interactions can be implemented using commands, which are linked to Python functions. You can implement fieldlisteners, which trigger actions after a field value changes. ","tags":["Beginner","Tutorial","Macro","Macro Modules","Global Macro","User Interface","GUI"],"section":"tutorials"},{"date":"1655276324","url":"https://mevislab.github.io/examples/tutorials/basicmechanisms/macromodules/pythonscripting/","title":"Example 2.5: Interactions via Python scripting","summary":"Module Interactions Using Python Scripting Introduction This chapter will give you an overview over Python scripting in MeVisLab. Here, no introduction into Python will be given. However, basic knowledge in Python is helpful. Instead, we will show how to integrate and use Python in the MeVisLab SDK.\nIn fact, nearly everything in MeVisLab can be done via Python scripting: You can add modules to your network, or remove modules, you can dynamically establish and remove connections and so on.","content":"Module Interactions Using Python Scripting Introduction This chapter will give you an overview over Python scripting in MeVisLab. Here, no introduction into Python will be given. However, basic knowledge in Python is helpful. Instead, we will show how to integrate and use Python in the MeVisLab SDK.\nIn fact, nearly everything in MeVisLab can be done via Python scripting: You can add modules to your network, or remove modules, you can dynamically establish and remove connections and so on. But, much more important: You can access module inputs and outputs, as well as module fields to process their parameters and data. You can equip user interfaces and panel with custom functionalities. Python can be used to implement module interactions. When you open a panel or you press a button in a panel, the executed actions are implement via Python scripting.\nBasics To see how to access modules, fields, and so on, open the Scripting Console Via [ Scripting \u0026rarr; Show Scripting Console ].\nInternal field names You can find the internal name of one module field in the respective network. Open a panel, for example the Automatic Panle and right-click the field\u0026rsquo;s title to open the field\u0026rsquo;s context menu. Now, you can select Copy Name, to copy the internal name of the field. This name can be used to access the field via scripting.\nScripting context When entering ctx to the console, you can see the context you are working with. In the context of the Scripting Console, you have access to your workspace, meaning the whole network, its modules and the module fields.\nScripting context Editing the workspace In the Scripting Console, you can add and connect modules using the following commands:\nctx.addModule(\u0026quot;\u0026lt; ModuleName \u0026gt;\u0026quot;) : Add the desired module to your workspace. ctx.field(\u0026quot; \u0026lt; ModuleName.FieldName\u0026gt; \u0026quot;) : Access a field of a module. ctx.field(\u0026quot; \u0026lt; ModuleInput \u0026gt; \u0026quot;).conntectFrom(\u0026quot; \u0026lt; ModuleOutput \u0026gt; \u0026quot;) : Draw a connection from one module\u0026rsquo;s output to another module\u0026rsquo;s input. In this case we added the modules DicomImport and View2D to the workspace and connected both modules.\nAdd and connect modules via scripting It is also possible to add notes to your workspace.\nAdd a note to your workspace Access modules and module fields You can access modules via ctx.module(\u0026quot; \u0026lt; ModuleName \u0026gt; \u0026quot;). From this object, you can access module fields, module inputs and outputs and everything in context of this module.\nYou can also directly access a module field via ctx.field(\u0026quot; \u0026lt; ModuleName.FieldName \u0026gt; \u0026quot;). Different methods can be called on this object. Take a look at the Scripting Reference to find out which methods can be called for which object or class. You can for example access the value of the respective field.\nAccess modules and module fields Python Scripting Reference Here , you can find the Scripting Reference. In the Scripting Reference you can find information about different Python classes used in MeVisLab and their methods.\nWhere and how to use Python scripting Scripting View Under [ View \u0026rarr; Views \u0026rarr; Scripting ] you can find the View Scripting. The view offers a standard Python console, without any meaningful network or module context. This means only general Python functionalities can be tested and used. Access to modules or your network is not possible.\nScripting Console You can open the Scripting Console via [ Scripting \u0026rarr; Show Scripting Console ]. In the context of your workspace, you can access your network and modules.\nScripting console of modules Every module offers a scripting console. Open the context menu of a module and select [ Show Window \u0026rarr; Scripting Console ]. You can work in the context (ctx.) of this module.\nModule RunPythonScript The module RunPythonScript allows to execute Python scripts from within a MeVisLab network. You can draw parameter connection from modules to RunPythonScript and back, to process parameter fields using Python scripting. An example for the usage of RunPythonScript can be found here.\nModule interactions via Python scripting You can reference to a Python function inside a .script file of a macro module. With this, you can for example execute a Python function, whenever you open a panel, define the action which is executed when pressing a button or specify the command triggered by a field listener. An example for module interactions via Python scripting is given here.\nTips and tricks Scripting Assistant Under [ View \u0026rarr; Views \u0026rarr; Scripting Assistant ] you can find the view Scripting Assistant. In this view, the actions you execute in the workspace are translated into Python script.\nFor example: Open the Scripting Assistant. Add the module WEMInitialize to your workspace. You can select a Model, for example the cube. In addition, you can change the Translation and press Apply. All these actions can be seen in the Scripting Assistant, translated into Python code. Therefore, the Scripting Assistant is a powerful tool to help you to script you actions.\nScripting Assistant Examples See the following examples for Python Scripting:\nThe module RunPythonScript Module interactions via Python scripting Summary Python can be used to access, create and process networks, modules, fields and panels. You can use Python via different scripting consoles. You can also define module costume module interactions by referencing to Python functions from the .script file ","tags":["Beginner","Tutorial","Macro","Macro Modules","Global Macro","Python","Scripting"],"section":"tutorials"},{"date":"1655276324","url":"https://mevislab.github.io/examples/tutorials/basicmechanisms/macromodules/scriptingexample1/","title":"Example 2.5.1: The module RunPythonScript","summary":"Scripting Example 1: The module RunPythonScript Introduction The module RunPythonScript allows to execute Python scripts from within a MeVisLab network. You can draw parameter connection from modules to RunPythonScript and back, to process parameter fields using Python scripting.\nSteps to do Develop your network In this example, we like to dynamically change the color of a cube in an Open Inventor scene. For that, add and connect the following modules as shown.","content":"Scripting Example 1: The module RunPythonScript Introduction The module RunPythonScript allows to execute Python scripts from within a MeVisLab network. You can draw parameter connection from modules to RunPythonScript and back, to process parameter fields using Python scripting.\nSteps to do Develop your network In this example, we like to dynamically change the color of a cube in an Open Inventor scene. For that, add and connect the following modules as shown.\nRunPythonScript Scripting using the moduule RunPythonScript Open the panel of RunPythonScript. There is an option to display input and output fields. For that, tick the box Fields on the top left side of the panel.\nYou can also name these fields individually, by ticking the box Edit field titles. Call the first input field TimeCounter and draw a parameter connection from the field Value of the panel of TimeCounter to the input field TimeCounter of the module RunPythonScript. We can name the first output field DiffuseColor and draw a parameter connection from this field to the field Diffuse Color in the panel of the module SoMaterial.\nTimeCounter The module TimeCounter counts in a defined Frequency. We like to randomly change the color of the cube in the frequency the TimeCounter counts. Add this code:\nIsoCSOs.py\nimport random red = TimeCounter * random(0,52)/255 green = TimeCounter * random(0,52)/255 blue = TimeCounter * random(0,52)/255 updateOutputValue(\u0026#34;DiffuseColor\u0026#34;, str(red) + \u0026#34; \u0026#34; + str(green) + \u0026#34; \u0026#34; + str(blue)) To update the output field DiffuseColor, it is important to use the methods updateOutputValue(name, value) or setOutputValue(name, value) instead of simply assigning a value to the output field.\nYou can now see a color change in the viewer SoExaminerViewer every time the TimeCounter counts.\nTriggered color change Summary The module RunPythonScript can be used to process module fields in your network using Python scripting. Use the methods updateOutputValue(name, value) or setOutputValue(name, value) to update output fields of RunPythonScript. ","tags":["Beginner","Tutorial","Python","Scripting","RunPythonScript"],"section":"tutorials"},{"date":"1655276324","url":"https://mevislab.github.io/examples/tutorials/basicmechanisms/macromodules/scriptingexample2/","title":"Example 2.5.2: Module interactions via Python scripting","summary":"Scripting Example 2: Module interactions via Python scripting Introduction We like to create a GUI for this example network of Chapter V. In the example, CSOs were automatically created based on a predefined iso value. You can either implement the network, or else download the network here.\nSteps to do Creating the macro module First, we condense the example network into a macro module and then we create a panel for that module.","content":"Scripting Example 2: Module interactions via Python scripting Introduction We like to create a GUI for this example network of Chapter V. In the example, CSOs were automatically created based on a predefined iso value. You can either implement the network, or else download the network here.\nSteps to do Creating the macro module First, we condense the example network into a macro module and then we create a panel for that module. To create a macro module use the Project Wizard, which you find under [ File \u0026rarr; Run Project Wizard ]. Select Macro Module and press Run.\nNow, you have to edit:\nName: The name of your module Package: Select the package you like to save the macro module in. Directory Structure: Change to Self-contained Project: Select you project name Press Next and edit the following:\nCopy existing network: Select the example network Check the box: Add Python file Now, create your macro module and reload MeVisLab. You can find your module via search in MeVisLab.\nCreating macro module Enable Python scripting To design a panel and create a user interface for the macro module, open the .script file. You can see, that a Command environment exist, which defines the python file as source for all commands.\nOpen the script file Script file Creating a panel with tabs and viewers At first, we create a Window with two Tabs . One Main tab, in which both viewers of the network are represented and one tab for Settings. For generating tabs, we can use the control TabView , with its items TabViewItem . The control TabView enables to add a command, which is executed when opening the tab. For adding the viewers to the panel, we use the Control Viewer.\nIsoCSOs.script\nWindow { TabView { TabViewItem Main { Horizontal { Viewer View2D.self { type = SoRenderArea pw = 400 ph = 400 } Viewer SoExaminerViewer.self { type = SoExaminerViewer pw = 400 ph = 400 } } } TabViewItem Settings { } } } Panel with Tabs and Viewers Edit viewer settings in the panel You may want to change the design setting of the right viewer. This is still possible via the internal network of the macro module. Open the internal network either via the context menu or using the middle mouse button and click on the module. After that, open the Automatic Panel of the module SoExaminerViewer via context menu [ Show Windows \u0026rarr; Automatic Panel ] and change the field decoration to False. Keep in mind, as we did not create CSOs by now, the right viewer stays black.\nChange viewer settings Changed viewer settings Selection of images Next, we like to add the option to browse through the folders and select the image, we like to create CSOs from. This functionality is already given in the internal network in the module LocalImage. We can copy this functionality from LocalImage and add this option to the panel above both viewers. But, how should we know, which field name we reference to? To find this out, open the internal network of your macro module. Now you are able to open the panel of the module LocalImage. Right-click the desired field: In this case, right-click the label Name:. Select Copy Name, to copy the internal name of this field.\nCopy the field name Now, you can add this field as a new field to your window by pasting the name. All field settings are taken over from the internal field from the module LocalImage.\nIsoCSOs.script\nWindow { TabView { TabViewItem Main { Vertical { Field LocalImage.name {} Horizontal { Viewer View2D.self { type = SoRenderArea pw = 400 ph = 400 } Viewer SoExaminerViewer.self { type = SoExaminerViewer pw = 400 ph = 400 } } } } TabViewItem Settings { } } } Add name field Add buttons to your panel As a next step, we like to add a Browse...-Button, like in the module LocalImage, and also a button to create the CSOs.\nTo create the Browse...-Button:\nCreate a button containing the command fileDialog. Right-click the command to create the respective function in the. Python file. Edit the function in the Python file, to enable the file dialog (similar function as in LocalImage.py). To create the Iso Generator Button:\nWe like to copy the field of the Update-Button from the internal module IsoCSOGenerator, but not its layout so:\nCreate a new Field in the interface, called IsoGenerator, which contains the internal field Update from the module IsoCSOGenerator. Create a new Button in your Window which uses the field IsoGenerator. After these steps, you can use the Iso Generator button to create CSOs.\nIsoCSOs.script\nInterface { Inputs {} Outputs {} Parameters { Field IsoGenerator { internalName = CSOIsoGenerator.apply } } } Commands { source = $(LOCAL)/IsoCSOs.py } Window { TabView { TabViewItem Main { Vertical { Horizontal { Field LocalImage.name {} Button { title = \u0026#34;Browse...\u0026#34; command = fileDialog } Button IsoGenerator { title = \u0026#34;Iso Generator\u0026#34; } } Horizontal { Viewer View2D.self { type = SoRenderArea pw = 400 ph = 400 } Viewer SoExaminerViewer.self { type = SoExaminerViewer pw = 400 ph = 400 } } } } TabViewItem Settings { } } } IsoCSOs.py\nfrom mevis import * def fileDialog(): exp = ctx.expandFilename(ctx.field(\u0026#34;LocalImage.name\u0026#34;).stringValue()) filename = MLABFileDialog.getOpenFileName(exp, \u0026#34;\u0026#34;, \u0026#34;Open file\u0026#34;) if filename: ctx.field(\u0026#34;LocalImage.name\u0026#34;).value = ctx.unexpandFilename(filename) Automatically generate CSOs based on Iso value Colorizing CSOs We like to colorize the CSO we hover over with our mouse in the 2D viewer. Additionally, when clicking a CSO with the left mouse key , this CSO shall be colorized in the 3D viewer. This functionality can be implemented via Python scripting (even though MeVisLab has a build-in function to do that). We can do this in the following way:\nEnable the View Scripting Assistant, which translates actions into Python code.\nScripting Assistant Enable a functionality which allows us to notice the id of the CSO we are currently hovering over with our mouse. For this open the internal network of our macro module. We will use the module SoView2DCSOExtensibleEditor. Open its panel and select the tab Advanced. You can check a box to enable Update CSO id under mouse. If you now hover over a CSO, you can see its id in the panel. We can save the internal network to save this functionality, but we can also solve our problem via scripting. The Scripting Assistant translated our action into code, which we can use.\nEnabling CSO id identification We like to activate this functionality when opening the panel of our macro module IsoCSOs. Thus, we add a starting command to the control Window. We can call this command for example enableFunctionalities.\nIn the .script file:\nIsoCSOs.script\nWindow { windowActivatedCommand = enableFunctionalities TabView { TabViewItem Main { ... } } } In the Python file, we define the function enableFunctionalities. We see our action as Python code in the Scripting Assistant. Just copy the code into our Python function.\nIsoCSOs.py\ndef enableFunctionalities(): ctx.field(\u0026#34;SoView2DCSOExtensibleEditor.updateCSOIdUnderMouseCursor\u0026#34;).value = True Implement a field listener. This field listener will detect when you hover over a CSO and the CSO id changes. Triggered by a CSO id change, a colorization function will be executed and colorize the selected CSO. In the .script file:\nIsoCSOs.script\nCommands { source = $(LOCAL)/IsoCSOs.py FieldListener SoView2DCSOExtensibleEditor.csoIdUnderMouseCursor { command = colorizeCSO } } In the Python file:\nIsoCSOs.py\n# global variables listCSOs = [] idxCSO = -1 def colorizeCSO(): if ctx.field(\u0026#34;CSOManager.numCSOs\u0026#34;) == 0: pass else: global listCSOs global idxCSO if listCSOs == []: listCSOs = ctx.field(\u0026#34;CSOManager.outCSOList\u0026#34;).object() # COLORIZATION OF CSO # Changing back color of previously selected CSO to default value if idxCSO \u0026gt;= 0: oldCSO = listCSOs.getCSOAt(idxCSO) oldCSO.setPathPointColor((1.0, 1.0, 0.0)) # Color change of CSO oldCSO.setPathPointWidth(1) # Line width change # Changing color and width of selected CSO idxCSO = ctx.field(\u0026#34;SoView2DCSOExtensibleEditor.csoIdUnderMouseCursor\u0026#34;).value - 1 # -1 because CSOs are indexed starting at 1 if idxCSO \u0026gt;= 0: currentCSO = listCSOs.getCSOAt(idxCSO) currentCSO.setPathPointColor((1.0, 0.0, 1.0)) currentCSO.setPathPointWidth(5) Reload your module ( F5 ) and open the panel. After generating CSOs, the CSO under your mouse is marked. Clicking this CSO enables the marking in the 3D viewer. If you like, you can add some settings to your Settings page. For example\nIsoCSOs.script\nTabViewItem Settings { Field CSOIsoGenerator.isoValue {} Field SoCSOVisualizationSettings.ghostingDepthInVoxel {} } Colored selection Summary The control Tabview creates tabs in panels. The control Viewer allows to add viewers to your panel. The control Button creates a button executing a Python function when pressed. The tag WindowActivationCommand of the control Window triggers Python functions executed when opening the panel. Field listeners can be used to activate Python functions triggered by a change of defined parameter fields. Use the view Scripting Assistant can be used to translate actions into Python code. ","tags":["Advanced","Tutorial","Macro","Macro Modules","Global Macro","Python","Scripting"],"section":"tutorials"},{"date":"1655276193","url":"https://mevislab.github.io/examples/examples/basic_mechanisms/","title":"Basic Mechanisms","summary":"Basic Mechanism Examples: Contour Filter\nPanel for the contour filter\nPython scripting","content":"Basic Mechanism Examples: Contour Filter\nPanel for the contour filter\nPython scripting\n","tags":["Examples","Example Networks"],"section":"examples"},{"date":"1655276193","url":"https://mevislab.github.io/examples/tutorials/openinventor/","title":"Chapter II: Open Inventor","summary":"Open Inventor Modules Introduction Besides blue modules (ML Modules) and brown macro modules, there is a third type of modules, called Open Inventor modules. These modules are green and start with the letters So\\* (for Scene Objects). Open Inventor Modules process and render 3D scene objects and enable image interactions. Scene objects are transmitted via round input and output connectors. With the help of these modules, Open Inventor scenes can be implemented.","content":"Open Inventor Modules Introduction Besides blue modules (ML Modules) and brown macro modules, there is a third type of modules, called Open Inventor modules. These modules are green and start with the letters So\\* (for Scene Objects). Open Inventor Modules process and render 3D scene objects and enable image interactions. Scene objects are transmitted via round input and output connectors. With the help of these modules, Open Inventor scenes can be implemented.\nThis chapter will start with an example Open Inventor scene. Explanations to Open Inventor scenes will follow the example.\nOpen Inventor Scenes and Execution of Scene Graphs Inventor scenes are organized in structures called scene graphs. A scene graph is made up of nodes, which represent 3D objects to be drawn, properties of the 3D objects, nodes that combine other nodes and are used for hierarchical grouping, and others (cameras, lights, etc.). These nodes are accordingly called shape nodes, property nodes, group nodes and so on. Each node contains one or more pieces of information stored in fields. For example, the Sphere node contains only its radius, stored in its radius field. Open Inventor modules function as Inventor nodes, so they may have input connectors to add Inventor child nodes (modules) and output connectors to link themselves to Inventor parent nodes (modules).\nOpen Inventor Scenes:\u0026nbsp; The following shows the order in which the modules are executed. The red arrow shows the order of traversal, from top to bottom and left to right. The numbers designate the order in which each module is passed first, from 1 to 8. As shown in the example before, the order of transversal is important.\nTraversing in Open Inventor Extra Info:\u0026nbsp; More Information about Open Inventor and Scene Graphs can be found here\nor else in the Open Inventor Overview\nand the Open Inventor Reference\nExamples: Open Inventor Objects Mouse Interactions in Open Inventor Camera Interactions ","tags":["Beginner","Tutorial","Open Inventor","3D"],"section":"tutorials"},{"date":"1655276193","url":"https://mevislab.github.io/examples/examples/data_objects/","title":"Data Objects","summary":"Data Object Examples: Creation of Contours\nContour interpolation\n2D and 3D visualization of contours\nAnnotation of images\nContours and ghosting\nDistance between markers\nCreation of WEMs\nProcessing and modification of WEMs\nInteractively moving WEM\nWEM - Primitive Value Lists","content":"Data Object Examples: Creation of Contours\nContour interpolation\n2D and 3D visualization of contours\nAnnotation of images\nContours and ghosting\nDistance between markers\nCreation of WEMs\nProcessing and modification of WEMs\nInteractively moving WEM\nWEM - Primitive Value Lists\n","tags":["Examples","Example Networks"],"section":"examples"},{"date":"1655276193","url":"https://mevislab.github.io/examples/tutorials/openinventor/openinventorobjects/","title":"Example 1: Open Inventor Objects","summary":"Example 1: Open Inventor Objects Introduction In this example we like to construct an Open Inventor scene in which we display three 3D objects of different color and shape.\nSteps to do Generating Open Inventor Objects First, add the modules SoExaminerViewer and SoCone to the workspace and connect both modules as shown. The module SoCone creates a cone shaped object, which can be displayed in the Viewer SoExaminerViewer.\nSoExaminerViewer We like to change the color of the cone.","content":"Example 1: Open Inventor Objects Introduction In this example we like to construct an Open Inventor scene in which we display three 3D objects of different color and shape.\nSteps to do Generating Open Inventor Objects First, add the modules SoExaminerViewer and SoCone to the workspace and connect both modules as shown. The module SoCone creates a cone shaped object, which can be displayed in the Viewer SoExaminerViewer.\nSoExaminerViewer We like to change the color of the cone. In order to do so, add the module SoMaterial to the workspace and connect the module as shown below. When creating Open Inventor scene (by creating networks of Open Inventor modules), the sequence of module connections, in this case the sequence of the inputs to the module SoExaminerViewer determines the functionality of the network.\nOpen Inventor modules are executed like scene graphs. This means, modules are executed from top to bottom and from left to right. Here, it is important to connect the module SoMaterial to an input on the left side of connection between SoCone and SoExaminerViewer. With this, we first select features like a color and these features are then assigned to all objects, which were executed afterwards. Now, open the panel of the module SoMaterial and select any Diffuse Color you like. Here, we choose green.\nColors and Material in Open Inventor We like to add a second object to the scene.\nIn order to do that, add the module SoSphere to the workspace. Connect this module to SoExaminerViewer. When connecting SoSphere to an input on the right side of the connection between the viewer and the module SoMaterial, the sphere is also colored in green. One problem now is, that currently both objects are displayed at the same position.\nAdding a SoSphere The display both objects at different positions, add the modules SoSeparator and SoTransform to the scene and connect both modules shown on the following picture. Open the panel of SoTransform and implement a translation in x-direction to shift the object. Now you can examine two things:\nThe sphere loses its green color The cone is shifted to the side Transformation The module SoTransform is responsible for shifting objects, in this case the cone, to the side. The module SoSeparator ensures that only the cone is shifted and also only the cone is colored in green. It separates this features from the rest of the scene.\nWe like to add a third object, a cube, and shift it to the other side of the sphere. Add the modules SoCube and SoTransform to the workspace and connect both modules as shown below. To shift the cube to the other side of the sphere, open the panel of SoTransform and adjust the Translation in x direction. The sphere is not affected by the translation, as the connection from SoTransform1 to SoExaminerViewer is established on the right side of the connection between SoSphere and SoExaminerViewer.\nAdding a SoCube Again, we use the module SoMaterial to select a color for the cone and the sphere.\nMultiple Materials For easier handling we group an object together with its features by using the module SoGroup. This does not separate features, which is the reason for the cube to be colorized. All modules that are derived from SoGroup offer a basically infinite number of input connectors (a new connector is added for every new connection).\nSoGroup If we do not want to colorize the cube, we have to exchange the module SoGroup by another SoSeparator module.\nSoSeparator The implementation of all objects can be grouped together.\nGrouping In addition to the objects, a background can be added to the scene using the module SoGBackground.\nSoBackground Summary Scene objects are represented by nodes. Size and position is defined by transformation nodes. A rendering node represents the root of the scene graph. Nodes are rendered in the order of traversal. Nodes on the same level are traversed from left to right. All modules that are derived from SoGroup offer a basically infinite number of input connectors (a new connector is added for every new connection). ","tags":["Beginner","Tutorial","Open Inventor","3D"],"section":"tutorials"},{"date":"1655276193","url":"https://mevislab.github.io/examples/tutorials/openinventor/mouseinteractions/","title":"Example 2: Mouse interactions in Open Inventor","summary":"Example 2: Mouse interactions in Open Inventor Introduction In this example, we implement some image or object interactions. We will create a 3D scene, in which we display a cube and change its size using the mouse. We also get to know another viewer, the module SoExaminerViewer. This viewer is important. It enables the rendering of Open Inventor scenes and allows interactions with the Open Inventor scenes.\nSteps to do Develop your network For implementing the example, build the following network.","content":"Example 2: Mouse interactions in Open Inventor Introduction In this example, we implement some image or object interactions. We will create a 3D scene, in which we display a cube and change its size using the mouse. We also get to know another viewer, the module SoExaminerViewer. This viewer is important. It enables the rendering of Open Inventor scenes and allows interactions with the Open Inventor scenes.\nSteps to do Develop your network For implementing the example, build the following network. We already know the module SoCube, which builds a 3D scene object forming a cube. In addition to that, add the module SoMouseGrabber. Connect the modules as shown below.\nExtra Infos:\u0026nbsp; Additional information about the SoMouseGrabber can be found here: SoMouseGrabber SoMouseGrabber Configure mouse interactions Now, open the panels of the module SoMouseGrabber and the module SoExaminerViewer, which displays a cube. In the Viewer, press the right key of your mouse and move the mouse around. This action can be seen in the panel of the module SoMouseGrabber.\nSoMouseGrabber You can see:\nButton 3, the right mouse button , is tagged as being pressed Changes of the mouse coordinates are displayed in the box Output. Mouse Interactions Resize cube via mouse interactions We like to use the detected mouse-movements to change the size of our cube. In order to that, open the panel of SoCube. Build parameter connections from the mouse coordinates to the width and depth of the cube.\nChange Cube size by Mouse Events If you now press the right mouse key inside the Viewer and move the mouse around, the size of the cube changes.\nExercises Change location of the cube via Mouse Interactions by using the Module SoTransform Add more objects to the scene and interact with them Summary The module SoExaminerViewer enables the rendering of Open Inventor scenes and allows interactions with the Open Inventor scenes. Mouse interactions can be applied to the objects in the scene. ","tags":["Beginner","Tutorial","Open Inventor","3D","Mouse Interactions"],"section":"tutorials"},{"date":"1655276193","url":"https://mevislab.github.io/examples/tutorials/introduction/","title":"Introduction","summary":"MeVisLab Tutorial Introduction Welcome Welcome to MeVisLab!\nMeVisLab is a development environment for rapid prototyping and product development of medical and industrial imaging applications. It includes a Software Development Kit (SDK) and an ApplicationBuilder for deploying your applications to end-customers.\nThe MeVisLab SDK consists of an Integrated Development Environment (IDE) for visual programming and the advanced text editor MATE for Python scripting including code completion, debugging, profiling and automated test development or execution.","content":"MeVisLab Tutorial Introduction Welcome Welcome to MeVisLab!\nMeVisLab is a development environment for rapid prototyping and product development of medical and industrial imaging applications. It includes a Software Development Kit (SDK) and an ApplicationBuilder for deploying your applications to end-customers.\nThe MeVisLab SDK consists of an Integrated Development Environment (IDE) for visual programming and the advanced text editor MATE for Python scripting including code completion, debugging, profiling and automated test development or execution.\nYou can re-use thousands of pre defined Modules for image processing (2D up to 6D images) and visualization. You will get a quick introduction into the available modules and example networks in the following tutorials.\nMore than 20 years of experience and development made MeVisLab one of the most powerful development platforms for medical image processing. Several prototypes and applications have been realized on the basis of MeVisLab, including software assistants for neuro-imaging, dynamic image analysis, surgery planning, and cardiovascular analysis.\nHow to read this tutorial: This tutorial is a hands-on training. You will learn basic mechanics and features of MeVisLab. We will start by explaining the user interface and end building our own web-applications. While reading the tutorial, open the MeVisLab SDK and try to implement each step yourself. You will learn new mechanics and possibilities in MeVisLab step-by-step. Additional information and links are provided in colored boxes.\nGlossary Term Description MeVisLab MeVisLab consists of the MeVisLab SDK and the MeVisLab ApplicationBuilder. MeVisLab SDK The MeVisLab Software Development Kit (SDK) is the MeVisLab IDE including the text editor MATE and any tools integrated for debugging, testing and profiling. MeVisLab ApplicationBuilder The MeVisLab ApplicationBuilder allows you to generate installable executables from your developed networks and applications. These executables can be delivered to customers. MeVisLab IDE The MeVisLab Integrated Development Environment (IDE) is your starting point whenever you are working with MeVisLab. It provides a programming interface and an advanced text editor. MeVisLab MATE The Advanced Text Editor (MATE) is an integrated text editor for Python and MDL development in MeVisLab. It provides auto completion and syntax highlighting as well as debugging functionalities. MDL The MeVisLab Definition Language (MDL) is the language for developing basic User Interfaces for Networks and Modules in MeVisLab. Module A Module is a single instance providing encapsulated functionalities for a specific purpose. MeVisLab provides thousands of such pre-defined Modules and you can develop your own Modules for extending existing functionalities. Modules provide inputs and outputs for connections in a Network and/or one or more Panels for interacting. Panel A Panel is a User Interface providing possibilities to interact with MeVisLab. Field Parameters of Modules are called fields. Several different types of fields are available such as numbers, text, trigger buttons, etc. Publicly accessible fields can be modified in the Module Inspector or Panel of the selected Module. Macro Module Macro Modules encapsulate Networks including input and output into a single Module. In order to see whats inside a Macro Module, you can open the Context Menu via Right-Click and select [ Show Internal Network ]. You can chose to create Local Macros and Global Macros. Local Macro Local Macros are only available in your currently opened Network. You cannot use the Module Search in MeVisLab to find Local Macros. Global Macro Global Macros are integrated into MeVisLab and can be used in any future Networks. They are available in Module search. Network A Network defines at least two connected Modules. Example Network Each Module provides an Example Network to see how it can be used. Right-Click on the Module and select Help \u0026gt; Show Example Network Output Inspector The Output Inspector is a quick preview of the output of a specific Module. The output can be an image or any other user defined output format. For images, a 2D and 3D view including basic interactions is already available. Module Inspector The Module Inspector shows publicly available properties of the selected module and their current values. Changes in Module Inspector are applied on the fly. Workspace The Workspace is the area where you can add and connect Modules. Multiple Networks are organized in separate Tabs. Views Area The right side of the MeVisLab IDE provides a space to add several predefined panels like Output- and Module inspectors. Debug Output The Debug Output shows debugging messages of your Modules and the MeVisLab IDE. Open Inventor Scene Objects CSO Contour Segmentation Objects (CSOs) WEM Winged Edge Meshes (WEMs) GVR Giga Voxel Renderer (GVR) Lookup Table (LUT) Package MeVisLab IDE User Interface First, start MeVisLab IDE. After the Welcome Screen, the standard user interface opens.\nMeVisLab IDE User Interface Workspace By default, MeVisLab starts with an empty workspace. The workspace is the place for developing and editing Networks via visual programming. Networks of Modules form the basis for all processing and visualization pipelines.\nViews Area The standard Views Area contains the Output Inspector and the Module Inspector. With the help of the Output Inspector, you can visualize the Module output.\nFurther information of each module, like information about Module parameters can be found using the Module Inspector .\nDebug Output In the Debug Output, you can find any debugging information about your MeVisLab installation.\nThe MeVisLab IDE and the layout is completely configurable. You can rearrange the items and add new views via [ Main Menu \u0026rarr; View \u0026rarr; Views ].\nFiletypes in MeVisLab Here a list of the most important file types:\nExtension Description .mlab Network file, includes all information about the network's modules, their settings, their connections, and module groups. Networks developed by using the MeVisLab SDKare stored as .mlab file and can only be opened having a valid SDK license. .def Module definition file, necessary for a module to be added to the common MeVisLab module database. May also include all MDL script parts (if they are not sourced out to the .script file). .script MDL script file, typically includes the user interface definition for panels. See Chapter GUI Development for an example on GUI programming. .mlimage MeVisLab internal image format for 6D images saved with all DICOM tags, lossless compression, and in all data types. .mhelp File with descriptions of all fields and the use of a module, edit- and creatable by using MATE. See Help files for details. .py Python file, used for scripting in macro modules. See Python scripting for an example on macro programming. .dcm DCM part of the imported DICOM file, see Importing DICOM Data. Types of Modules Within the concept of MeVisLab the basic entities we are working with a graphical representations of modules having their specific functions for image processing, image visualization, and image interaction.\nThe three basic module types (ML, Open Inventor and Macro Module) are distinguished by their colors:\nType Look Characteristics ML Module (blue) ML Module Page-based, demand-driven processing of voxels Open Inventor Module (green) Open Inventor Module Visual scene graphs (3D); naming convention: all modules starting with So (for scene object) Macro Module (brown) Macro Module Combination of other module types, allowing implementing hierarchies and scripted interaction If a module is invalid, it is displayed in bright red. This might happen if the module itself is not available on your system.\nAppearance Explanation Invalid Module Invalid module Macro State Invalid Macro containing an invalid module The number of warning and error messages that are being printed to the debug console are listed at the upper right corner of the module. Once the debug console is cleared, the warning and error indicators at the module are also cleared. If the module produces information messages, their number is printed in gray at this position. This enables a network or module developer to find the modules in a network that produce messages quickly.\nModule Connectors Most modules have connectors which are displayed on the module. These represent the inputs (bottom) and outputs (top) of modules.\nIn MeVisLab, three types of connectors are defined.\nLook Appearance Definition Triangle - ML Image triangle ML images Circle - Inventor Scene half-circle Inventor scene Square - Base Object square Base objects: pointers to data structures By connecting these connectors and therefore establishing a so-called data connection, image data, or Open Inventor information is transported from one module to one or more others.\nBesides connecting connectors, basically any field of modules can be connected to other compatible fields of modules with a parameter connection.\nSome modules contain hidden connectors in addition to the ones you can see when adding a module to the workspace. Click on the workspace and press SPACE to see the hidden connectors as well as the internal networks of each module. You can now use the hidden connectors for building connections.\nExtra Infos:\u0026nbsp; For more information about connecter and connection types click here\nFor more information about connecting, disconnecting, moving, and replacing connections click here\nMacro Modules More Information:\u0026nbsp; More information about creating Macro Modules is available in MeVisLab Tutorial Chapter VI Searching and Adding Modules There are several ways to add a module to the current network, for example:\nvia the menu bar, entry [ Modules ]. via the menu bar, [ Quick Search ]. via the View Module Search. via the View Module Browser. via copy and paste from another network. by scripting, see the Scripting Reference Both the [ Modules ] menu and the Module Browser display all available modules. The modules are sorted hierarchically by topics and by module name, as given in the file Genre.def.\nTherefore, both places are a good starting point when in need of a specific function, like an image load module.\nModules Menu and Module Browser The advantage of the Module Browser is that you can right-click the entries, open the context menu and, for example, open the help (in your default Internet browser) or the module files (in MATE, the in-built text editor).\nNote:\u0026nbsp; For a module to get listed, it has to be available in the SDK distribution or in your user-defined packages. If in doubt or missing something, check out the loaded packages in the Preferences.\nFor details on packages, see Package Creation.\nUsually the quickest way to add modules to a network is the quick search in the menu bar. It offers you the possibility to search for modules by module name. By default, the search will also be extended to keywords and substrings and is case-insensitive. To change these settings, click the magnifier button for the search options.\nTip:\u0026nbsp; The quick search field does not need to have the focus. Any time you enter something in the MeVisLab GUI while not being in a dialog window, this will be entered into the quick search automatically. Quick Search Options To search for a module to load an image, you could either type load or image. Let us go with the second option this time. While typing image, the possible results appear. Use the \u0026uarr; ArrowUp or \u0026darr; ArrowDown keys on your keyboard to move to one of the listed modules. The module\u0026rsquo;s About information will appear next to it, allowing you to decide if this is the right module for you.\nQuick Search Results Tip:\u0026nbsp; For a more complex search, use the Module Search View. ","tags":["Tutorial","Introduction","Glossary","Modules","ML Module","Filetypes","UI","Workspace","Search"],"section":"tutorials"},{"date":"1655276193","url":"https://mevislab.github.io/examples/examples/open_inventor/","title":"Open Inventor","summary":"Open Inventor Examples: Open Inventor objects\nMouse interactions in an Open Inventor scene","content":"Open Inventor Examples: Open Inventor objects\nMouse interactions in an Open Inventor scene\n","tags":["Examples","Example Networks"],"section":"examples"},{"date":"1655276193","url":"https://mevislab.github.io/examples/examples/visualization/example1/","title":"Visualization Example 1: Synchronous view of two images","summary":"Visualization Example 1: Synchronous view of two images This very simple example shows how to load an image and apply a basic Convolution filter to the image. The image with and without filter is shown in a Viewer and scrolling is synchronized so that the same slice is shown for both images.\nDownload You can download the example network here","content":"Visualization Example 1: Synchronous view of two images This very simple example shows how to load an image and apply a basic Convolution filter to the image. The image with and without filter is shown in a Viewer and scrolling is synchronized so that the same slice is shown for both images.\nDownload You can download the example network here\n","tags":[],"section":"examples"},{"date":"1655276193","url":"https://mevislab.github.io/examples/examples/visualization/","title":"Visualization Examples","summary":"Visualization Examples: Synchronous view of two images\nCreating a magnifier\nImage overlays\nDisplay images converted to Open Inventor scene objects\nVolume rendering and interactions","content":"Visualization Examples: Synchronous view of two images\nCreating a magnifier\nImage overlays\nDisplay images converted to Open Inventor scene objects\nVolume rendering and interactions\n","tags":["Examples","Example Networks"],"section":"examples"},{"date":"1655276093","url":"https://mevislab.github.io/examples/tutorials/basicmechanisms/","title":"Chapter I: Basic Mechanisms of MeVisLab","summary":"MeVisLab Tutorial Chapter I \u0026nbsp;\u0026nbsp;\u0026nbsp;This example is also available on Youtube. Basic Mechanics of MeVisLab (Example: Building a Contour Filter) In this chapter you will learn the basic mechanics of the MeVisLab IDE. You will learn how to re-use existing Modules to load and view data, and you will build your first processing pipeline. Extra Infos:\u0026nbsp; Additional information about the basics of MeVisLab are explained here Loading Data First, we need to load the data we like to work on.","content":"MeVisLab Tutorial Chapter I \u0026nbsp;\u0026nbsp;\u0026nbsp;This example is also available on Youtube. Basic Mechanics of MeVisLab (Example: Building a Contour Filter) In this chapter you will learn the basic mechanics of the MeVisLab IDE. You will learn how to re-use existing Modules to load and view data, and you will build your first processing pipeline. Extra Infos:\u0026nbsp; Additional information about the basics of MeVisLab are explained here Loading Data First, we need to load the data we like to work on. In MeVisLab, you usually use modules to perform specific tasks. Modules are the basic entities you will be working with. Each module has a specific functionality for processing, visualization and interaction. Connecting these modules enables the development of complex processing pipelines. You will get to know different types of modules throughout the course of this tutorial.\nBy now, we will load our data by using the module ImageLoad. You can find this module via search and add it to your Workspace.\nSearch for ImageLoad As a next step, we like to select and load the data we like to process. Double-click the Module ImageLoad to open its Panel. Now, you can browse through your folders to select the data you like to open. You can find example data in the MeVisLab DemoData directory $(InstallDir)/Packages/MeVisLab/Resources/DemoData located in the MeVisLab installation path. Select a file, for example an MRI scan of a shoulder Shoulder_Fracture.tif. The image is loaded immediately and basic information of the loaded image can be seen in the Panel.\nExtra Infos:\u0026nbsp; Multiple additional Modules for loading data are available such as:\nDicomImport for loading DICOM Images LocalImage for loading any image format For details about loading DICOM images, see here\nThe Output-Inspector and the Module Inspector For a first inspection and visualization of the loaded data, we can use the Output Inspector located in the Views area. You can already interact with the image via Mouse-Wheel and Mouse Buttons / . To preview the image, click on the triangle on the top side of the module ImageLoad, which offers the module output. All module outputs can be found at the top side of the respective module.\nYou can now inspect your image in 2D.\nOutput Inspector Your image does not look like this? One reason might be that the slice of the image you are looking at has no information. Click on the Output Inspector and scroll through the slices (slicing) by using the mouse wheel . Still not seeing anything? Then try to adjust the contrast of the given image by keeping the right mouse button pressed while moving the mouse.\nYou are not restricted to only see your image in 2D. The Output Inspector offers a 3D View of the selected data. For this, click on the tab 3D of the Output Inspector. The 3D view of the image can be rotated by left-clicking on the image and moving the courser around. The little cube in the lower right corner of the viewer shows the orientation of the image.\nNotation:\u0026nbsp; A = anterior, front P = posterior, back R = right side L = left side H = head F = feet Below the Output Inspector, you can find the Module Inspector. The Module Inspector displays properties and parameters of the selected module. Parameters are stored in so called Fields. Using the Module Inspector you can examine different fields of the module ImageLoad. The module has for example the fields filename (the path, the loaded image is stored in) and sizeX, sizeY, sizeZ (the size of the loaded image).\nModule Inspector Viewer Instead of using the Output Inspector to inspect images, it is sensible to add a viewer to the network. Search for the module View2D and add it to your workspace. Most modules have different connectors. Data were transmitted via output connectors on the top side of a module and can be received by other modules via input connectors on the bottom side of the module.\nThe module View2D has one input connector for the voxel-images on the bottom side (triangle) and three other possible inputs (half-circles), which will be explained later on. In general, module outputs can be connected to module inputs with the same symbol and thus transmit information and data between modules.\n2D Viewer You can now add the loaded image to the viewer by connecting the image output of the module ImageLoad with the image input of the module View2D. This is done as follows:\nClick the output connector of ImageLoad.\nKeep the left mouse button pressed while dragging the connection to the input connector of View2D (white line).\nCheck that the connection is well-defined (green line).\nAt the input connector of View2D, release the mouse button and establish the connection (blue line).\nEstablish connection Although the connection is established, no image rendering has started yet. To initialize rendering, open the View2D panel by double-clicking the module View2D in your network. Similar to the Output Inspector, you can scroll through the slices and change the contrast. By pressing the A you can switch the annotation mode.\nView2D Panel You can also disconnect the Modules by dragging the connection away from the input or output connector of the Modules.\nConnections between compatible outputs and inputs are established automatically in case 2 Modules are moved close enough to each other.\nExtra Infos:\u0026nbsp; Connecting, Disconnecting, Moving and Replacing Connections is explained here Image Processing Next, we like to add a processing step to our network. We like to smooth the image using an average kernel. In order to do that, search for the module Convolution and add it to the workspace. Delete the established connection from the module ImageLoad to the module View2D by clicking on the connection and pressing DEL . Now, you can build new connections from the module ImageLoad to the module Convolution and from this module to View2D.\nConvolution Module Double-click the module Convolution to open its panel. The panel allows configurations of the module. You can adjust parameters or in this case select a kernel, for example the 3x3 Avarage Kernel.\nSelect a Kernel The module View2D is now displaying the smoothed image.\nTo see the difference between the processed and the unprocessed image, click on the output of the module ImageLoad to view the original image in the Output Inspector . The great thing about the Output Inspector is that it can display the output of any connector in the process chain (as long as a format is used, the inspector can interpret). Simply click the connector or connection to find out more about the module output.\nThere is another way of inspecting the difference between the processed and the unprocessed image. Add a second viewer module View2D to your workspace. The new module gets a different name: View2D1. It is possible to establish numerous connections from one module output to different other module inputs, but a module input can only receive one connection. Connect the module ImageLoad to the second viewer to display two images at the same time. You can scroll through the slices of both viewers and inspect the images.\nMultiple Viewer Parameter Connection for Synchronization In our example you can scroll through the slices of both viewers independently. To inspect the effect of the filter, it would be helpful to synchronize both viewers in a way, that both show the same slices.\nWe already know data connections between module inputs and outputs. Besides module connections, it is also possible to connect module fields via a parameter connection. The values of connected fields are synchronized, that means when changing the value of one field, all fields connected to this field will be adapted to the same value.\nIn this chapter we like to establish parameter connections to allow the synchronized use of both image viewers. In order to do that, search for the module SyncFloat and add it to your workspace.\nSyncFloat Module We like to synchronize the field startSlice of both viewers, to be able to show the same slice in both viewers simultaneously.\nFirst, right-click the viewer View2D to open its context menu and select [ Show Window \u0026rarr; Automatic Panel ].\nAutomatic Panel View2D This option shows all parameter fields of the module View2D.\nSearch for the field startSlice. The field indicates which slice is currently shown in the Viewer. If you scroll through the slices of an image the value of startSlice changes.\nNow, double-click the module SyncFloat to open its panel.\nClick on the label startSlice in the automatic panel of the module View2D, keep the button pressed and drag the connection to the label Float1 in the panel of the module SyncFloat.\nSynchronize StartSlice The connection is drawn as a thin grey arrow between both modules with the arrowhead pointing to the module that receives the field value as input. The value of the field starSlice is now transmitted to the field Float1. Changing StartSlice automatically changes Float1, but not the other way round.\nParameter Connection StartSlice We now like to establish a connection from the module SyncFloat to the second viewer, Viewer2D1. In order to do that, open the automatic panel View2D1. Draw a connection from the label Float2 of the panel of the module SyncFloat to the label startSlice in the automatic panel of the module View2D1. At last, implement a connection between the parameter fields startSlice of both viewers. Draw the connection from View2D1 to View2D.\nSynchronize both directions As a result, scrolling through the slices with the mouse wheel in one of the viewers synchronizes the rendered slice in the second viewer. In this case, you can inspect the differences between smoothed and unsmoothed data on every single slice.\nYour final Network You can also use the pre-defined Module SynchroView2D to reach the same goal (shown in this chapter ).\nGrouping Modules In this chapter we like to create a contour filter. To finalize the filter, add the modules Arithmetic2 and Morphology to your workspace and connect the modules as shown below. Double-click the module Arithmetic2 to open its panel. Change the field Function of the module Arithmetic2 to use the function subtract in the panel of the module. With this, we finished our contour filter. You can inspect each processing step using the Output Inspector by clicking on the input and output connectors of the respective modules. The final results can be inspected using the viewers. If necessary, adjust the contrast by pressing the right-key and moving the cursor.\nGrouping Modules If you like to know more information about each module, search for help. You can do this by right-clicking the module and select help, which offers an example network and further information about this module.\nModule Help To distinguish the image processing pipeline, you can create a group for it. For that: Select the three modules, for example by dragging a selection rectangle around them. Right-click the selection to open the context menu and select [ Add to New Group ].\nAdd to new Group Enter a name for the new group, for example Filter. The new group is created and displayed as a green rectangle. The group allows for quick interactions with all its modules together.\nYour Filter Group Your network gets very complex and you lost track? No problem. Let MeVisLab arrange your modules automatically via [ Mein Menu \u0026rarr; Edit \u0026rarr; Auto Arrange Selection ] (or via keyboard shortcut CTRL + 1 ).\nNow, it is time to save your first network. Open the tab [ File \u0026rarr; Save ] to save the network in an .mlab file.\nExtra Infos:\u0026nbsp; More information on module groups can be found here Macro-Modules We now like to condense our filter into one single module. You have probably already noticed, that the modules have different colors. Each color represents a special type of modules. The blue modules are called ML-Modules and are responsible for the processing of voxel-images. The brown modules are called macro modules. Macro modules encapsulate a whole network in a single module. You can right-click on one macro-module to open the context menu and select Show Internal Network to see the internal network structure. In addition, macro modules enable the implementation of custom functionalities via python scripting.\nWe now like to condense the modules forming the contour filter into one single macro module. To do that, right-click on the group-title and select Convert To Local Macro. Now, you need to select a name for your macro module and finish the creation of the module. With this you create a local macro module. Local macro modules can only be used in your current network.\nConvert to Local Macro Your first Local Macro Right-click the macro module and select Show Internal Network to inspect and change the internal network. You can change the properties of the new macro module by changing the properties in the internal network. As before, you can for example right-click the module Convolution and change the Kernel. These changes will be preserved.\nInternal Network of your Local Macro \u0026nbsp;\u0026nbsp;\u0026nbsp;This example is also available on Youtube. Extra Infos:\u0026nbsp; Module handling is explained here\nMore information about Marco Modules can be found here\nSummary MeVisLab provides pre-defined Modules you can re-use and connect for building more or less complex networks. Each Module output can be previewed by using the Output Inspector. Each Module provides Example Networks to explain their usage. Parameters of each Module can be changed in the Module Inspector or Automatic Panel of the Module. Parameter connections can be established to synchronize the values of these parameters. Modules can be grouped. Grouped Modules can be encapsulated to Macro Modules. Macro Modules encapsulate networks. Internal networks can be shown and modified. Any changes of the internal network are applied to the Macro Module. ","tags":["Beginner","Tutorial"],"section":"tutorials"},{"date":"1655276093","url":"https://mevislab.github.io/examples/tutorials/basicmechanisms/dataimport/","title":"Example 1: Data import in MeVisLab","summary":"Example 1: Data Import in MeVisLab MeVisLab provides several pre-defined modules to import data for processing in your networks.\nThis chapter explains the basic data formats and modules to use in your network:\nImages DICOM Data Segmentations / 2D Contours 3D Data / Meshes Extra Infos:\u0026nbsp; More detailed explanations for loading images in MeVisLab can be found here Images A very simple module for loading images is the ImageLoad module. ImageLoad Module The ImageLoad module can import the following formats:","content":"Example 1: Data Import in MeVisLab MeVisLab provides several pre-defined modules to import data for processing in your networks.\nThis chapter explains the basic data formats and modules to use in your network:\nImages DICOM Data Segmentations / 2D Contours 3D Data / Meshes Extra Infos:\u0026nbsp; More detailed explanations for loading images in MeVisLab can be found here Images A very simple module for loading images is the ImageLoad module. ImageLoad Module The ImageLoad module can import the following formats:\nDICOM TIFF DICOM/TIFF RAW LUMISYS PNM Analyze PNG JPEG MLImageFileFormat Basic information of the imported images are available on the Panel which opens via double click.\nDICOM data Even if the above explained ImageLoad is able to import DICOM data, a much better way is to use one of the specialized modules for DICOM images such as DicomImport.\nThe DicomImport module allows to define a directory containing DICOM files to import as well as a list of files which can be dropped to the UI and imported. After import, the volumes are shown in a patient tree providing the following patient, study, series and volume information (depending on the availability in the DICOM file(s)):\nPATIENT LEVEL Patient Name (0010,0010) - Patient Birthdate (0010,0030) STUDY LEVEL Study Date (0008,0020) - Study Description (0008,1030) SERIES/VOLUME LEVEL Modality (0008,0060) - Series Description (0008,103e) - Rows (0028,0010) - Columns (0028,0011) - number of slices in volume - number of timepoints in volume DicomImport Module Configuration The DicomImport module generates volumes based on the Dicom Processor Library (DPL) which allows to define sorting and partitioning options.\nDicomImport Sort Part Configuration DicomTree information In order to get all DICOM tags from your currently imported and selected volume, you can connect the DicomImport module to a DicomTagBrowser.\nDicomTagBrowser Module Additional options It is also possible to access files and filenames via Python scripting. Use the Module RunPythonScript to execute.\nExample script\nobject = ctx.field(\u0026#34;DicomImport.outImportResult\u0026#34;).object() ctx.log(object.volumeCount()) ctx.log(object.filePaths(0)) Extra Infos:\u0026nbsp; The MeVisLab Scripting Reference for the DicomImportResultWrapper can be found here Segmentations / 2D Contours 2-dimensional contours in MeVisLab are handled via CSOs (Contour Segmentation Objects).\nExtra Infos:\u0026nbsp; Tutorials for CSOs are available here.\nDetailed explanations about CSOs can be found here\nThe CSO library provides data structures and modules for an interactive or automatic generation of contours in voxel images. Furthermore, these contours can be analyzed, maintained, grouped, and converted into a voxel image or a set of markers.\nCSOs can be created by the existing SoCSO*Editor modules. The following modules are available:\nSoCSOPointEditor SoCSOAngleEditor SoCSOArrowEditor SoCSODistanceLineEditor SoCSODistancePolylineEditor SoCSOEllipseEditor SoCSORectangleEditor SoCSOIsoEditor SoCSOSplineEditor SoCSOPolygonEditor SoCSOLiveWireEditor For saving and loading existing CSOs, the modules CSOSave and CSOLoad can be used.\n3D data / meshes Winged Edge Mesh (WEM) 3-dimensional meshes in MeVisLab are handled via WEMs (Winged Edge Mesh).\nThe module WEMLoad loads different 3D mesh file formats like:\nObject File Format (*.off *.geom) Wavefront (*.obj) Polygon File Format (*.ply) Standard Tessellation Language (*.stl) VRML (*.wrl) Winged Edge Mesh (*.wem) WEMLoad Module WEMs can be rendered via Open Inventor by using the modules SoExaminerViewer or SoRenderArea and SoCameraInteraction.\nBefore visualizing a WEM, it needs to be converted to a Scene Object via SoWEMRenderer.\nSoWEMRenderer Module Extra Infos:\u0026nbsp; Tutorials for WEMs are available here. Loading arbitrary 3D files The SoSceneLoader module is able to load external 3D formats. MeVisLab uses the integrated assimp ThirdParty library which is able to import most common 3D file types. The currently integrated assimp version can be found here Extra Infos:\u0026nbsp; Supported file formats of the assimp library are documented on their website. SoSceneLoader Module The SoSceneLoader module generates a 3D scene from your loaded files which can be rendered via SoExaminerViewer or SoRenderArea and SoCameraInteraction.\nExtra Infos:\u0026nbsp; Example usage is explained in the tutorials for Open Inventor. ","tags":["Beginner","Tutorial","Data Import","DICOM"],"section":"tutorials"},{"date":"-62135596800","url":"https://mevislab.github.io/examples/examples/data_objects/contours/example1/","title":"Contour Example 1: Creation of Contours","summary":"Contour Example 1: Creation of Contours This example shows how to create CSOs using SoCSOEditor modules. Download You can download the example network here","content":"Contour Example 1: Creation of Contours This example shows how to create CSOs using SoCSOEditor modules. Download You can download the example network here\n","tags":[],"section":"examples"},{"date":"-62135596800","url":"https://mevislab.github.io/examples/examples/data_objects/contours/example2/","title":"Contour Example 2: Contour interpolation","summary":"Contour Example 2: Contour interpolation This example shows how to interpolate CSOs over slices. Download You can download the example network here","content":"Contour Example 2: Contour interpolation This example shows how to interpolate CSOs over slices. Download You can download the example network here\n","tags":[],"section":"examples"},{"date":"-62135596800","url":"https://mevislab.github.io/examples/examples/data_objects/contours/example3/","title":"Contour Example 3: 2D and 3D visualization of contours","summary":"Contour Example 3: 2D and 3D visualization of contours This example shows how to display CSOs in 2D as an overlay. In addition, the CSOs are displayed in 3D. Download You can download the example network here","content":"Contour Example 3: 2D and 3D visualization of contours This example shows how to display CSOs in 2D as an overlay. In addition, the CSOs are displayed in 3D. Download You can download the example network here\n","tags":[],"section":"examples"},{"date":"-62135596800","url":"https://mevislab.github.io/examples/examples/data_objects/contours/example4/","title":"Contour Example 4: Annotation of images","summary":"Contour Example 4: Annotation of images This example shows how to add annotations to an image. Download You can download the example network here","content":"Contour Example 4: Annotation of images This example shows how to add annotations to an image. Download You can download the example network here\n","tags":[],"section":"examples"},{"date":"-62135596800","url":"https://mevislab.github.io/examples/examples/data_objects/contours/example5/","title":"Contour Example 5: Contours and ghosting","summary":"Contour Example 5: Contours and ghosting This image shows how to automatically create CSOs based on an iso value. In addition the visualization of CSOs of previous and subsequent slices is shown. Download You can download the example network here","content":"Contour Example 5: Contours and ghosting This image shows how to automatically create CSOs based on an iso value. In addition the visualization of CSOs of previous and subsequent slices is shown. Download You can download the example network here\n","tags":[],"section":"examples"},{"date":"-62135596800","url":"https://mevislab.github.io/examples/examples/basic_mechanisms/contour_filter/","title":"Example 1: Contour Filter","summary":"Example 1: Contour Filter This example shows how to create a contour filter. Download You can download the example network here","content":"Example 1: Contour Filter This example shows how to create a contour filter. Download You can download the example network here\n","tags":["Examples","Example Networks","Contour Filter"],"section":"examples"},{"date":"-62135596800","url":"https://mevislab.github.io/examples/examples/basic_mechanisms/macro_modules_and_module_interaction/example1/","title":"Example 1: Panel for the contour filter","summary":"Example 1: Panel for the contour filter This example contains a whole package structure. Inside you can find the example contour filter for which a panel was created. Download You can download the example network here","content":"Example 1: Panel for the contour filter This example contains a whole package structure. Inside you can find the example contour filter for which a panel was created. Download You can download the example network here\n","tags":["Examples","Example Networks","Macro Module","User Interface","Panel"],"section":"examples"},{"date":"-62135596800","url":"https://mevislab.github.io/examples/examples/basic_mechanisms/macro_modules_and_module_interaction/example2/","title":"Example 2: Python scripting","summary":"Example 2: Python scripting This example shows how to create module interactions via Python scripting. Download The files need to be added to a package. You can download the example network here","content":"Example 2: Python scripting This example shows how to create module interactions via Python scripting. Download The files need to be added to a package. You can download the example network here\n","tags":["Examples","Example Networks","Contour Filter"],"section":"examples"},{"date":"-62135596800","url":"https://mevislab.github.io/examples/examples/data_objects/markers/example1/","title":"Marker Example 1: Distance between markers","summary":"Marker Example 1: Distance between markers This examples shows how to create markers in a viewer and measure their distance. Download You can download the example network here","content":"Marker Example 1: Distance between markers This examples shows how to create markers in a viewer and measure their distance. Download You can download the example network here\n","tags":[],"section":"examples"},{"date":"-62135596800","url":"https://mevislab.github.io/examples/examples/open_inventor/example1/","title":"Open Inventor Example 1: Open Inventor objects","summary":"Open Inventor Example 1: Open Inventor objects In this example a simple Open Inventor scene is created. The Open Inventor scene shows three objects of different color and shape. Download You can download the example network here","content":"Open Inventor Example 1: Open Inventor objects In this example a simple Open Inventor scene is created. The Open Inventor scene shows three objects of different color and shape. Download You can download the example network here\n","tags":[],"section":"examples"},{"date":"-62135596800","url":"https://mevislab.github.io/examples/examples/open_inventor/example2/","title":"Open Inventor Example 2: Mouse interactions in an Open Inventor scene","summary":"Open Inventor Example 2: Mouse interactions in an Open Inventor scene This example shows how to implement object interactions. Download You can download the example network here","content":"Open Inventor Example 2: Mouse interactions in an Open Inventor scene This example shows how to implement object interactions. Download You can download the example network here\n","tags":[],"section":"examples"},{"date":"-62135596800","url":"https://mevislab.github.io/examples/examples/data_objects/surface_objects/example1/","title":"Surface Example 1: Creation of WEMs","summary":"Surface Example 1: Creation of WEMs This example shows how to create WEMs out of voxel images and CSOs. Download You can download the example network here","content":"Surface Example 1: Creation of WEMs This example shows how to create WEMs out of voxel images and CSOs. Download You can download the example network here\n","tags":[],"section":"examples"},{"date":"-62135596800","url":"https://mevislab.github.io/examples/examples/data_objects/surface_objects/example2/","title":"Surface Example 2: Processing and modification of WEMs","summary":"Surface Example 2: Processing and modification of WEMs This example shows how to process and modify WEMs using the modules WEMModify, WEMSmooth and WEMSurfaceDistance. Download You can download the example network here","content":"Surface Example 2: Processing and modification of WEMs This example shows how to process and modify WEMs using the modules WEMModify, WEMSmooth and WEMSurfaceDistance. Download You can download the example network here\n","tags":[],"section":"examples"},{"date":"-62135596800","url":"https://mevislab.github.io/examples/examples/data_objects/surface_objects/example4/","title":"Surface Example 4: Interactively moving WEM","summary":"Surface Example 4: Interactively moving WEM This example shows how to use dragger modules, to modify objects in a 3D viewer. Download You can download the example network here","content":"Surface Example 4: Interactively moving WEM This example shows how to use dragger modules, to modify objects in a 3D viewer. Download You can download the example network here\n","tags":[],"section":"examples"},{"date":"-62135596800","url":"https://mevislab.github.io/examples/examples/data_objects/surface_objects/example5/","title":"Surface Example 5: WEM - Primitive Value Lists","summary":"Surface Example 5: WEM - Primitive Value Lists This example shows how to use Primitive Value Lists (PVLs). With the help of PVLs the distance between the surfaces of WEMs is color coded. Download You can download the example network here","content":"Surface Example 5: WEM - Primitive Value Lists This example shows how to use Primitive Value Lists (PVLs). With the help of PVLs the distance between the surfaces of WEMs is color coded. Download You can download the example network here\n","tags":[],"section":"examples"},{"date":"-62135596800","url":"https://mevislab.github.io/examples/examples/visualization/example2/","title":"Visualization Example 2: Creating a magnifier","summary":"Visualization Example 2: Creating a magnifier This example shows how to create a magnifier. Using the module SubImage a fraction of the original image can be extracted and enlarged. Download You can download the example network here","content":"Visualization Example 2: Creating a magnifier This example shows how to create a magnifier. Using the module SubImage a fraction of the original image can be extracted and enlarged. Download You can download the example network here\n","tags":[],"section":"examples"},{"date":"-62135596800","url":"https://mevislab.github.io/examples/examples/visualization/example3/","title":"Visualization Example 3: Image overlays","summary":"Visualization Example 3: Image overlays This example shows the creation of an overlay. Using the module SoView2DOverlay, an overlay can be blended over a 2D image. Download You can download the example network here","content":"Visualization Example 3: Image overlays This example shows the creation of an overlay. Using the module SoView2DOverlay, an overlay can be blended over a 2D image. Download You can download the example network here\n","tags":[],"section":"examples"},{"date":"-62135596800","url":"https://mevislab.github.io/examples/examples/visualization/example4/","title":"Visualization Example 4: Display images converted to Open Inventor scene objects","summary":"Visualization Example 4: Display images converted to Open Inventor scene objects This example shows how to convert images to Open Inventor scene objects using the module SoView2D and modules based on SoView2D. Download You can download the example network here","content":"Visualization Example 4: Display images converted to Open Inventor scene objects This example shows how to convert images to Open Inventor scene objects using the module SoView2D and modules based on SoView2D. Download You can download the example network here\n","tags":[],"section":"examples"},{"date":"-62135596800","url":"https://mevislab.github.io/examples/examples/visualization/example5/","title":"Visualization Example 5: Volume rendering and interactions","summary":"Visualization Example 5: Volume rendering and interactions This example shows the volume rendering of a scan. The texture of the volume is edited and animations are implemented. Download You can download the example network here","content":"Visualization Example 5: Volume rendering and interactions This example shows the volume rendering of a scan. The texture of the volume is edited and animations are implemented. Download You can download the example network here\n","tags":[],"section":"examples"}]