<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Advanced on MeVisLab Examples</title><link>https://mevislab.github.io/examples/pull/70/tags/advanced/</link><description>Recent content in Advanced on MeVisLab Examples</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Fri, 30 Jun 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://mevislab.github.io/examples/pull/70/tags/advanced/index.xml" rel="self" type="application/rss+xml"/><item><title>Example 2.5.2: Module interactions via Python scripting</title><link>https://mevislab.github.io/examples/pull/70/tutorials/basicmechanisms/macromodules/scriptingexample2/</link><pubDate>Wed, 15 Jun 2022 08:58:44 +0200</pubDate><guid>https://mevislab.github.io/examples/pull/70/tutorials/basicmechanisms/macromodules/scriptingexample2/</guid><description>Example 2.5.2: Module interactions via Python scripting &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;This example is also available on YouTube. Introduction In this example, you will learn how to add Python scripting to your User Interface. The network used in Chapter V will be used for creating the Macro module.
Steps to do Creating the macro module First, we condense the example network into a macro module and then we create a panel for that module. To create a macro module use the Project Wizard, which you find under [ File &amp;rarr; Run Project Wizard ].</description></item><item><title>Example 3: Creating a simple application</title><link>https://mevislab.github.io/examples/pull/70/tutorials/basicmechanisms/macromodules/viewerexample/</link><pubDate>Wed, 15 Jun 2022 08:58:44 +0200</pubDate><guid>https://mevislab.github.io/examples/pull/70/tutorials/basicmechanisms/macromodules/viewerexample/</guid><description>Example 3: Creating a simple application Introduction In the previous examples, you already learned how to create Macro modules, user interfaces and how to interact with your UI via Python scripting.
In this example, you will learn how to create a simple Prototype application in MeVisLab including a User Interface with 2D and 3D viewer. You will learn how to implement field listeners and react on events.
Steps to do Create your network Start with an empty network and add the Module ImageLoad to your workspace.</description></item><item><title>Example 4: Installing additional Python packages using the PythonPip module</title><link>https://mevislab.github.io/examples/pull/70/tutorials/basicmechanisms/macromodules/pythonpip/</link><pubDate>Tue, 16 May 2023 00:00:00 +0000</pubDate><guid>https://mevislab.github.io/examples/pull/70/tutorials/basicmechanisms/macromodules/pythonpip/</guid><description>Example 4: Installing additional Python packages using the PythonPip module Introduction MeVisLab already comes with a lot of integrated third party software tools ready to use. Nevertheless it might be necessary to install additional Python packages for your specific needs. This example will walk you through the process of adding packages through usage of/using the PythonPip module.
The PythonPip module allows to work with the Python package manager pip. It can be used to install Python packages into the site-packages of the MeVisLab Python installation.</description></item><item><title>Example 6: MeVis Path Tracer</title><link>https://mevislab.github.io/examples/pull/70/tutorials/visualization/visualizationexample6/</link><pubDate>Thu, 23 Feb 2023 00:00:00 +0000</pubDate><guid>https://mevislab.github.io/examples/pull/70/tutorials/visualization/visualizationexample6/</guid><description>Example 6: MeVis Path Tracer Introduction The MeVis Path Tracer offers a Monte Carlo Path Tracing framework running on CUDA GPUs. It offers photorealistic rendering of volumes and meshes, physically based lightning with area lights and soft shadows and fully integrates into MeVisLab Open Inventor (camera, depth buffer, clipping planes, etc.).
Extra Infos:&amp;nbsp; CUDA is a parallel computing platform and programming model created by NVIDIA. For further information, see NVIDIA website.</description></item><item><title>Example 6.1: Volume Rendering vs. Path Tracer</title><link>https://mevislab.github.io/examples/pull/70/tutorials/visualization/pathtracer/pathtracerexample1/</link><pubDate>Thu, 23 Feb 2023 00:00:00 +0000</pubDate><guid>https://mevislab.github.io/examples/pull/70/tutorials/visualization/pathtracer/pathtracerexample1/</guid><description>Example 6.1: Volume Rendering vs. Path Tracer Introduction In this example you develop a network to show some differences between volume rendering and the MeVisLab Path Tracer. You will visualize the same scene using both 3D rendering techniques and some of the modules for path tracing.
Attention:&amp;nbsp; The MeVis Path Tracer requires an NVIDIA graphics card with CUDA support. In order to check your hardware, open MeVisLab and add a SoPathTracer module to your workspace.</description></item><item><title>Example 4: Subtract 3D objects</title><link>https://mevislab.github.io/examples/pull/70/tutorials/image_processing/image_processing4/</link><pubDate>Wed, 15 Jun 2022 08:56:33 +0200</pubDate><guid>https://mevislab.github.io/examples/pull/70/tutorials/image_processing/image_processing4/</guid><description>Example 4: Subtract 3D objects &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;This example is also available on YouTube. Introduction In this example, we load an image and render it as WEMIsoSurface. Then we create a 3-dimensional SoSphere and subtract the sphere from the initial WEM.
Steps to do Develop your network Add a LocalImage module to your workspace and select load $(DemoDataPath)/BrainMultiModal/ProbandT1.dcm. Add a WEMIsoSurface, a SoWEMRenderer, a SoBackground and a SoExaminerViewer module and connect them as seen below.</description></item><item><title>Example 5: Clip Planes</title><link>https://mevislab.github.io/examples/pull/70/tutorials/image_processing/image_processing5/</link><pubDate>Wed, 15 Jun 2022 08:56:33 +0200</pubDate><guid>https://mevislab.github.io/examples/pull/70/tutorials/image_processing/image_processing5/</guid><description>Example 5: Clip Planes &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;This example is also available on YouTube. Introduction In this example, we are using the SoGVRDrawOnPlane module to define the currently visible slice from a 2D view as a clip plane in 3D.
Steps to do Develop your network First we need to develop the network to scroll through the slices. Add a LocalImage module to your workspace and select the file ProbandT1 from MeVisLab demo data.</description></item><item><title>Surface Example 5: WEM - Primitive Value Lists</title><link>https://mevislab.github.io/examples/pull/70/tutorials/dataobjects/surfaces/surfaceexample5/</link><pubDate>Wed, 15 Jun 2022 08:56:33 +0200</pubDate><guid>https://mevislab.github.io/examples/pull/70/tutorials/dataobjects/surfaces/surfaceexample5/</guid><description>Surface Example 5: WEM - Primitive Value Lists &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;This example is also available on YouTube. Introduction WEMs do not only contain the coordinates of nodes and surfaces, they can also contain additional information. These information are stored in so called Primitive Value Lists (PVLs). Every node, every surface and every edge can contains such a list. In these lists, you can for example store the color of the node or specific patient information.</description></item><item><title>Example 3: Iterative tests in MeVisLab with Screenshots</title><link>https://mevislab.github.io/examples/pull/70/tutorials/testing/testingexample3/</link><pubDate>Wed, 15 Jun 2022 08:56:33 +0200</pubDate><guid>https://mevislab.github.io/examples/pull/70/tutorials/testing/testingexample3/</guid><description>Example 3: Iterative tests in MeVisLab &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;This example is also available on YouTube. Introduction In this example, you are writing an iterative test. Iterative test functions run a function for every specified input. They return a tuple consisting of the function object called and the inputs iterated over. The iterative test functions are useful if the same function should be applied to different input data. These could be input values, names of input images, etc.</description></item><item><title>Chapter VII: Application Development</title><link>https://mevislab.github.io/examples/pull/70/tutorials/summary/</link><pubDate>Wed, 15 Jun 2022 08:56:33 +0200</pubDate><guid>https://mevislab.github.io/examples/pull/70/tutorials/summary/</guid><description>MeVisLab Tutorial Chapter VII Summary This chapter will summarize all previous chapters and you will develop a whole application in MeVisLab. The complete workflow from developing a prototype to delivering your final application to your customer is explained step-by-step.
Prototype to Product Licensing:&amp;nbsp; Some of the features described here will require a separate license. Building an installable executable requires the MeVisLab ApplicationBuilder license. It extends the MeVisLab SDK so that you can generate an installer of your developed Macro module.</description></item><item><title>Step 1: Prototyping - Develop your Network</title><link>https://mevislab.github.io/examples/pull/70/tutorials/summary/summary1/</link><pubDate>Sun, 15 Jan 2023 00:00:00 +0000</pubDate><guid>https://mevislab.github.io/examples/pull/70/tutorials/summary/summary1/</guid><description>Step 1: Prototyping - Develop your Network Introduction In this example, we will develop a network which fulfills the requirements from the overview page. The network will be developed by re-using existing modules and defining basic field values.
Steps to do 2D viewer The 2D viewer shall visualize the loaded images. In addition to that, it shall be possible to click into the image for starting a RegionGrowing algorithm segmenting parts of the loaded image based on a threshold.</description></item><item><title>Step 2: Prototyping - Create a Macro module</title><link>https://mevislab.github.io/examples/pull/70/tutorials/summary/summary2/</link><pubDate>Mon, 16 Jan 2023 00:00:00 +0000</pubDate><guid>https://mevislab.github.io/examples/pull/70/tutorials/summary/summary2/</guid><description>Step 2: Prototyping - Create a Macro module Introduction In this example, we encapsulate the previously developed prototype network into a Macro module for future application development and automated testing.
Steps to do Make sure to have your *.mlab file from previous Step 1 available.
Package creation Packages are described in detail in Example 2.1: Package creation. If you already have your own package, you can skip this part and continue creating a Macro module.</description></item><item><title>Step 3: Prototyping - User Interface and Python scripting</title><link>https://mevislab.github.io/examples/pull/70/tutorials/summary/summary3/</link><pubDate>Tue, 17 Jan 2023 00:00:00 +0000</pubDate><guid>https://mevislab.github.io/examples/pull/70/tutorials/summary/summary3/</guid><description>Step 3: Prototyping - User Interface and Python scripting Introduction In this step, we will develop a user interface and add Python scripting to the Macro module you created in Step 2.
Steps to do Develop the User Interface A mockup of the user interface you are going to develop is available here. The interface provides the possibility to load files and shows a 2D and a 3D viewer. In addition to that, some settings and information for our final application are available.</description></item><item><title>Step 4: Review - Automated Tests</title><link>https://mevislab.github.io/examples/pull/70/tutorials/summary/summary4/</link><pubDate>Wed, 18 Jan 2023 00:00:00 +0000</pubDate><guid>https://mevislab.github.io/examples/pull/70/tutorials/summary/summary4/</guid><description>Step 4: Review - Automated Tests Introduction In the previous chapters you developed a Macro module with User Interface and Python scripting. In this step you will see how to implement an automated test to verify and validate the Requirements defined in Overview.
Steps to do Create a test network using your Macro module Create a new and empty network and save it as *.mlab file. Remember the location.
Use Module Search and add your Macro module developed in previous steps to your Workspace.</description></item><item><title>Step 5: Review - Installer creation</title><link>https://mevislab.github.io/examples/pull/70/tutorials/summary/summary5/</link><pubDate>Thu, 19 Jan 2023 00:00:00 +0000</pubDate><guid>https://mevislab.github.io/examples/pull/70/tutorials/summary/summary5/</guid><description>Step 5: Review - Installer creation Introduction Your Macro module has been tested manually and/or automatically? Then you should create your first installable executable and deliver it to your customer(s) for final evaluation.
Licensing:&amp;nbsp; This step requires a valid MeVisLab ApplicationBuilder license. It extends the MeVisLab SDK so that you can generate an installer of your developed Macro module. Free evaluation licenses of the MeVisLab ApplicationBuilder, time-limited to 3 months, can be requested at sales(at)mevislab.</description></item><item><title>Step 6: Refine - Update Application</title><link>https://mevislab.github.io/examples/pull/70/tutorials/summary/summary6/</link><pubDate>Fri, 20 Jan 2023 00:00:00 +0000</pubDate><guid>https://mevislab.github.io/examples/pull/70/tutorials/summary/summary6/</guid><description>Step 6: Refine - Update Application Introduction In previous step you developed an application which can be installed on your customers systems for usage. In this step we are going to integrate simple feedback into our executable and re-create the installer.
We want to show you how easy it is to update your application using MeVisLab.
Your customer requests an additional requirement to define the transparency of your 2D overlay in addition to defining the color.</description></item><item><title>Step 7: Refine - Re-Build Installer</title><link>https://mevislab.github.io/examples/pull/70/tutorials/summary/summary7/</link><pubDate>Sat, 21 Jan 2023 00:00:00 +0000</pubDate><guid>https://mevislab.github.io/examples/pull/70/tutorials/summary/summary7/</guid><description>Step 7: Refine - Re-Build Installer Introduction In this step you are re-creating your application installer after changing the UI in previous Step 6: Refine - Update Application.
Steps to do Update the *.mlinstall file You do not need to use the Project Wizard now, because you already have a valid *.mlinstall file. The location should be in your package, under .\Configuration\Installers\TutorialSummary. Open the file in any text editor and search for the $VERSION 0.</description></item><item><title>Extra: Run your application in Browser</title><link>https://mevislab.github.io/examples/pull/70/tutorials/summary/summary8/</link><pubDate>Fri, 24 Feb 2023 00:00:00 +0000</pubDate><guid>https://mevislab.github.io/examples/pull/70/tutorials/summary/summary8/</guid><description>Extra: Run your application in Browser Introduction This step explains how to run your developed application in a browser. The MeVisLab network remains the same, only some adaptations are necessary for running any Macro module in a browser window.
Licensing:&amp;nbsp; This step requires a valid MeVisLab Webtoolkit license. It extends the MeVisLab SDK so that you can develop web macro modules. Free evaluation licenses of the MeVisLab Webtoolkit, time-limited to 3 months, can be requested at sales(at)mevislab.</description></item><item><title>Chapter VIII: ThirdParty components</title><link>https://mevislab.github.io/examples/pull/70/tutorials/thirdparty/</link><pubDate>Wed, 15 Jun 2022 08:56:33 +0200</pubDate><guid>https://mevislab.github.io/examples/pull/70/tutorials/thirdparty/</guid><description>MeVisLab Tutorial Chapter VIII Using ThirdParty software integrated into MeVisLab MeVisLab comes with a lot of software already integrated and ready to use. Even if these tools are not available as a module, like itk and vtk for example, they can be used via Python scripting. This chapter shall give some examples of how to use a selection of integrated ThirdParty components.
Additional Information:&amp;nbsp; PyTorch is not directly integrated into MeVisLab.</description></item><item><title>OpenCV</title><link>https://mevislab.github.io/examples/pull/70/tutorials/thirdparty/opencv/</link><pubDate>Wed, 15 Jun 2022 08:56:33 +0200</pubDate><guid>https://mevislab.github.io/examples/pull/70/tutorials/thirdparty/opencv/</guid><description>Open Source Computer Vision Library (OpenCV) Introduction OpenCV (Open Source Computer Vision Library) is an open source computer vision and machine learning software library.
This chapter provides some examples how to use OpenCV in MeVisLab.
Other resources You can find a lot of OpenCV examples and tutorials on their website.</description></item><item><title>Example 1: WebCam access with OpenCV</title><link>https://mevislab.github.io/examples/pull/70/tutorials/thirdparty/opencv/thirdpartyexample1/</link><pubDate>Wed, 15 Jun 2022 08:56:33 +0200</pubDate><guid>https://mevislab.github.io/examples/pull/70/tutorials/thirdparty/opencv/thirdpartyexample1/</guid><description>Example 1: WebCam access with OpenCV Introduction In this example, we are using the PythonImage module and access your WebCam to show the video in a View2D.
Steps to do Creating the network to be used for testing Add the modules to your workspace and connect them as seen below.
Example Network The viewer is empty because the image needs to be set via Python scripting.
Info:&amp;nbsp; More information about the PythonImage module can be found here Create a macro module Now you need to create a macro module from your network.</description></item><item><title>Example 2: Face Detection with OpenCV</title><link>https://mevislab.github.io/examples/pull/70/tutorials/thirdparty/opencv/thirdpartyexample2/</link><pubDate>Wed, 15 Jun 2022 08:56:33 +0200</pubDate><guid>https://mevislab.github.io/examples/pull/70/tutorials/thirdparty/opencv/thirdpartyexample2/</guid><description>Example 2: Face Detection with OpenCV Introduction This example uses the OpenCV WebCam Python script and adds a basic face detection.
Info:&amp;nbsp; The Python code used in this example has been taken from Towards Data Science. Steps to do Open Example 1 Add the macro module developed in Example 1 to your workspace.
Download trained classifier XML file Initially you need to download the trained classifier XML file. It is available in the OpenCV GitHub repository.</description></item><item><title>PyTorch</title><link>https://mevislab.github.io/examples/pull/70/tutorials/thirdparty/pytorch/</link><pubDate>Tue, 16 May 2023 00:00:00 +0000</pubDate><guid>https://mevislab.github.io/examples/pull/70/tutorials/thirdparty/pytorch/</guid><description>PyTorch Introduction PyTorch is a machine learning framework based on the Torch library, used for applications such as Computer Vision and Natural Language Processing, originally developed by Meta AI and now part of the Linux Foundation umbrella.
A lot of AI frameworks can be used within MeVisLab. We currently do not provide a preintegrated AI framework though as we try to avoid compatibility issues, and AI frameworks are very fast-moving by nature.</description></item><item><title>Example 1: Installing PyTorch using the PythonPip module</title><link>https://mevislab.github.io/examples/pull/70/tutorials/thirdparty/pytorch/pytorchexample1/</link><pubDate>Tue, 16 May 2023 00:00:00 +0000</pubDate><guid>https://mevislab.github.io/examples/pull/70/tutorials/thirdparty/pytorch/pytorchexample1/</guid><description>Example 1: Installing PyTorch using the PythonPip module Introduction The module PythonPip allows you to install additional Python packages to be used in MeVisLab.
Warning:&amp;nbsp; You should not use the general Python pip command from a locally installed Python, because MeVisLab will not know these packages and they cannot be used in MeVisLab directly. The module either allows to install packages into the global MeVisLab installation directory, or into your defined user package.</description></item><item><title>Example 2: Brain Parcellation using PyTorch</title><link>https://mevislab.github.io/examples/pull/70/tutorials/thirdparty/pytorch/pytorchexample2/</link><pubDate>Fri, 30 Jun 2023 00:00:00 +0000</pubDate><guid>https://mevislab.github.io/examples/pull/70/tutorials/thirdparty/pytorch/pytorchexample2/</guid><description>Example 2: Brain Parcellation using PyTorch Introduction In this example, you are using a pre-trained PyTorch deep learning model (HighRes3DNet) to perform a full brain parcellation. HighRes3DNet is a 3D residual network presented by Li et al. in On the Compactness, Efficiency, and Representation of 3D Convolutional Networks: Brain Parcellation as a Pretext Task.
Steps to do Add a LocalImage module to your workspace and select the file MRI_Head.dcm. For PyTorch it is necessary to resample the data to a defined size.</description></item><item><title>Example 3: Segment persons in webcam videos</title><link>https://mevislab.github.io/examples/pull/70/tutorials/thirdparty/pytorch/pytorchexample3/</link><pubDate>Tue, 16 May 2023 00:00:00 +0000</pubDate><guid>https://mevislab.github.io/examples/pull/70/tutorials/thirdparty/pytorch/pytorchexample3/</guid><description>Example 3: Segment persons in webcam videos Introduction This tutorial is based on Example 2: Face Detection with OpenCV. You can re-use some of the scripts already developed in the other tutorial.
Steps to do Add the macro module developed in the previous example to your workspace.
WebCamTest module Open the internal network of the module via middle mouse button and right click on the tab of the workspace showing the internal network.</description></item><item><title>Matplotlib</title><link>https://mevislab.github.io/examples/pull/70/tutorials/thirdparty/matplotlib/</link><pubDate>Thu, 25 May 2023 00:00:00 +0000</pubDate><guid>https://mevislab.github.io/examples/pull/70/tutorials/thirdparty/matplotlib/</guid><description>Matplotlib Matplotlib, introduced by John Hunter in 2002 and initially released in 2003, is a comprehensive data visualization library in Python. It is widely used among the scientific world as it is easy to grasp for beginners and provides high quality plots and images, that are widely customizable.
Info:&amp;nbsp; The documentation on Matplotlib along with general examples, cheat sheets and a starting guide can be found here. As MeVisLab supports the integration of Python scripts e.</description></item><item><title>Example 2: 2D Plotting</title><link>https://mevislab.github.io/examples/pull/70/tutorials/thirdparty/matplotlib/2dplotting/</link><pubDate>Tue, 30 May 2023 00:00:00 +0000</pubDate><guid>https://mevislab.github.io/examples/pull/70/tutorials/thirdparty/matplotlib/2dplotting/</guid><description>Example 2: 2D Plotting Introduction In this tutorial, we will equip the macro module we created in the previous tutorial with a responsive and interactable panel to plot grayscale distributions of single slices as well as defined sequences of slices in 2D.
Steps to do Open the module definition folder of your macro module and the related .script file in MATE. Then activate the Preview as shown below:
Drag the small Preview window to the bottom right corner of your window where it does not bother you.</description></item><item><title>Example 4: 3D Plotting</title><link>https://mevislab.github.io/examples/pull/70/tutorials/thirdparty/matplotlib/3dplotting/</link><pubDate>Wed, 31 May 2023 00:00:00 +0000</pubDate><guid>https://mevislab.github.io/examples/pull/70/tutorials/thirdparty/matplotlib/3dplotting/</guid><description>Example 4: 3D Plotting Introduction In this tutorial, we will equip the macro module we created in the Example 1: Module Setup and later on adapted by enabling it to plot grayscale distributions of single slices and sequences in 2D in Example 2: 2D Plotting with a three dimensional plotting functionality.
Steps to do The fields and commands needed have already been prepared in the second tutorial. We will just have to modify our .</description></item></channel></rss>