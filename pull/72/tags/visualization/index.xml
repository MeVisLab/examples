<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Visualization on MeVisLab Examples</title><link>https://mevislab.github.io/examples/pull/72/tags/visualization/</link><description>Recent content in Visualization on MeVisLab Examples</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Wed, 31 May 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://mevislab.github.io/examples/pull/72/tags/visualization/index.xml" rel="self" type="application/rss+xml"/><item><title>Chapter III: Visualization</title><link>https://mevislab.github.io/examples/pull/72/tutorials/visualization/</link><pubDate>Wed, 15 Jun 2022 08:56:33 +0200</pubDate><guid>https://mevislab.github.io/examples/pull/72/tutorials/visualization/</guid><description>Visualization in MeVisLab Introduction MeVisLab contains a whole toolkit to visualize data and images. 2D, 3D and 4D rendering is possible as well as the interaction with images and data objects.
In this chapter, we focus on 2D and 3D visualization and simple image interactions. Not only pixel- and voxel-based data can be visualized, but also scene objects and 3D scenes (see here).
View2D and View3D An easy way to display data and images in 2D and 3D is by using the Modules View2D and View3D.</description></item><item><title>Example 1: Synchronous view of two images</title><link>https://mevislab.github.io/examples/pull/72/tutorials/visualization/visualizationexample1/</link><pubDate>Wed, 15 Jun 2022 08:56:33 +0200</pubDate><guid>https://mevislab.github.io/examples/pull/72/tutorials/visualization/visualizationexample1/</guid><description>Example 1: Synchronous view of two images Introduction In this example we like to use the module SynchroView2D to be able to inspect two different images simultaneously.
The module SynchroView2D provides two 2D viewers that are synchronized.
As in Tutorial Chapter 1 - Basic Mechanics of MeVisLab, the processed and the unprocessed image can be displayed simultaneously. Scrolling through one image automatically changes the slices of both viewers, so slices with the same slice number are shown in both images.</description></item><item><title>Example 2: Creating a magnifier</title><link>https://mevislab.github.io/examples/pull/72/tutorials/visualization/visualizationexample2/</link><pubDate>Wed, 15 Jun 2022 08:56:33 +0200</pubDate><guid>https://mevislab.github.io/examples/pull/72/tutorials/visualization/visualizationexample2/</guid><description>Example 2: Creating a magnifier &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;This example is also available on YouTube. Introduction Medical images are typically displayed in three different viewing directions (see image): coronal, axial and sagittal.
Using the Viewer OrthoView2D you are able to decide, which viewing direction you like to use. In addition to that, you have the opportunity to display all three orthogonal viewing directions simultaneously. Here, we like to display an image of the head in all three viewing directions and mark positions in the image.</description></item><item><title>Example 3: Image Overlays</title><link>https://mevislab.github.io/examples/pull/72/tutorials/visualization/visualizationexample3/</link><pubDate>Wed, 15 Jun 2022 08:56:33 +0200</pubDate><guid>https://mevislab.github.io/examples/pull/72/tutorials/visualization/visualizationexample3/</guid><description>Example 3: How to blend images over each other &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;This example is also available on YouTube. Introduction In this example we will show you how to blend a 2D image over another one. With the help of the module SoView2DOverlay we will create an overlay, which allows us to highlight all bones in the scan.
Steps to do Develop your network Start this example by adding the shown modules, connecting the modules to form a network and loading the example image Bone.</description></item><item><title>Example 4: Display 2D images in Open Inventor SoRenderArea</title><link>https://mevislab.github.io/examples/pull/72/tutorials/visualization/visualizationexample4/</link><pubDate>Wed, 15 Jun 2022 08:56:33 +0200</pubDate><guid>https://mevislab.github.io/examples/pull/72/tutorials/visualization/visualizationexample4/</guid><description>Example 4: Display images converted to Open Inventor scene objects &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;This example is also available on YouTube. Introduction In the previous example you learned how to use the module SoView2DOverlay together with a View2D. MeVisLab provides a whole family of SoView2D* modules (SoView2DOverlay, SoView2DRectangle, SoView2DGrid, &amp;hellip;). All these modules create or interact with scene objects and are based on the module SoView2D, which can convert a voxel-image into a scene object.</description></item><item><title>Example 5: Volume rendering and interactions</title><link>https://mevislab.github.io/examples/pull/72/tutorials/visualization/visualizationexample5/</link><pubDate>Wed, 15 Jun 2022 08:56:33 +0200</pubDate><guid>https://mevislab.github.io/examples/pull/72/tutorials/visualization/visualizationexample5/</guid><description>Example 5: Volume rendering and interactions &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;This example is also available on YouTube. Introduction In this example we like to convert a scan of a head into a 3D scene-object. The scene-object allows to add some textures, interactions and animations.
Steps to do Develop your network Implement the following network and open the image $(DemoDataPath)/BrainMultiModal/ProbandT1.tif.
SoGVRVolumeRenderer The module SoGVRVolumeRenderer allows volume rendering of 3D and 4D images.
Extra Infos:&amp;nbsp; Additional information about Volume Rendering can be found here: Giga Voxel Renderer Change LUT We like to add a surface color to the head.</description></item><item><title>Example 6: MeVis Path Tracer</title><link>https://mevislab.github.io/examples/pull/72/tutorials/visualization/visualizationexample6/</link><pubDate>Thu, 23 Feb 2023 00:00:00 +0000</pubDate><guid>https://mevislab.github.io/examples/pull/72/tutorials/visualization/visualizationexample6/</guid><description>Example 6: MeVis Path Tracer Introduction The MeVis Path Tracer offers a Monte Carlo Path Tracing framework running on CUDA GPUs. It offers photorealistic rendering of volumes and meshes, physically based lightning with area lights and soft shadows and fully integrates into MeVisLab Open Inventor (camera, depth buffer, clipping planes, etc.).
Extra Infos:&amp;nbsp; CUDA is a parallel computing platform and programming model created by NVIDIA. For further information, see NVIDIA website.</description></item><item><title>Example 6.1: Volume Rendering vs. Path Tracer</title><link>https://mevislab.github.io/examples/pull/72/tutorials/visualization/pathtracer/pathtracerexample1/</link><pubDate>Thu, 23 Feb 2023 00:00:00 +0000</pubDate><guid>https://mevislab.github.io/examples/pull/72/tutorials/visualization/pathtracer/pathtracerexample1/</guid><description>Example 6.1: Volume Rendering vs. Path Tracer Introduction In this example you develop a network to show some differences between volume rendering and the MeVisLab Path Tracer. You will visualize the same scene using both 3D rendering techniques and some of the modules for path tracing.
Attention:&amp;nbsp; The MeVis Path Tracer requires an NVIDIA graphics card with CUDA support. In order to check your hardware, open MeVisLab and add a SoPathTracer module to your workspace.</description></item><item><title>Matplotlib</title><link>https://mevislab.github.io/examples/pull/72/tutorials/thirdparty/matplotlib/</link><pubDate>Thu, 25 May 2023 00:00:00 +0000</pubDate><guid>https://mevislab.github.io/examples/pull/72/tutorials/thirdparty/matplotlib/</guid><description>Matplotlib Matplotlib, introduced by John Hunter in 2002 and initially released in 2003, is a comprehensive data visualization library in Python. It is widely used among the scientific world as it is easy to grasp for beginners and provides high quality plots and images, that are widely customizable.
Info:&amp;nbsp; The documentation on Matplotlib along with general examples, cheat sheets and a starting guide can be found here. As MeVisLab supports the integration of Python scripts e.</description></item><item><title>Example 1: Module Setup</title><link>https://mevislab.github.io/examples/pull/72/tutorials/thirdparty/matplotlib/modulesetup/</link><pubDate>Fri, 26 May 2023 00:00:00 +0000</pubDate><guid>https://mevislab.github.io/examples/pull/72/tutorials/thirdparty/matplotlib/modulesetup/</guid><description>Example 1: Module Setup Introduction To be able to access the data needed for our grayscale distribution plots, we need a network consisting of a module that imports DICOM data, a module that differentiates between slices and another that ouputs histogram data.
Steps to do Open up your MeVisLab workspace and add the modules LocalImage, SubImage and Histogram to it. Connect the output of LocalImage to the input of SubImage and the output of SubImage with the input of Histogram.</description></item><item><title>Example 2: 2D Plotting</title><link>https://mevislab.github.io/examples/pull/72/tutorials/thirdparty/matplotlib/2dplotting/</link><pubDate>Tue, 30 May 2023 00:00:00 +0000</pubDate><guid>https://mevislab.github.io/examples/pull/72/tutorials/thirdparty/matplotlib/2dplotting/</guid><description>Example 2: 2D Plotting Introduction In this tutorial, we will equip the macro module we created in the previous tutorial with a responsive and interactable panel to plot grayscale distributions of single slices as well as defined sequences of slices in 2D.
Steps to do Open the module definition folder of your macro module and the related .script file in MATE. Then activate the Preview as shown below:
Drag the small Preview window to the bottom right corner of your window where it does not bother you.</description></item><item><title>Example 3: Slice Comparison</title><link>https://mevislab.github.io/examples/pull/72/tutorials/thirdparty/matplotlib/slicecomparison/</link><pubDate>Wed, 31 May 2023 00:00:00 +0000</pubDate><guid>https://mevislab.github.io/examples/pull/72/tutorials/thirdparty/matplotlib/slicecomparison/</guid><description>Example 3: Slice Comparison Introduction We will adapt the previously created macro module to be able to overlay two defined slices to compare their grayscale distributions.
The module we are adapting has been set up in the Example 1: Module Setup tutorial. The panel and two dimensional plotting functionality has been added in Example 2: 2D Plotting. Steps to do At first, we will extend the panel: Open your BaseNetwork macro module within an empty MeVisLab workspace and select the .</description></item><item><title>Example 4: 3D Plotting</title><link>https://mevislab.github.io/examples/pull/72/tutorials/thirdparty/matplotlib/3dplotting/</link><pubDate>Wed, 31 May 2023 00:00:00 +0000</pubDate><guid>https://mevislab.github.io/examples/pull/72/tutorials/thirdparty/matplotlib/3dplotting/</guid><description>Example 4: 3D Plotting Introduction In this tutorial, we will equip the macro module we created in the Example 1: Module Setup and later on adapted by enabling it to plot grayscale distributions of single slices and sequences in 2D in Example 2: 2D Plotting with a three dimensional plotting functionality.
Steps to do The fields and commands needed have already been prepared in the second tutorial. We will just have to modify our .</description></item></channel></rss>