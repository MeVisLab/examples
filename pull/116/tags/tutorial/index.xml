<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Tutorial on MeVisLab Examples</title><link>https://mevislab.github.io/examples/pull/116/tags/tutorial/</link><description>Recent content in Tutorial on MeVisLab Examples</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Mon, 19 May 2025 00:00:00 +0000</lastBuildDate><atom:link href="https://mevislab.github.io/examples/pull/116/tags/tutorial/index.xml" rel="self" type="application/rss+xml"/><item><title>Introduction to MeVisLab</title><link>https://mevislab.github.io/examples/pull/116/introduction/introduction/</link><pubDate>Wed, 15 Jun 2022 08:56:33 +0200</pubDate><guid>https://mevislab.github.io/examples/pull/116/introduction/introduction/</guid><description>&lt;h2 id="tutorial_introduction">Tutorial Introduction&lt;/h2>
&lt;p>Welcome to &lt;a href="https://mevislab.github.io/examples/pull/116/glossary/#mevislab">MeVisLab&lt;/a>!&lt;/p>
&lt;p>More than 20 years of experience and the continuous implementation of adaptations made MeVisLab one of
the most powerful development platforms for medical image processing.
Several applications and their prototypes are based on and could be realized because of
MeVisLab, including software assistants for neuro-imaging, dynamic image
analysis, surgery planning, and cardiovascular analysis.&lt;/p>
&lt;p>MeVisLab is a development environment for rapid prototyping and product
development of medical and industrial imaging applications. It includes
a &lt;a href="https://mevislab.github.io/examples/pull/116/glossary/#mevislab-sdk">&lt;em>Software Development Kit (SDK)&lt;/em>&lt;/a> and an &lt;a href="https://mevislab.github.io/examples/pull/116/glossary/#mevislab-apk">&lt;em>ApplicationBuilder&lt;/em>&lt;/a> for deploying your applications to end-customers.&lt;/p></description></item><item><title>Chapter I: Basic Mechanisms of MeVisLab</title><link>https://mevislab.github.io/examples/pull/116/tutorials/basicmechanisms/</link><pubDate>Wed, 15 Jun 2022 08:54:53 +0200</pubDate><guid>https://mevislab.github.io/examples/pull/116/tutorials/basicmechanisms/</guid><description>&lt;h2 id="TutorialBasicMechanics">Basic Mechanics of MeVisLab (Example: Building a Contour Filter)&lt;/h2>
&lt;p>In this chapter you will learn the basic mechanisms of the MeVisLab IDE. You will learn how to re-use existing modules to load and view data and you will build your first processing pipeline.&lt;/p>
&lt;div class="alert alert-secondary d-flex align-items-center" role="alert">
 &lt;div>
 &lt;img width="100px" src="https://mevislab.github.io/examples/pull/116/images/youtube.svg" />&amp;nbsp;&amp;nbsp;&lt;a href="https://www.youtube.com/watch?v=hRspMChITE4" target="_blank">&lt;img width="100px" src="https://img.youtube.com/vi/hRspMChITE4/0.jpg" />&lt;/a>&amp;nbsp;&amp;nbsp;&amp;nbsp;This example is also available on &lt;a href="https://www.youtube.com/watch?v=hRspMChITE4" target="_blank">YouTube&lt;/a>.
 &lt;/div>
&lt;/div>

&lt;svg xmlns="http://www.w3.org/2000/svg" style="display: none;">
 &lt;symbol id="check-fill" fill="currentColor" viewBox="0 0 16 16">
 &lt;path d="M16 8A8 8 0 1 1 0 8a8 8 0 0 1 16 0zm-3.97-3.03a.75.75 0 0 0-1.08.022L7.477 9.417 5.384 7.323a.75.75 0 0 0-1.06 1.06L6.97 11.03a.75.75 0 0 0 1.079-.02l3.992-4.99a.75.75 0 0 0-.01-1.05z"/>
 &lt;/symbol>
 &lt;symbol id="info-fill" fill="currentColor" viewBox="0 0 16 16">
 &lt;path d="M8 16A8 8 0 1 0 8 0a8 8 0 0 0 0 16zm.93-9.412-1 4.705c-.07.34.029.533.304.533.194 0 .487-.07.686-.246l-.088.416c-.287.346-.92.598-1.465.598-.703 0-1.002-.422-.808-1.319l.738-3.468c.064-.293.006-.399-.287-.47l-.451-.081.082-.381 2.29-.287zM8 5.5a1 1 0 1 1 0-2 1 1 0 0 1 0 2z"/>
 &lt;/symbol>
 &lt;symbol id="warning-fill" fill="currentColor" viewBox="0 0 16 16">
 &lt;path d="M8.982 1.566a1.13 1.13 0 0 0-1.96 0L.165 13.233c-.457.778.091 1.767.98 1.767h13.713c.889 0 1.438-.99.98-1.767L8.982 1.566zM8 5c.535 0 .954.462.9.995l-.35 3.507a.552.552 0 0 1-1.1 0L7.1 5.995A.905.905 0 0 1 8 5zm.002 6a1 1 0 1 1 0 2 1 1 0 0 1 0-2z"/>
 &lt;/symbol>
 &lt;symbol id="danger-fill" fill="currentColor" viewBox="0 0 16 16">
 &lt;path d="M8.982 1.566a1.13 1.13 0 0 0-1.96 0L.165 13.233c-.457.778.091 1.767.98 1.767h13.713c.889 0 1.438-.99.98-1.767L8.982 1.566zM8 5c.535 0 .954.462.9.995l-.35 3.507a.552.552 0 0 1-1.1 0L7.1 5.995A.905.905 0 0 1 8 5zm.002 6a1 1 0 1 1 0 2 1 1 0 0 1 0-2z"/>
 &lt;/symbol>
&lt;/svg>

&lt;div class="alert alert-primary alert-info d-flex align-items-center" role="alert">
 &lt;svg class="bi flex-shrink-0 me-2" width="24" height="24" role="img" aria-label="Extra Infos:">&lt;use xlink:href="#info-fill"/>&lt;/svg>
 &lt;div>
 &lt;b>Extra Infos:&amp;nbsp;&lt;/b>
 Additional information on the basics of MeVisLab are explained
&lt;a href="https://mevislabdownloads.mevis.de/docs/current/MeVisLab/Resources/Documentation/Publish/SDK/GettingStarted/index.html" target="_blank">here&lt;/a>
 &lt;/div>
&lt;/div>
&lt;h3 id="TutorialLoadingData">Loading Data&lt;/h3>
&lt;p>First, we need to load the data we would like to work on, e.g. a CT scan. In MeVisLab, modules are used to perform their associated specific task, they are the basic entities you will be working with. Each module has a different functionality for processing, visualization and interaction. Connecting modules enables the development of complex processing pipelines. You will get to know different types of modules throughout the course of this tutorial.&lt;/p></description></item><item><title>Example 1: Data import in MeVisLab</title><link>https://mevislab.github.io/examples/pull/116/tutorials/basicmechanisms/dataimport/</link><pubDate>Wed, 15 Jun 2022 08:54:53 +0200</pubDate><guid>https://mevislab.github.io/examples/pull/116/tutorials/basicmechanisms/dataimport/</guid><description>&lt;h1 id="example-1-data-import-in-mevislab">Example 1: Data Import in MeVisLab&lt;/h1>
&lt;p>MeVisLab provides several pre-defined modules to import data for processing in your networks.&lt;/p>

&lt;svg xmlns="http://www.w3.org/2000/svg" style="display: none;">
 &lt;symbol id="check-fill" fill="currentColor" viewBox="0 0 16 16">
 &lt;path d="M16 8A8 8 0 1 1 0 8a8 8 0 0 1 16 0zm-3.97-3.03a.75.75 0 0 0-1.08.022L7.477 9.417 5.384 7.323a.75.75 0 0 0-1.06 1.06L6.97 11.03a.75.75 0 0 0 1.079-.02l3.992-4.99a.75.75 0 0 0-.01-1.05z"/>
 &lt;/symbol>
 &lt;symbol id="info-fill" fill="currentColor" viewBox="0 0 16 16">
 &lt;path d="M8 16A8 8 0 1 0 8 0a8 8 0 0 0 0 16zm.93-9.412-1 4.705c-.07.34.029.533.304.533.194 0 .487-.07.686-.246l-.088.416c-.287.346-.92.598-1.465.598-.703 0-1.002-.422-.808-1.319l.738-3.468c.064-.293.006-.399-.287-.47l-.451-.081.082-.381 2.29-.287zM8 5.5a1 1 0 1 1 0-2 1 1 0 0 1 0 2z"/>
 &lt;/symbol>
 &lt;symbol id="warning-fill" fill="currentColor" viewBox="0 0 16 16">
 &lt;path d="M8.982 1.566a1.13 1.13 0 0 0-1.96 0L.165 13.233c-.457.778.091 1.767.98 1.767h13.713c.889 0 1.438-.99.98-1.767L8.982 1.566zM8 5c.535 0 .954.462.9.995l-.35 3.507a.552.552 0 0 1-1.1 0L7.1 5.995A.905.905 0 0 1 8 5zm.002 6a1 1 0 1 1 0 2 1 1 0 0 1 0-2z"/>
 &lt;/symbol>
 &lt;symbol id="danger-fill" fill="currentColor" viewBox="0 0 16 16">
 &lt;path d="M8.982 1.566a1.13 1.13 0 0 0-1.96 0L.165 13.233c-.457.778.091 1.767.98 1.767h13.713c.889 0 1.438-.99.98-1.767L8.982 1.566zM8 5c.535 0 .954.462.9.995l-.35 3.507a.552.552 0 0 1-1.1 0L7.1 5.995A.905.905 0 0 1 8 5zm.002 6a1 1 0 1 1 0 2 1 1 0 0 1 0-2z"/>
 &lt;/symbol>
&lt;/svg>

&lt;div class="alert alert-primary alert-info d-flex align-items-center" role="alert">
 &lt;svg class="bi flex-shrink-0 me-2" width="24" height="24" role="img" aria-label="Extra Infos:">&lt;use xlink:href="#info-fill"/>&lt;/svg>
 &lt;div>
 &lt;b>Extra Infos:&amp;nbsp;&lt;/b>
 The easiest way to load data in MeVisLab is to drop the file onto the MeVisLab workspace. MeVisLab will try to find a module that is capable of loading your file automatically.
 &lt;/div>
&lt;/div>
&lt;p>These chapters explain the data formats and modules related to this example:&lt;/p></description></item><item><title>Example 1.1: MeVisLab Coordinate Systems</title><link>https://mevislab.github.io/examples/pull/116/tutorials/basicmechanisms/coordinatesystems/coordinatesystems/</link><pubDate>Wed, 15 Jun 2022 08:58:44 +0200</pubDate><guid>https://mevislab.github.io/examples/pull/116/tutorials/basicmechanisms/coordinatesystems/coordinatesystems/</guid><description>&lt;h1 id="example-11-mevislab-coordinate-systems">Example 1.1: MeVisLab Coordinate Systems&lt;/h1>
&lt;p>Three coordinate systems exist next to each other:&lt;/p>
&lt;ul>
&lt;li>World coordinates&lt;/li>
&lt;li>Voxel coordinates&lt;/li>
&lt;li>Device coordinates&lt;/li>
&lt;/ul>
&lt;p>World coordinate systems in MeVisLab are always &lt;a href="https://en.wikipedia.org/wiki/Right-hand_rule" target="_blank" rel="noopener">right handed&lt;/a>.&lt;/p>
&lt;p>The blue rectangle shows the same region in the three coordinate systems.&lt;/p>
&lt;p>&lt;p class="page-image">
 &lt;a data-modal="bs-lightbox" href="https://mevislab.github.io/examples/pull/116/images/tutorials/basicmechanics/GSExampleImageProcessing10b.png" title="Coordinate Systems in MeVisLab">&lt;img id="Coordinate Systems in MeVisLab" class="img-fluid rounded" src="https://mevislab.github.io/examples/pull/116/images/tutorials/basicmechanics/GSExampleImageProcessing10b.png" alt="Coordinate Systems in MeVisLab" title="Coordinate Systems in MeVisLab" />&lt;/a>
 &lt;figcaption class="figure-caption">Coordinate Systems in MeVisLab&lt;/figcaption>
&lt;/p>
&lt;/p>
&lt;h2 id="world-coordinates">World coordinates&lt;/h2>
&lt;p>World coordinates are:&lt;/p>
&lt;ul>
&lt;li>Global: Combine several objects in a view&lt;/li>
&lt;li>Isotropic: All directions are equivalent&lt;/li>
&lt;li>Orthogonal: Coordinate axes are orthogonal to each other&lt;/li>
&lt;/ul>
&lt;p>The origin of the world coordinate system can be anywhere and is not clearly defined. Origins of the other coordinate systems can always be mapped to the world coordinate system. In case of DICOM images, this mapping is defined by DICOM tags.&lt;/p></description></item><item><title>Example 1.2: DICOM Coordinate Systems</title><link>https://mevislab.github.io/examples/pull/116/tutorials/basicmechanisms/coordinatesystems/coordinatesystems2/</link><pubDate>Wed, 15 Jun 2022 08:58:44 +0200</pubDate><guid>https://mevislab.github.io/examples/pull/116/tutorials/basicmechanisms/coordinatesystems/coordinatesystems2/</guid><description>&lt;h1 id="example-12-dicom-coordinate-systems">Example 1.2: DICOM Coordinate Systems&lt;/h1>
&lt;h2 id="general">General&lt;/h2>
&lt;p>Coordinate systems in &lt;a href="https://en.wikipedia.org/wiki/DICOM" target="_blank" rel="noopener">DICOM&lt;/a> are basically the same as world coordinates in MeVisLab (except for the 0.5 voxel offset).
World coordinates also refer to the patient axes. They are:&lt;/p>
&lt;ul>
&lt;li>Based on the patient&amp;rsquo;s main body axes (transverse, coronal, sagittal)&lt;/li>
&lt;li>Measured as 1 coordinate unit = 1 millimeter&lt;/li>
&lt;li>Right-handed&lt;/li>
&lt;li>Not standardized regarding their origin&lt;/li>
&lt;/ul>
&lt;p>&lt;p class="page-image">
 &lt;a data-modal="bs-lightbox" href="https://mevislab.github.io/examples/pull/116/images/tutorials/visualization/V2_00.png" title="World Coordinates in Context of the Human Body">&lt;img id="World Coordinates in Context of the Human Body" class="img-fluid rounded" src="https://mevislab.github.io/examples/pull/116/images/tutorials/visualization/V2_00.png" alt="World Coordinates in Context of the Human Body" title="World Coordinates in Context of the Human Body" />&lt;/a>
 &lt;figcaption class="figure-caption">World Coordinates in Context of the Human Body&lt;/figcaption>
&lt;/p></description></item><item><title>Example 2: Macro modules and Module Interaction</title><link>https://mevislab.github.io/examples/pull/116/tutorials/basicmechanisms/macromodules/</link><pubDate>Mon, 19 May 2025 00:00:00 +0000</pubDate><guid>https://mevislab.github.io/examples/pull/116/tutorials/basicmechanisms/macromodules/</guid><description>&lt;h1 id="TutorialChapter6">Example 2: Macro modules&lt;/h1>
&lt;h2 id="macro-module">Macro Module&lt;/h2>
&lt;p>A macro module can be used to develop your own functionality in MeVisLab. You have two main options for how to use it:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>With Internal Networks&lt;/strong>: Use a macro module to reuse a network of modules. For example, if you build a network that applies a specific image filter and you want to use this setup in multiple projects, you can wrap the entire network into a single macro module. This way, you don’t need to manually reconnect all the individual modules each time — you just use your macro module. You can see the internal network at the left side of the image below. You can see an example in &lt;a href="https://mevislab.github.io/examples/pull/116/tutorials/basicmechanisms#TutorialMacroModules">Basic Mechanics of MeVisLab (Example: Building a Contour Filter)&lt;/a>.&lt;/p></description></item><item><title>Example 2.1: Package Creation</title><link>https://mevislab.github.io/examples/pull/116/tutorials/basicmechanisms/macromodules/package/</link><pubDate>Wed, 15 Jun 2022 08:58:44 +0200</pubDate><guid>https://mevislab.github.io/examples/pull/116/tutorials/basicmechanisms/macromodules/package/</guid><description>&lt;h1 id="example-21-package-creation">Example 2.1: Package creation&lt;/h1>
&lt;div class="alert alert-secondary d-flex align-items-center" role="alert">
 &lt;div>
 &lt;img width="100px" src="https://mevislab.github.io/examples/pull/116/images/youtube.svg" />&amp;nbsp;&amp;nbsp;&lt;a href="https://www.youtube.com/watch?v=1wrGsYtAs3g" target="_blank">&lt;img width="100px" src="https://img.youtube.com/vi/1wrGsYtAs3g/0.jpg" />&lt;/a>&amp;nbsp;&amp;nbsp;&amp;nbsp;This example is also available on &lt;a href="https://www.youtube.com/watch?v=1wrGsYtAs3g" target="_blank">YouTube&lt;/a>.
 &lt;/div>
&lt;/div>
&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;p>Packages are the way MeVisLab organizes different development projects.&lt;/p>
&lt;p>Macro modules and projects are stored in packages. If you like to create a global macro module, you need a package in which this macro module can be stored in. In this chapter, we will create our own package. We start our package creation by creating a package group, because every package needs to be stored in a package group. You can find detailed information about packages and package groups 
&lt;a href="https://mevislabdownloads.mevis.de/docs/current/MeVisLab/Resources/Documentation/Publish/SDK/GettingStarted/ch08.html" target="_blank">here&lt;/a>

 and in the 
&lt;a href="https://mevislabdownloads.mevis.de/docs/current/MeVisLab/Resources/Documentation/Publish/SDK/PackageStructure/index.html" target="_blank">package documentation&lt;/a>

.&lt;/p></description></item><item><title>Example 2.2: Creation of global macro modules</title><link>https://mevislab.github.io/examples/pull/116/tutorials/basicmechanisms/macromodules/globalmacromodules/</link><pubDate>Wed, 15 Jun 2022 08:58:44 +0200</pubDate><guid>https://mevislab.github.io/examples/pull/116/tutorials/basicmechanisms/macromodules/globalmacromodules/</guid><description>&lt;h1 id="example-22-global-macro-modules">Example 2.2: Global macro modules&lt;/h1>
&lt;div class="alert alert-secondary d-flex align-items-center" role="alert">
 &lt;div>
 &lt;img width="100px" src="https://mevislab.github.io/examples/pull/116/images/youtube.svg" />&amp;nbsp;&amp;nbsp;&lt;a href="https://www.youtube.com/watch?v=M4HnA0d1V5k" target="_blank">&lt;img width="100px" src="https://img.youtube.com/vi/M4HnA0d1V5k/0.jpg" />&lt;/a>&amp;nbsp;&amp;nbsp;&amp;nbsp;This example is also available on &lt;a href="https://www.youtube.com/watch?v=M4HnA0d1V5k" target="_blank">YouTube&lt;/a>.
 &lt;/div>
&lt;/div>
&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;p>In this chapter you will learn how to create global macro modules. There are many ways to do this. You can convert local macros into global macro modules or you can directly create global macro modules using the &lt;em>Project Wizard&lt;/em>. In contrast to local macro modules, global macro modules are commonly available throughout projects and can be found via module search and under &lt;i>[
 
 Modules
]&lt;/i>.&lt;/p></description></item><item><title>Example 2.3: Creation of module help</title><link>https://mevislab.github.io/examples/pull/116/tutorials/basicmechanisms/macromodules/helpfiles/</link><pubDate>Wed, 15 Jun 2022 08:58:44 +0200</pubDate><guid>https://mevislab.github.io/examples/pull/116/tutorials/basicmechanisms/macromodules/helpfiles/</guid><description>&lt;h1 id="example-23-creation-of-module-help">Example 2.3: Creation of module help&lt;/h1>
&lt;p>Generating help of a macro module is part of the video about macro modules from &lt;a href="https://mevislab.github.io/examples/pull/116/tutorials/basicmechanisms/macromodules/globalmacromodules">Example 2: Creation of global macro modules&lt;/a>
&lt;div class="alert alert-secondary d-flex align-items-center" role="alert">
 &lt;div>
 &lt;img width="100px" src="https://mevislab.github.io/examples/pull/116/images/youtube.svg" />&amp;nbsp;&amp;nbsp;&lt;a href="https://www.youtube.com/watch?v=M4HnA0d1V5k" target="_blank">&lt;img width="100px" src="https://img.youtube.com/vi/M4HnA0d1V5k/0.jpg" />&lt;/a>&amp;nbsp;&amp;nbsp;&amp;nbsp;This example is also available on &lt;a href="https://www.youtube.com/watch?v=M4HnA0d1V5k" target="_blank">YouTube&lt;/a>.
 &lt;/div>
&lt;/div>&lt;/p>
&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;p>In this chapter, you will learn how to create a help page and an example network. For hands-on training, we will use the macro module &lt;code>Filter&lt;/code>, which was created in the &lt;a href="https://mevislab.github.io/examples/pull/116/tutorials/basicmechanisms/macromodules/globalmacromodules">previous chapter&lt;/a>.&lt;/p></description></item><item><title>Example 2.4: GUI development</title><link>https://mevislab.github.io/examples/pull/116/tutorials/basicmechanisms/macromodules/guidesign/</link><pubDate>Wed, 15 Jun 2022 08:58:44 +0200</pubDate><guid>https://mevislab.github.io/examples/pull/116/tutorials/basicmechanisms/macromodules/guidesign/</guid><description>&lt;h1 id="example-24-building-a-panel-layout-interactions-with-macro-modules">Example 2.4: Building a Panel Layout: Interactions with macro modules&lt;/h1>
&lt;div class="alert alert-secondary d-flex align-items-center" role="alert">
 &lt;div>
 &lt;img width="100px" src="https://mevislab.github.io/examples/pull/116/images/youtube.svg" />&amp;nbsp;&amp;nbsp;&lt;a href="https://www.youtube.com/watch?v=tdQUkkROWBg" target="_blank">&lt;img width="100px" src="https://img.youtube.com/vi/tdQUkkROWBg/0.jpg" />&lt;/a>&amp;nbsp;&amp;nbsp;&amp;nbsp;This example is also available on &lt;a href="https://www.youtube.com/watch?v=tdQUkkROWBg" target="_blank">YouTube&lt;/a>.
 &lt;/div>
&lt;/div>
&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;p>This chapter will give you an introduction into the creation of module panels and user
interfaces. For the implementation you will need to
use the 
&lt;a href="https://mevislabdownloads.mevis.de/docs/current/MeVisLab/Resources/Documentation/Publish/SDK/MDLReference/index.html" target="_blank">MeVisLab Definition Language (MDL)&lt;/a>

.&lt;/p>

&lt;svg xmlns="http://www.w3.org/2000/svg" style="display: none;">
 &lt;symbol id="check-fill" fill="currentColor" viewBox="0 0 16 16">
 &lt;path d="M16 8A8 8 0 1 1 0 8a8 8 0 0 1 16 0zm-3.97-3.03a.75.75 0 0 0-1.08.022L7.477 9.417 5.384 7.323a.75.75 0 0 0-1.06 1.06L6.97 11.03a.75.75 0 0 0 1.079-.02l3.992-4.99a.75.75 0 0 0-.01-1.05z"/>
 &lt;/symbol>
 &lt;symbol id="info-fill" fill="currentColor" viewBox="0 0 16 16">
 &lt;path d="M8 16A8 8 0 1 0 8 0a8 8 0 0 0 0 16zm.93-9.412-1 4.705c-.07.34.029.533.304.533.194 0 .487-.07.686-.246l-.088.416c-.287.346-.92.598-1.465.598-.703 0-1.002-.422-.808-1.319l.738-3.468c.064-.293.006-.399-.287-.47l-.451-.081.082-.381 2.29-.287zM8 5.5a1 1 0 1 1 0-2 1 1 0 0 1 0 2z"/>
 &lt;/symbol>
 &lt;symbol id="warning-fill" fill="currentColor" viewBox="0 0 16 16">
 &lt;path d="M8.982 1.566a1.13 1.13 0 0 0-1.96 0L.165 13.233c-.457.778.091 1.767.98 1.767h13.713c.889 0 1.438-.99.98-1.767L8.982 1.566zM8 5c.535 0 .954.462.9.995l-.35 3.507a.552.552 0 0 1-1.1 0L7.1 5.995A.905.905 0 0 1 8 5zm.002 6a1 1 0 1 1 0 2 1 1 0 0 1 0-2z"/>
 &lt;/symbol>
 &lt;symbol id="danger-fill" fill="currentColor" viewBox="0 0 16 16">
 &lt;path d="M8.982 1.566a1.13 1.13 0 0 0-1.96 0L.165 13.233c-.457.778.091 1.767.98 1.767h13.713c.889 0 1.438-.99.98-1.767L8.982 1.566zM8 5c.535 0 .954.462.9.995l-.35 3.507a.552.552 0 0 1-1.1 0L7.1 5.995A.905.905 0 0 1 8 5zm.002 6a1 1 0 1 1 0 2 1 1 0 0 1 0-2z"/>
 &lt;/symbol>
&lt;/svg>

&lt;div class="alert alert-primary alert-info d-flex align-items-center" role="alert">
 &lt;svg class="bi flex-shrink-0 me-2" width="24" height="24" role="img" aria-label="Extra Infos:">&lt;use xlink:href="#info-fill"/>&lt;/svg>
 &lt;div>
 &lt;b>Extra Infos:&amp;nbsp;&lt;/b>
 More information about GUI design in MeVisLab can be found
&lt;a href="https://mevislabdownloads.mevis.de/docs/current/MeVisLab/Resources/Documentation/Publish/SDK/GettingStarted/ch11.html" target="_blank">here&lt;/a>
 &lt;/div>
&lt;/div>
&lt;h2 id="Example_Paneldesign">Creating a panel for the macro module flilter&lt;/h2>
&lt;h3 id="creation-of-a-module-panel">Creation of a module panel&lt;/h3>
&lt;p>In &lt;a href="https://mevislab.github.io/examples/pull/116/tutorials/basicmechanisms/macromodules/globalmacromodules">Example 2.2&lt;/a> we created the global macro module &lt;code>Filter&lt;/code>. By now, this module does not have a proper panel. When double-clicking 

&lt;img width="22px" src="https://mevislab.github.io/examples/pull/116/images/lmb.svg" alt="Left Mouse Button" />


 the module, the &lt;em>Automatic Panel&lt;/em> is shown.&lt;/p></description></item><item><title>Example 2.5: Interactions via Python scripting</title><link>https://mevislab.github.io/examples/pull/116/tutorials/basicmechanisms/macromodules/pythonscripting/</link><pubDate>Wed, 15 Jun 2022 08:58:44 +0200</pubDate><guid>https://mevislab.github.io/examples/pull/116/tutorials/basicmechanisms/macromodules/pythonscripting/</guid><description>&lt;h1 id="TutorialPythonScripting">Example 2.5: Module Interactions Using Python Scripting&lt;/h1>
&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;p>This chapter will give you an overview over Python scripting in MeVisLab. Here, no introduction into Python will be given. However, basic knowledge in Python is helpful. Instead, we will show how to integrate and use Python in the MeVisLab SDK.&lt;/p>
&lt;p>In fact, nearly everything in MeVisLab can be done via Python scripting: You can add modules to your network, or remove modules, you can dynamically establish and remove connections and so on. But, much more important: You can access module inputs and outputs, as well as module fields to process their parameters and data. You can equip user interfaces and panel with custom functionalities. Python can be used to implement module interactions. When you open a panel or you press a button in a panel, the executed actions are implemented via Python scripting.&lt;/p></description></item><item><title>Example 2.5.1: The module RunPythonScript</title><link>https://mevislab.github.io/examples/pull/116/tutorials/basicmechanisms/macromodules/scriptingexample1/</link><pubDate>Wed, 15 Jun 2022 08:58:44 +0200</pubDate><guid>https://mevislab.github.io/examples/pull/116/tutorials/basicmechanisms/macromodules/scriptingexample1/</guid><description>&lt;h1 id="example-251-the-module-runpythonscript">Example 2.5.1: The module RunPythonScript&lt;/h1>
&lt;div class="alert alert-secondary d-flex align-items-center" role="alert">
 &lt;div>
 &lt;img width="100px" src="https://mevislab.github.io/examples/pull/116/images/youtube.svg" />&amp;nbsp;&amp;nbsp;&lt;a href="https://www.youtube.com/watch?v=O5Get1PMOq8" target="_blank">&lt;img width="100px" src="https://img.youtube.com/vi/O5Get1PMOq8/0.jpg" />&lt;/a>&amp;nbsp;&amp;nbsp;&amp;nbsp;This example is also available on &lt;a href="https://www.youtube.com/watch?v=O5Get1PMOq8" target="_blank">YouTube&lt;/a>.
 &lt;/div>
&lt;/div>
&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;p>The module &lt;code>RunPythonScript&lt;/code> allows to execute Python scripts from within a MeVisLab network. You can draw parameter connection from modules to &lt;code>RunPythonScript&lt;/code> and back, to process parameter fields using Python scripting.&lt;/p>
&lt;h2 id="steps-to-do">Steps to do&lt;/h2>
&lt;h3 id="develop-your-network">Develop your network&lt;/h3>
&lt;p>In this example, we like to dynamically change the color of a cube in an Open Inventor scene. For that, add and connect the following modules as shown.&lt;/p></description></item><item><title>Example 2.5.2: Module interactions via Python scripting</title><link>https://mevislab.github.io/examples/pull/116/tutorials/basicmechanisms/macromodules/scriptingexample2/</link><pubDate>Wed, 15 Jun 2022 08:58:44 +0200</pubDate><guid>https://mevislab.github.io/examples/pull/116/tutorials/basicmechanisms/macromodules/scriptingexample2/</guid><description>&lt;h1 id="example-252-module-interactions-via-python-scripting">Example 2.5.2: Module interactions via Python scripting&lt;/h1>
&lt;div class="alert alert-secondary d-flex align-items-center" role="alert">
 &lt;div>
 &lt;img width="100px" src="https://mevislab.github.io/examples/pull/116/images/youtube.svg" />&amp;nbsp;&amp;nbsp;&lt;a href="https://www.youtube.com/watch?v=hGq6vA7Ll9Q" target="_blank">&lt;img width="100px" src="https://img.youtube.com/vi/hGq6vA7Ll9Q/0.jpg" />&lt;/a>&amp;nbsp;&amp;nbsp;&amp;nbsp;This example is also available on &lt;a href="https://www.youtube.com/watch?v=hGq6vA7Ll9Q" target="_blank">YouTube&lt;/a>.
 &lt;/div>
&lt;/div>
&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;p>In this example, you will learn how to add Python scripting to your User Interface. The network used in &lt;a href="tutorials/dataobjects/contours/contourexample5/">Chapter V&lt;/a> will be used for creating the macro module.&lt;/p>
&lt;h2 id="steps-to-do">Steps to do&lt;/h2>
&lt;h3 id="creating-the-macro-module">Creating the macro module&lt;/h3>
&lt;p>First, we condense the example network into a macro module and then we create a panel for that module. To create a macro module use the
Project Wizard, which you find under &lt;i>[
 
 File
 &amp;rarr; 
 Run Project Wizard
]&lt;/i>. Select
&lt;em>Macro module&lt;/em> and press &lt;em>Run&lt;/em>.&lt;/p></description></item><item><title>Example 3: Creating a simple application</title><link>https://mevislab.github.io/examples/pull/116/tutorials/basicmechanisms/macromodules/viewerexample/</link><pubDate>Wed, 15 Jun 2022 08:58:44 +0200</pubDate><guid>https://mevislab.github.io/examples/pull/116/tutorials/basicmechanisms/macromodules/viewerexample/</guid><description>&lt;h1 id="example-3-creating-a-simple-application">Example 3: Creating a simple application&lt;/h1>
&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;p>In the previous examples, you already learned how to create macro modules, user interfaces and how to interact with your UI via Python scripting.&lt;/p>
&lt;p>In this example, you will learn how to create a simple Prototype application in MeVisLab including a User Interface with 2D and 3D viewer. You will learn how to implement field listeners and react on events.&lt;/p>
&lt;h2 id="steps-to-do">Steps to do&lt;/h2>
&lt;h3 id="create-your-network">Create your network&lt;/h3>
&lt;p>Start with an empty network and add the Module &lt;code>ImageLoad&lt;/code> to your workspace. Then add a &lt;code>View2D&lt;/code> and &lt;code>View3D&lt;/code> to your workspace and connect the modules as seen below.&lt;/p></description></item><item><title>Example 4: Installing additional Python packages using the PythonPip module</title><link>https://mevislab.github.io/examples/pull/116/tutorials/basicmechanisms/macromodules/pythonpip/</link><pubDate>Tue, 16 May 2023 00:00:00 +0000</pubDate><guid>https://mevislab.github.io/examples/pull/116/tutorials/basicmechanisms/macromodules/pythonpip/</guid><description>&lt;h1 id="example-4-installing-additional-python-packages-using-the-pythonpip-module">Example 4: Installing additional Python packages using the PythonPip module&lt;/h1>
&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;p>MeVisLab already comes with a lot of integrated third party software tools ready to use. Nevertheless it might be necessary to install additional Python packages for your specific needs. This example will walk you through the process of adding packages through usage of/using the &lt;code>PythonPip&lt;/code> module.&lt;/p>
&lt;p>The &lt;code>PythonPip&lt;/code> module allows to work with the Python package manager pip. It can be used to install Python packages into the site-packages of the MeVisLab Python installation.&lt;/p></description></item><item><title>Example 5: Debugging Python in MATE</title><link>https://mevislab.github.io/examples/pull/116/tutorials/basicmechanisms/macromodules/pythondebugger/</link><pubDate>Thu, 09 Jan 2025 00:00:00 +0000</pubDate><guid>https://mevislab.github.io/examples/pull/116/tutorials/basicmechanisms/macromodules/pythondebugger/</guid><description>&lt;h1 id="example-5-debugging-python-files-in-mate">Example 5: Debugging Python files in MATE&lt;/h1>
&lt;div class="alert alert-secondary d-flex align-items-center" role="alert">
 &lt;div>
 &lt;img width="100px" src="https://mevislab.github.io/examples/pull/116/images/youtube.svg" />&amp;nbsp;&amp;nbsp;&lt;a href="https://www.youtube.com/watch?v=ccLDQUrlzjU" target="_blank">&lt;img width="100px" src="https://img.youtube.com/vi/ccLDQUrlzjU/0.jpg" />&lt;/a>&amp;nbsp;&amp;nbsp;&amp;nbsp;This example is also available on &lt;a href="https://www.youtube.com/watch?v=ccLDQUrlzjU" target="_blank">YouTube&lt;/a>.
 &lt;/div>
&lt;/div>
&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;p>MeVisLab provides the powerful integrated text editor MATE. By default, MATE is used to create/edit files like Python scripts. In this tutorial, we want to show you how to debug Python scripts in MeVisLab.&lt;/p>
&lt;h2 id="prepare-your-network">Prepare your network&lt;/h2>
&lt;p>We are using a very simple network of pre-defined modules, but you can also debug your self-written Python scripts. Add a &lt;code>LocalImage&lt;/code> module to your workspace and connect it to a &lt;code>DicomTagBrowser&lt;/code> module. The &lt;code>DicomTagBrowser&lt;/code> module shows a table containing the DICOM tags of your currently opened file.&lt;/p></description></item><item><title>Example 6: Creating Multi-View Layouts Using SoViewportRegion</title><link>https://mevislab.github.io/examples/pull/116/tutorials/basicmechanisms/macromodules/soviewportregion/</link><pubDate>Tue, 22 Apr 2025 00:00:00 +0000</pubDate><guid>https://mevislab.github.io/examples/pull/116/tutorials/basicmechanisms/macromodules/soviewportregion/</guid><description>&lt;h1 id="example-6-creating-multi-view-layouts-using-soviewportregion">Example 6: Creating Multi-View Layouts Using SoViewportRegion&lt;/h1>
&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;p>In this guide, we will show how to use the &lt;code>SoViewportRegion&lt;/code> module to create custom layouts within the &lt;code>SoRenderArea&lt;/code> module. This allows you to display multiple views or slices in a single window.&lt;/p>
&lt;p>We will demonstrate how to:&lt;/p>
&lt;ul>
&lt;li>Divide the render area into multiple regions.&lt;/li>
&lt;li>Assign different content to each region.&lt;/li>
&lt;li>Use alternative methods, such as &lt;code>SoView2D&lt;/code>, when applicable.&lt;/li>
&lt;/ul>
&lt;h2 id="prepare-your-network">Prepare your network&lt;/h2>
&lt;h3 id="displaying-three-images-in-one-panel">Displaying three images in one panel&lt;/h3>
&lt;p>Add an &lt;code>ImageLoad&lt;/code> module to your workspace and select a 3D image like &lt;em>./MeVisLab/Resources/DemoData/MRI_Head.tif&lt;/em> from the MeVisLab demo data directory. Connect an &lt;code>OrthoReformat3&lt;/code> module and add three &lt;code>View2D&lt;/code> modules.&lt;/p></description></item><item><title>Chapter II: Open Inventor</title><link>https://mevislab.github.io/examples/pull/116/tutorials/openinventor/</link><pubDate>Wed, 15 Jun 2022 08:56:33 +0200</pubDate><guid>https://mevislab.github.io/examples/pull/116/tutorials/openinventor/</guid><description>&lt;h1 id="TutorialOpenInventorModules">Open Inventor modules&lt;/h1>
&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;p>In total, there are three types of modules:&lt;/p>
&lt;ul>
&lt;li>blue ML modules&lt;/li>
&lt;li>brown macro modules&lt;/li>
&lt;li>green Open Inventor modules&lt;/li>
&lt;/ul>
&lt;p>The names of Open Inventor modules start with the prefix &lt;code>So\*&lt;/code> (for Scene Objects). Open Inventor modules process and render 3D scene objects and enable image interactions. Scene objects are transmitted using the semi-circle shaped input and output connectors. With the help of these modules, Open Inventor scenes can be implemented.&lt;/p></description></item><item><title>Example 1: Open Inventor Objects</title><link>https://mevislab.github.io/examples/pull/116/tutorials/openinventor/openinventorobjects/</link><pubDate>Wed, 15 Jun 2022 08:56:33 +0200</pubDate><guid>https://mevislab.github.io/examples/pull/116/tutorials/openinventor/openinventorobjects/</guid><description>&lt;h1 id="TutorialOpenInventorModules">Example 1: Open Inventor Objects&lt;/h1>
&lt;div class="alert alert-secondary d-flex align-items-center" role="alert">
 &lt;div>
 &lt;img width="100px" src="https://mevislab.github.io/examples/pull/116/images/youtube.svg" />&amp;nbsp;&amp;nbsp;&lt;a href="https://www.youtube.com/watch?v=aFCK_aqmPsg" target="_blank">&lt;img width="100px" src="https://img.youtube.com/vi/aFCK_aqmPsg/0.jpg" />&lt;/a>&amp;nbsp;&amp;nbsp;&amp;nbsp;This example is also available on &lt;a href="https://www.youtube.com/watch?v=aFCK_aqmPsg" target="_blank">YouTube&lt;/a>.
 &lt;/div>
&lt;/div>
&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;p>In this example we like to construct an Open Inventor scene in which we display three 3D objects of different color and shape.&lt;/p>
&lt;h2 id="steps-to-do">Steps to do&lt;/h2>
&lt;h3 id="TutorialGenerateOpenInventorObjects">Generating Open Inventor Objects&lt;/h3>
&lt;p>First, add the modules &lt;code>SoExaminerViewer&lt;/code> and &lt;code>SoCone&lt;/code> to the workspace and connect both modules as shown. The module &lt;code>SoCone&lt;/code> creates a cone shaped object, which can be displayed in the Viewer &lt;code>SoExaminerViewer&lt;/code>.&lt;/p></description></item><item><title>Example 2: Mouse interactions in Open Inventor</title><link>https://mevislab.github.io/examples/pull/116/tutorials/openinventor/mouseinteractions/</link><pubDate>Wed, 15 Jun 2022 08:56:33 +0200</pubDate><guid>https://mevislab.github.io/examples/pull/116/tutorials/openinventor/mouseinteractions/</guid><description>&lt;h1 id="TutorialVisualizationExample5">Example 2: Mouse interactions in Open Inventor&lt;/h1>
&lt;div class="alert alert-secondary d-flex align-items-center" role="alert">
 &lt;div>
 &lt;img width="100px" src="https://mevislab.github.io/examples/pull/116/images/youtube.svg" />&amp;nbsp;&amp;nbsp;&lt;a href="https://www.youtube.com/watch?v=Ye5lOHDWcRo" target="_blank">&lt;img width="100px" src="https://img.youtube.com/vi/Ye5lOHDWcRo/0.jpg" />&lt;/a>&amp;nbsp;&amp;nbsp;&amp;nbsp;This example is also available on &lt;a href="https://www.youtube.com/watch?v=Ye5lOHDWcRo" target="_blank">YouTube&lt;/a>.
 &lt;/div>
&lt;/div>
&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;p>In this example, we implement some image or object interactions. We will create a 3D scene, in which we display a cube and change its size using the mouse. We also get to know another viewer, the module &lt;code>SoExaminerViewer&lt;/code>. This viewer is important. It enables the rendering of Open Inventor scenes and allows interactions with the Open Inventor scenes.&lt;/p></description></item><item><title>Example 3: Camera Interactions in Open Inventor</title><link>https://mevislab.github.io/examples/pull/116/tutorials/openinventor/camerainteraction/</link><pubDate>Wed, 22 Mar 2023 00:00:00 +0000</pubDate><guid>https://mevislab.github.io/examples/pull/116/tutorials/openinventor/camerainteraction/</guid><description>&lt;h1 id="CameraInteraction">Example 3: Camera Interactions in Open Inventor&lt;/h1>
&lt;div class="alert alert-secondary d-flex align-items-center" role="alert">
 &lt;div>
 &lt;img width="100px" src="https://mevislab.github.io/examples/pull/116/images/youtube.svg" />&amp;nbsp;&amp;nbsp;&lt;a href="https://www.youtube.com/watch?v=J6qtN8QfPEc" target="_blank">&lt;img width="100px" src="https://img.youtube.com/vi/J6qtN8QfPEc/0.jpg" />&lt;/a>&amp;nbsp;&amp;nbsp;&amp;nbsp;This example is also available on &lt;a href="https://www.youtube.com/watch?v=J6qtN8QfPEc" target="_blank">YouTube&lt;/a>.
 &lt;/div>
&lt;/div>
&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;p>In this example, we are learning the basic principles of camera interactions in Open Inventor. We will show the difference between a &lt;code>SoRenderArea&lt;/code> and a &lt;code>SoExaminerViewer&lt;/code> and use different modules of the &lt;code>SoCamera*&lt;/code> group.&lt;/p>
&lt;h2 id="the-sorenderarea-module">The &lt;code>SoRenderArea&lt;/code> module&lt;/h2>
&lt;p>The module &lt;code>SoRenderArea&lt;/code> is a simple renderer for Open Inventor scenes. It offers functionality to record movies and to create snapshots, but does not include an own camera or light.&lt;/p></description></item><item><title>Example 4: Post Effects in Open Inventor</title><link>https://mevislab.github.io/examples/pull/116/tutorials/openinventor/posteffectsinopeninventor/</link><pubDate>Fri, 03 May 2024 10:52:33 +0200</pubDate><guid>https://mevislab.github.io/examples/pull/116/tutorials/openinventor/posteffectsinopeninventor/</guid><description>&lt;h1 id="example-4-post-effects-in-open-inventor">Example 4: Post Effects in Open Inventor&lt;/h1>
&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;p>Up to this point, we practiced constructing Open Inventor scenes and placed three-dimensional Open Inventor objects of different colors and shapes within them.
In this tutorial, we will go over the steps to add shadows to our 3D-objects, make them glow and vary their opacity to make them transparent. We will also incorporate WEMs from multi-frame DICOMs and render them as scene objects to see how different post effects can be used on them.&lt;/p></description></item><item><title>Chapter III: Visualization</title><link>https://mevislab.github.io/examples/pull/116/tutorials/visualization/</link><pubDate>Wed, 15 Jun 2022 08:56:33 +0200</pubDate><guid>https://mevislab.github.io/examples/pull/116/tutorials/visualization/</guid><description>&lt;h1 id="TutorialVisualization">Visualization in MeVisLab&lt;/h1>
&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;p>Images and data objects can be rendered in 2D and 3D and interacted with in several ways using a set of tools available through MeVisLab.
In this chapter in particular, we will focus on simple image interaction with two- and three-dimensional visualizations.&lt;/p>

&lt;svg xmlns="http://www.w3.org/2000/svg" style="display: none;">
 &lt;symbol id="check-fill" fill="currentColor" viewBox="0 0 16 16">
 &lt;path d="M16 8A8 8 0 1 1 0 8a8 8 0 0 1 16 0zm-3.97-3.03a.75.75 0 0 0-1.08.022L7.477 9.417 5.384 7.323a.75.75 0 0 0-1.06 1.06L6.97 11.03a.75.75 0 0 0 1.079-.02l3.992-4.99a.75.75 0 0 0-.01-1.05z"/>
 &lt;/symbol>
 &lt;symbol id="info-fill" fill="currentColor" viewBox="0 0 16 16">
 &lt;path d="M8 16A8 8 0 1 0 8 0a8 8 0 0 0 0 16zm.93-9.412-1 4.705c-.07.34.029.533.304.533.194 0 .487-.07.686-.246l-.088.416c-.287.346-.92.598-1.465.598-.703 0-1.002-.422-.808-1.319l.738-3.468c.064-.293.006-.399-.287-.47l-.451-.081.082-.381 2.29-.287zM8 5.5a1 1 0 1 1 0-2 1 1 0 0 1 0 2z"/>
 &lt;/symbol>
 &lt;symbol id="warning-fill" fill="currentColor" viewBox="0 0 16 16">
 &lt;path d="M8.982 1.566a1.13 1.13 0 0 0-1.96 0L.165 13.233c-.457.778.091 1.767.98 1.767h13.713c.889 0 1.438-.99.98-1.767L8.982 1.566zM8 5c.535 0 .954.462.9.995l-.35 3.507a.552.552 0 0 1-1.1 0L7.1 5.995A.905.905 0 0 1 8 5zm.002 6a1 1 0 1 1 0 2 1 1 0 0 1 0-2z"/>
 &lt;/symbol>
 &lt;symbol id="danger-fill" fill="currentColor" viewBox="0 0 16 16">
 &lt;path d="M8.982 1.566a1.13 1.13 0 0 0-1.96 0L.165 13.233c-.457.778.091 1.767.98 1.767h13.713c.889 0 1.438-.99.98-1.767L8.982 1.566zM8 5c.535 0 .954.462.9.995l-.35 3.507a.552.552 0 0 1-1.1 0L7.1 5.995A.905.905 0 0 1 8 5zm.002 6a1 1 0 1 1 0 2 1 1 0 0 1 0-2z"/>
 &lt;/symbol>
&lt;/svg>

&lt;div class="alert alert-primary alert-info d-flex align-items-center" role="alert">
 &lt;svg class="bi flex-shrink-0 me-2" width="24" height="24" role="img" aria-label="Info:">&lt;use xlink:href="#info-fill"/>&lt;/svg>
 &lt;div>
 &lt;b>Info:&amp;nbsp;&lt;/b>
 Not only pixel- and voxel-based data, but also scene objects and 3D scenes can be visualized. See our tutorial on &lt;a href="https://mevislab.github.io/examples/pull/116/tutorials/openinventor#TutorialOpenInventorModules">OpenInventorModules&lt;/a> for further information.
 &lt;/div>
&lt;/div>
&lt;h2 id="view2d-and-view3d">View2D and View3D&lt;/h2>
&lt;p>An easy way to display data and images in 2D and 3D is by using the Modules &lt;code>View2D&lt;/code> and &lt;code>View3D&lt;/code>. What can be done with these viewers?&lt;/p></description></item><item><title>Example 1: Synchronous view of two images</title><link>https://mevislab.github.io/examples/pull/116/tutorials/visualization/visualizationexample1/</link><pubDate>Wed, 15 Jun 2022 08:56:33 +0200</pubDate><guid>https://mevislab.github.io/examples/pull/116/tutorials/visualization/visualizationexample1/</guid><description>&lt;h1 id="VisualizationExample1">Example 1: Synchronous view of two images&lt;/h1>
&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;p>In this example we like to use the module &lt;code>SynchroView2D&lt;/code> to be able to inspect two different images simultaneously.&lt;/p>
&lt;p>The module &lt;code>SynchroView2D&lt;/code> provides two 2D viewers that are synchronized.&lt;/p>
&lt;p>As in Tutorial &lt;a href="https://mevislab.github.io/examples/pull/116/tutorials/basicmechanisms/#TutorialParameterConnection">Chapter 1 - Basic Mechanics of MeVisLab&lt;/a>, the processed and the unprocessed image can be displayed simultaneously. Scrolling through one image automatically changes the slices of both viewers, so slices with the same slice number are shown in both images.&lt;/p></description></item><item><title>Example 2: Creating a magnifier</title><link>https://mevislab.github.io/examples/pull/116/tutorials/visualization/visualizationexample2/</link><pubDate>Wed, 15 Jun 2022 08:56:33 +0200</pubDate><guid>https://mevislab.github.io/examples/pull/116/tutorials/visualization/visualizationexample2/</guid><description>&lt;h1 id="TutorialVisualizationExample2">Example 2: Creating a magnifier&lt;/h1>
&lt;div class="alert alert-secondary d-flex align-items-center" role="alert">
 &lt;div>
 &lt;img width="100px" src="https://mevislab.github.io/examples/pull/116/images/youtube.svg" />&amp;nbsp;&amp;nbsp;&lt;a href="https://www.youtube.com/watch?v=lfq_TkWOuCo" target="_blank">&lt;img width="100px" src="https://img.youtube.com/vi/lfq_TkWOuCo/0.jpg" />&lt;/a>&amp;nbsp;&amp;nbsp;&amp;nbsp;This example is also available on &lt;a href="https://www.youtube.com/watch?v=lfq_TkWOuCo" target="_blank">YouTube&lt;/a>.
 &lt;/div>
&lt;/div>
&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;p>Medical images are typically displayed in three different viewing directions (see image): coronal, axial and sagittal.&lt;/p>
&lt;p>Using the Viewer &lt;code>OrthoView2D&lt;/code> you are able to decide, which viewing direction you like to use. In addition to that, you have the opportunity to display all three orthogonal viewing directions simultaneously. Here, we like to display an image of the head in all three viewing directions and mark positions in the image.&lt;/p></description></item><item><title>Example 3: Image Overlays</title><link>https://mevislab.github.io/examples/pull/116/tutorials/visualization/visualizationexample3/</link><pubDate>Wed, 15 Jun 2022 08:56:33 +0200</pubDate><guid>https://mevislab.github.io/examples/pull/116/tutorials/visualization/visualizationexample3/</guid><description>&lt;h1 id="TutorialVisualizationExample3">Example 3: How to blend images over each other&lt;/h1>
&lt;div class="alert alert-secondary d-flex align-items-center" role="alert">
 &lt;div>
 &lt;img width="100px" src="https://mevislab.github.io/examples/pull/116/images/youtube.svg" />&amp;nbsp;&amp;nbsp;&lt;a href="https://www.youtube.com/watch?v=e8iFGp-St0c" target="_blank">&lt;img width="100px" src="https://img.youtube.com/vi/e8iFGp-St0c/0.jpg" />&lt;/a>&amp;nbsp;&amp;nbsp;&amp;nbsp;This example is also available on &lt;a href="https://www.youtube.com/watch?v=e8iFGp-St0c" target="_blank">YouTube&lt;/a>.
 &lt;/div>
&lt;/div>
&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;p>In this example we will show you how to blend a 2D image over another one. With the help of the module &lt;code>SoView2DOverlay&lt;/code> we will create an overlay, which allows us to highlight all bones in the scan.&lt;/p>
&lt;h2 id="steps-to-do">Steps to do&lt;/h2>
&lt;h3 id="develop-your-network">Develop your network&lt;/h3>
&lt;p>Start this example by adding the shown modules, connecting the modules to form a network and loading the example image &lt;em>Bone.tiff&lt;/em>.&lt;/p></description></item><item><title>Example 4: Display 2D images in Open Inventor SoRenderArea</title><link>https://mevislab.github.io/examples/pull/116/tutorials/visualization/visualizationexample4/</link><pubDate>Wed, 15 Jun 2022 08:56:33 +0200</pubDate><guid>https://mevislab.github.io/examples/pull/116/tutorials/visualization/visualizationexample4/</guid><description>&lt;h1 id="TutorialVisualizationExample4">Example 4: Display images converted to Open Inventor scene objects&lt;/h1>
&lt;div class="alert alert-secondary d-flex align-items-center" role="alert">
 &lt;div>
 &lt;img width="100px" src="https://mevislab.github.io/examples/pull/116/images/youtube.svg" />&amp;nbsp;&amp;nbsp;&lt;a href="https://www.youtube.com/watch?v=WaD6zuvVNek" target="_blank">&lt;img width="100px" src="https://img.youtube.com/vi/WaD6zuvVNek/0.jpg" />&lt;/a>&amp;nbsp;&amp;nbsp;&amp;nbsp;This example is also available on &lt;a href="https://www.youtube.com/watch?v=WaD6zuvVNek" target="_blank">YouTube&lt;/a>.
 &lt;/div>
&lt;/div>
&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;p>In the previous example you learned how to use the module &lt;code>SoView2DOverlay&lt;/code> together with a &lt;code>View2D&lt;/code>. MeVisLab provides a whole family of &lt;code>SoView2D*&lt;/code> modules (&lt;code>SoView2DOverlay&lt;/code>, &lt;code>SoView2DRectangle&lt;/code>, &lt;code>SoView2DGrid&lt;/code>, &amp;hellip;). All these modules create or interact with scene objects and are based on the module &lt;code>SoView2D&lt;/code>, which can convert a voxel-image into a scene object. In this example, you will get to know some members of the &lt;code>SoView2D&lt;/code>-family.&lt;/p></description></item><item><title>Example 5: Volume rendering and interactions</title><link>https://mevislab.github.io/examples/pull/116/tutorials/visualization/visualizationexample5/</link><pubDate>Wed, 15 Jun 2022 08:56:33 +0200</pubDate><guid>https://mevislab.github.io/examples/pull/116/tutorials/visualization/visualizationexample5/</guid><description>&lt;h1 id="TutorialVisualizationExample6">Example 5: Volume rendering and interactions&lt;/h1>
&lt;div class="alert alert-secondary d-flex align-items-center" role="alert">
 &lt;div>
 &lt;img width="100px" src="https://mevislab.github.io/examples/pull/116/images/youtube.svg" />&amp;nbsp;&amp;nbsp;&lt;a href="https://www.youtube.com/watch?v=QViPqXs2LHc" target="_blank">&lt;img width="100px" src="https://img.youtube.com/vi/QViPqXs2LHc/0.jpg" />&lt;/a>&amp;nbsp;&amp;nbsp;&amp;nbsp;This example is also available on &lt;a href="https://www.youtube.com/watch?v=QViPqXs2LHc" target="_blank">YouTube&lt;/a>.
 &lt;/div>
&lt;/div>
&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;p>In this example we like to convert a scan of a head into a 3D scene-object. The scene-object allows to add some textures, interactions and animations.&lt;/p>
&lt;h2 id="steps-to-do">Steps to do&lt;/h2>
&lt;h3 id="develop-your-network">Develop your network&lt;/h3>
&lt;p>Implement the following network and open the image &lt;em>$(DemoDataPath)/BrainMultiModal/ProbandT1.tif&lt;/em>.&lt;/p>
&lt;p>&lt;p class="page-image">
 &lt;a data-modal="bs-lightbox" href="https://mevislab.github.io/examples/pull/116/images/tutorials/visualization/V6_01.png" title="SoGVRVolumeRenderer">&lt;img id="SoGVRVolumeRenderer" class="img-fluid rounded" src="https://mevislab.github.io/examples/pull/116/images/tutorials/visualization/V6_01.png" alt="SoGVRVolumeRenderer" title="SoGVRVolumeRenderer" />&lt;/a>
 &lt;figcaption class="figure-caption">SoGVRVolumeRenderer&lt;/figcaption>
&lt;/p>
&lt;/p>
&lt;p>The module &lt;code>SoGVRVolumeRenderer&lt;/code> allows volume rendering of 3D and 4D images.&lt;/p></description></item><item><title>Example 6: MeVis Path Tracer</title><link>https://mevislab.github.io/examples/pull/116/tutorials/visualization/visualizationexample6/</link><pubDate>Thu, 23 Feb 2023 00:00:00 +0000</pubDate><guid>https://mevislab.github.io/examples/pull/116/tutorials/visualization/visualizationexample6/</guid><description>&lt;h1 id="example-6-mevis-path-tracer">Example 6: MeVis Path Tracer&lt;/h1>
&lt;div class="alert alert-secondary d-flex align-items-center" role="alert">
 &lt;div>
 &lt;img width="100px" src="https://mevislab.github.io/examples/pull/116/images/youtube.svg" />&amp;nbsp;&amp;nbsp;&lt;a href="https://youtube.com/shorts/U23QH2Pvwew" target="_blank">&lt;img width="100px" src="https://img.youtube.com/vi/U23QH2Pvwew/0.jpg" />&lt;/a>&amp;nbsp;&amp;nbsp;&amp;nbsp;We have a Short video showing the possibilities of the &lt;b>MeVis Path Tracer&lt;/b> on &lt;a href="https://youtube.com/shorts/U23QH2Pvwew" target="_blank">YouTube&lt;/a>.
 &lt;/div>
&lt;/div>
&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;p>The MeVis Path Tracer offers a Monte Carlo Path Tracing framework running on CUDA GPUs. It offers photorealistic rendering of volumes and meshes, physically based lightning with area lights and soft shadows and fully integrates into MeVisLab Open Inventor (camera, depth buffer, clipping planes, etc.).&lt;/p>

&lt;svg xmlns="http://www.w3.org/2000/svg" style="display: none;">
 &lt;symbol id="check-fill" fill="currentColor" viewBox="0 0 16 16">
 &lt;path d="M16 8A8 8 0 1 1 0 8a8 8 0 0 1 16 0zm-3.97-3.03a.75.75 0 0 0-1.08.022L7.477 9.417 5.384 7.323a.75.75 0 0 0-1.06 1.06L6.97 11.03a.75.75 0 0 0 1.079-.02l3.992-4.99a.75.75 0 0 0-.01-1.05z"/>
 &lt;/symbol>
 &lt;symbol id="info-fill" fill="currentColor" viewBox="0 0 16 16">
 &lt;path d="M8 16A8 8 0 1 0 8 0a8 8 0 0 0 0 16zm.93-9.412-1 4.705c-.07.34.029.533.304.533.194 0 .487-.07.686-.246l-.088.416c-.287.346-.92.598-1.465.598-.703 0-1.002-.422-.808-1.319l.738-3.468c.064-.293.006-.399-.287-.47l-.451-.081.082-.381 2.29-.287zM8 5.5a1 1 0 1 1 0-2 1 1 0 0 1 0 2z"/>
 &lt;/symbol>
 &lt;symbol id="warning-fill" fill="currentColor" viewBox="0 0 16 16">
 &lt;path d="M8.982 1.566a1.13 1.13 0 0 0-1.96 0L.165 13.233c-.457.778.091 1.767.98 1.767h13.713c.889 0 1.438-.99.98-1.767L8.982 1.566zM8 5c.535 0 .954.462.9.995l-.35 3.507a.552.552 0 0 1-1.1 0L7.1 5.995A.905.905 0 0 1 8 5zm.002 6a1 1 0 1 1 0 2 1 1 0 0 1 0-2z"/>
 &lt;/symbol>
 &lt;symbol id="danger-fill" fill="currentColor" viewBox="0 0 16 16">
 &lt;path d="M8.982 1.566a1.13 1.13 0 0 0-1.96 0L.165 13.233c-.457.778.091 1.767.98 1.767h13.713c.889 0 1.438-.99.98-1.767L8.982 1.566zM8 5c.535 0 .954.462.9.995l-.35 3.507a.552.552 0 0 1-1.1 0L7.1 5.995A.905.905 0 0 1 8 5zm.002 6a1 1 0 1 1 0 2 1 1 0 0 1 0-2z"/>
 &lt;/symbol>
&lt;/svg>

&lt;div class="alert alert-primary alert-info d-flex align-items-center" role="alert">
 &lt;svg class="bi flex-shrink-0 me-2" width="24" height="24" role="img" aria-label="Extra Infos:">&lt;use xlink:href="#info-fill"/>&lt;/svg>
 &lt;div>
 &lt;b>Extra Infos:&amp;nbsp;&lt;/b>
 CUDA is a parallel computing platform and programming model created by NVIDIA. For further information, see &lt;a href="https://blogs.nvidia.com/blog/2012/09/10/what-is-cuda-2/" target="_blank" rel="noopener">NVIDIA website&lt;/a>.
 &lt;/div>
&lt;/div>
&lt;div class="container">
 
 
 &lt;div class="row row-cols-1 row-cols-sm-2 row-cols-md-5">
 &lt;div class="col mt-5">
 &lt;p class="page-image">
 &lt;a data-modal="bs-lightbox" href="https://mevislab.github.io/examples/pull/116/images/tutorials/visualization/pathtracer/PathTracer1.png" title="PathTracer1">&lt;img src="https://mevislab.github.io/examples/pull/116/images/tutorials/visualization/pathtracer/PathTracer1.png" class="img-fluid" alt="PathTracer1">&lt;/a>
 &lt;figcaption class="figure-caption">PathTracer1&lt;/figcaption>
 &lt;/p></description></item><item><title>Example 6.1: Volume Rendering vs. Path Tracer</title><link>https://mevislab.github.io/examples/pull/116/tutorials/visualization/pathtracer/pathtracerexample1/</link><pubDate>Thu, 23 Feb 2023 00:00:00 +0000</pubDate><guid>https://mevislab.github.io/examples/pull/116/tutorials/visualization/pathtracer/pathtracerexample1/</guid><description>&lt;h1 id="example-61-volume-rendering-vs-path-tracer">Example 6.1: Volume Rendering vs. Path Tracer&lt;/h1>
&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;p>In this example you develop a network to show some differences between volume rendering and the MeVisLab Path Tracer. You will visualize the same scene using both 3D rendering techniques and some of the modules for path tracing.&lt;/p>

&lt;svg xmlns="http://www.w3.org/2000/svg" style="display: none;">
 &lt;symbol id="check-fill" fill="currentColor" viewBox="0 0 16 16">
 &lt;path d="M16 8A8 8 0 1 1 0 8a8 8 0 0 1 16 0zm-3.97-3.03a.75.75 0 0 0-1.08.022L7.477 9.417 5.384 7.323a.75.75 0 0 0-1.06 1.06L6.97 11.03a.75.75 0 0 0 1.079-.02l3.992-4.99a.75.75 0 0 0-.01-1.05z"/>
 &lt;/symbol>
 &lt;symbol id="info-fill" fill="currentColor" viewBox="0 0 16 16">
 &lt;path d="M8 16A8 8 0 1 0 8 0a8 8 0 0 0 0 16zm.93-9.412-1 4.705c-.07.34.029.533.304.533.194 0 .487-.07.686-.246l-.088.416c-.287.346-.92.598-1.465.598-.703 0-1.002-.422-.808-1.319l.738-3.468c.064-.293.006-.399-.287-.47l-.451-.081.082-.381 2.29-.287zM8 5.5a1 1 0 1 1 0-2 1 1 0 0 1 0 2z"/>
 &lt;/symbol>
 &lt;symbol id="warning-fill" fill="currentColor" viewBox="0 0 16 16">
 &lt;path d="M8.982 1.566a1.13 1.13 0 0 0-1.96 0L.165 13.233c-.457.778.091 1.767.98 1.767h13.713c.889 0 1.438-.99.98-1.767L8.982 1.566zM8 5c.535 0 .954.462.9.995l-.35 3.507a.552.552 0 0 1-1.1 0L7.1 5.995A.905.905 0 0 1 8 5zm.002 6a1 1 0 1 1 0 2 1 1 0 0 1 0-2z"/>
 &lt;/symbol>
 &lt;symbol id="danger-fill" fill="currentColor" viewBox="0 0 16 16">
 &lt;path d="M8.982 1.566a1.13 1.13 0 0 0-1.96 0L.165 13.233c-.457.778.091 1.767.98 1.767h13.713c.889 0 1.438-.99.98-1.767L8.982 1.566zM8 5c.535 0 .954.462.9.995l-.35 3.507a.552.552 0 0 1-1.1 0L7.1 5.995A.905.905 0 0 1 8 5zm.002 6a1 1 0 1 1 0 2 1 1 0 0 1 0-2z"/>
 &lt;/symbol>
&lt;/svg>

&lt;div class="alert alert-primary alert-warning d-flex align-items-center" role="alert">
 &lt;svg class="bi flex-shrink-0 me-2" width="24" height="24" role="img" aria-label="Attention:">&lt;use xlink:href="#warning-fill"/>&lt;/svg>
 &lt;div>
 &lt;b>Attention:&amp;nbsp;&lt;/b>
 &lt;p>The MeVis Path Tracer requires an NVIDIA graphics card with CUDA support. In order to check your hardware, open MeVisLab and add a &lt;code>SoPathTracer&lt;/code> module to your workspace. You will see a message if your hardware does not support CUDA:&lt;/p></description></item><item><title>Example 6.2: Visualization using Path Tracer</title><link>https://mevislab.github.io/examples/pull/116/tutorials/visualization/pathtracer/pathtracerexample2/</link><pubDate>Tue, 02 Jan 2024 00:00:00 +0000</pubDate><guid>https://mevislab.github.io/examples/pull/116/tutorials/visualization/pathtracer/pathtracerexample2/</guid><description>&lt;h1 id="example-62-visualization-using-sopathtracer">Example 6.2: Visualization using SoPathTracer&lt;/h1>
&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;p>In this tutorial, we will explain the basics of using the &lt;code>SoPathTracer&lt;/code> module in MeVisLab. You will learn how to create a scene, assign materials, add light sources, and configure the PathTracer to generate enhanced renderings.&lt;/p>

&lt;svg xmlns="http://www.w3.org/2000/svg" style="display: none;">
 &lt;symbol id="check-fill" fill="currentColor" viewBox="0 0 16 16">
 &lt;path d="M16 8A8 8 0 1 1 0 8a8 8 0 0 1 16 0zm-3.97-3.03a.75.75 0 0 0-1.08.022L7.477 9.417 5.384 7.323a.75.75 0 0 0-1.06 1.06L6.97 11.03a.75.75 0 0 0 1.079-.02l3.992-4.99a.75.75 0 0 0-.01-1.05z"/>
 &lt;/symbol>
 &lt;symbol id="info-fill" fill="currentColor" viewBox="0 0 16 16">
 &lt;path d="M8 16A8 8 0 1 0 8 0a8 8 0 0 0 0 16zm.93-9.412-1 4.705c-.07.34.029.533.304.533.194 0 .487-.07.686-.246l-.088.416c-.287.346-.92.598-1.465.598-.703 0-1.002-.422-.808-1.319l.738-3.468c.064-.293.006-.399-.287-.47l-.451-.081.082-.381 2.29-.287zM8 5.5a1 1 0 1 1 0-2 1 1 0 0 1 0 2z"/>
 &lt;/symbol>
 &lt;symbol id="warning-fill" fill="currentColor" viewBox="0 0 16 16">
 &lt;path d="M8.982 1.566a1.13 1.13 0 0 0-1.96 0L.165 13.233c-.457.778.091 1.767.98 1.767h13.713c.889 0 1.438-.99.98-1.767L8.982 1.566zM8 5c.535 0 .954.462.9.995l-.35 3.507a.552.552 0 0 1-1.1 0L7.1 5.995A.905.905 0 0 1 8 5zm.002 6a1 1 0 1 1 0 2 1 1 0 0 1 0-2z"/>
 &lt;/symbol>
 &lt;symbol id="danger-fill" fill="currentColor" viewBox="0 0 16 16">
 &lt;path d="M8.982 1.566a1.13 1.13 0 0 0-1.96 0L.165 13.233c-.457.778.091 1.767.98 1.767h13.713c.889 0 1.438-.99.98-1.767L8.982 1.566zM8 5c.535 0 .954.462.9.995l-.35 3.507a.552.552 0 0 1-1.1 0L7.1 5.995A.905.905 0 0 1 8 5zm.002 6a1 1 0 1 1 0 2 1 1 0 0 1 0-2z"/>
 &lt;/symbol>
&lt;/svg>

&lt;div class="alert alert-primary alert-warning d-flex align-items-center" role="alert">
 &lt;svg class="bi flex-shrink-0 me-2" width="24" height="24" role="img" aria-label="Attention:">&lt;use xlink:href="#warning-fill"/>&lt;/svg>
 &lt;div>
 &lt;b>Attention:&amp;nbsp;&lt;/b>
 &lt;p>The MeVis Path Tracer requires an NVIDIA graphics card with CUDA support. In order to check your hardware, open MeVisLab and add a &lt;code>SoPathTracer&lt;/code> module to your workspace. You will see a message if your hardware does not support CUDA:&lt;/p></description></item><item><title>Example 7: Add 3D viewer to OrthoView2D</title><link>https://mevislab.github.io/examples/pull/116/tutorials/visualization/visualizationexample7/</link><pubDate>Tue, 21 Nov 2023 00:00:00 +0000</pubDate><guid>https://mevislab.github.io/examples/pull/116/tutorials/visualization/visualizationexample7/</guid><description>&lt;h1 id="TutorialVisualizationExample7">Example 7: Add 3D viewer to OrthoView2D&lt;/h1>
&lt;div class="alert alert-secondary d-flex align-items-center" role="alert">
 &lt;div>
 &lt;img width="100px" src="https://mevislab.github.io/examples/pull/116/images/youtube.svg" />&amp;nbsp;&amp;nbsp;&lt;a href="https://www.youtube.com/watch?v=vRtFcaPBAko" target="_blank">&lt;img width="100px" src="https://img.youtube.com/vi/vRtFcaPBAko/0.jpg" />&lt;/a>&amp;nbsp;&amp;nbsp;&amp;nbsp;This example is also available on &lt;a href="https://www.youtube.com/watch?v=vRtFcaPBAko" target="_blank">YouTube&lt;/a>.
 &lt;/div>
&lt;/div>
&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;p>In this example we will use the &lt;code>OrthoView2D&lt;/code> module and add a 3D viewer to the layout &lt;em>Cube&lt;/em>.&lt;/p>
&lt;h2 id="steps-to-do">Steps to do&lt;/h2>
&lt;h3 id="develop-your-network">Develop your network&lt;/h3>
&lt;p>Add the modules &lt;code>LocalImage&lt;/code> and &lt;code>OrthoView2D&lt;/code> to your workspace and connect them.&lt;/p>
&lt;p>&lt;p class="page-image">
 &lt;a data-modal="bs-lightbox" href="https://mevislab.github.io/examples/pull/116/images/tutorials/image_processing/network_example7.png" title="Network">&lt;img id="Network" class="img-fluid rounded" src="https://mevislab.github.io/examples/pull/116/images/tutorials/image_processing/network_example7.png" alt="Network" title="Network" />&lt;/a>
 &lt;figcaption class="figure-caption">Network&lt;/figcaption>
&lt;/p>
&lt;/p>
&lt;p>The &lt;code>OrthoView2D&lt;/code> module allows you to select multiple layouts. Select layout &lt;em>Cube Equal&lt;/em>. The layout shows your image in three orthogonal viewing directions. The top left segment remains empty.&lt;/p></description></item><item><title>Example 8: Vessel Segmentation using SoVascularSystem</title><link>https://mevislab.github.io/examples/pull/116/tutorials/visualization/visualizationexample8/</link><pubDate>Fri, 08 Dec 2023 00:00:00 +0000</pubDate><guid>https://mevislab.github.io/examples/pull/116/tutorials/visualization/visualizationexample8/</guid><description>&lt;h1 id="TutorialVisualizationExample8">Example 8: Vessel Segmentation using SoVascularSystem&lt;/h1>
&lt;div class="alert alert-secondary d-flex align-items-center" role="alert">
 &lt;div>
 &lt;img width="100px" src="https://mevislab.github.io/examples/pull/116/images/youtube.svg" />&amp;nbsp;&amp;nbsp;&lt;a href="https://www.youtube.com/watch?v=tEwEgI_3ZGM" target="_blank">&lt;img width="100px" src="https://img.youtube.com/vi/tEwEgI_3ZGM/0.jpg" />&lt;/a>&amp;nbsp;&amp;nbsp;&amp;nbsp;This example is also available on &lt;a href="https://www.youtube.com/watch?v=tEwEgI_3ZGM" target="_blank">YouTube&lt;/a>.
 &lt;/div>
&lt;/div>
&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;p>In this tutorial, we are using an input mask to create a vessel centerline using the &lt;code>DtfSkeletonization&lt;/code> module and visualize the vascular structures in 3D using the &lt;code>SoVascularSystem&lt;/code> module. The second part uses the distance between centerline and surface of the vessel structures to color thin vessels red and thick vessels green.&lt;/p>
&lt;h2 id="steps-to-do">Steps to do&lt;/h2>
&lt;h3 id="develop-your-network">Develop your network&lt;/h3>
&lt;p>Load the example &lt;a href="https://mevislab.github.io/examples/pull/116/examples/visualization/example8/EditedImage.mlimage">tree mask&lt;/a> by using the &lt;code>LocalImage&lt;/code> module. Connect the output to a &lt;code>DtfSkeletonization&lt;/code> module as seen below. The initial output of the &lt;code>DtfSkeletonization&lt;/code> module is empty. Press the &lt;em>Update&lt;/em> button to calculate the skeleton and the erosion distances.&lt;/p></description></item><item><title>Example 9: Creating Dynamic 3D Animations using AnimationRecorder</title><link>https://mevislab.github.io/examples/pull/116/tutorials/visualization/visualizationexample9/</link><pubDate>Mon, 08 Jan 2024 00:00:00 +0000</pubDate><guid>https://mevislab.github.io/examples/pull/116/tutorials/visualization/visualizationexample9/</guid><description>&lt;h1 id="TutorialVisualizationExample9">Example 9: Creating Dynamic 3D Animations using AnimationRecorder&lt;/h1>
&lt;div class="alert alert-secondary d-flex align-items-center" role="alert">
 &lt;div>
 &lt;img width="100px" src="https://mevislab.github.io/examples/pull/116/images/youtube.svg" />&amp;nbsp;&amp;nbsp;&lt;a href="https://www.youtube.com/watch?v=Sxfwwm6BGnA" target="_blank">&lt;img width="100px" src="https://img.youtube.com/vi/Sxfwwm6BGnA/0.jpg" />&lt;/a>&amp;nbsp;&amp;nbsp;&amp;nbsp;This example is also available on &lt;a href="https://www.youtube.com/watch?v=Sxfwwm6BGnA" target="_blank">YouTube&lt;/a>.
 &lt;/div>
&lt;/div>
&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;p>In this tutorial, we are using the &lt;code>AnimationRecorder&lt;/code> module to generate dynamic and visually appealing animations of our 3D scenes. We will be recording a video of the results of our previous project, particularly the detailed visualizations of the muscles, bones and blood vessels created using &lt;code>PathTracer&lt;/code>.&lt;/p>
&lt;h2 id="steps-to-do">Steps to do&lt;/h2>
&lt;p>Open the network and files of &lt;a href="https://mevislab.github.io/examples/pull/116/tutorials/visualization/pathtracer/pathtracerexample2/">Example 6.2&lt;/a>, add a &lt;code>SoSeparator&lt;/code> module and an &lt;code>AnimationRecorder&lt;/code> module to your workspace and connect them as shown below.&lt;/p></description></item><item><title>Chapter IV: Image Processing</title><link>https://mevislab.github.io/examples/pull/116/tutorials/image_processing/</link><pubDate>Wed, 15 Jun 2022 08:56:33 +0200</pubDate><guid>https://mevislab.github.io/examples/pull/116/tutorials/image_processing/</guid><description>&lt;h1 id="TutorialImageProcessing">Image Processing in MeVisLab&lt;/h1>
&lt;p>Digital image processing is the use of a digital computer to process digital images through an algorithm (see &lt;a href="https://en.wikipedia.org/wiki/Digital_image_processing" target="_blank" rel="noopener">Wikipedia&lt;/a>).&lt;/p>
&lt;p>MeVisLab provides multiple modules for image processing tasks, such as:&lt;/p>
&lt;ul>
&lt;li>Filters&lt;/li>
&lt;li>Masks&lt;/li>
&lt;li>Transformations&lt;/li>
&lt;li>Arithmetics&lt;/li>
&lt;li>Statistics&lt;/li>
&lt;/ul>
&lt;p>For details about Image Processing in MeVisLab, see the 
&lt;a href="https://mevislabdownloads.mevis.de/docs/current/MeVisLab/Resources/Documentation/Publish/SDK/GettingStarted/ch06.html#FOImageProcessing" target="_blank">MeVisLab Documentation&lt;/a>

&lt;/p>
&lt;p>In this chapter, you will find some examples for different types of image processing in MeVisLab.&lt;/p></description></item><item><title>Example 1: Arithmetic operations on two images</title><link>https://mevislab.github.io/examples/pull/116/tutorials/image_processing/image_processing1/</link><pubDate>Wed, 15 Jun 2022 08:56:33 +0200</pubDate><guid>https://mevislab.github.io/examples/pull/116/tutorials/image_processing/image_processing1/</guid><description>&lt;h1 id="example-1-arithmetic-operations-on-two-images">Example 1: Arithmetic operations on two images&lt;/h1>
&lt;div class="alert alert-secondary d-flex align-items-center" role="alert">
 &lt;div>
 &lt;img width="100px" src="https://mevislab.github.io/examples/pull/116/images/youtube.svg" />&amp;nbsp;&amp;nbsp;&lt;a href="https://www.youtube.com/watch?v=ToTQ3XRPmlk" target="_blank">&lt;img width="100px" src="https://img.youtube.com/vi/ToTQ3XRPmlk/0.jpg" />&lt;/a>&amp;nbsp;&amp;nbsp;&amp;nbsp;This example is also available on &lt;a href="https://www.youtube.com/watch?v=ToTQ3XRPmlk" target="_blank">YouTube&lt;/a>.
 &lt;/div>
&lt;/div>
&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;p>We are using the &lt;code>Arithmetic2&lt;/code> module to apply basic scalar functions on two images. The module provides 2 inputs for images and 1 output image for the result.&lt;/p>
&lt;h2 id="steps-to-do">Steps to do&lt;/h2>
&lt;h3 id="develop-your-network">Develop your network&lt;/h3>
&lt;p>Add two &lt;code>LocalImage&lt;/code> modules to your workspace for the input images. Select &lt;em>$(DemoDataPath)/BrainMultiModal/ProbandT1.dcm&lt;/em> and &lt;em>$(DemoDataPath)/BrainMultiModal/ProbandT2.dcm&lt;/em> from MeVisLab demo data and add a &lt;code>SynchroView2D&lt;/code> to your network.&lt;/p></description></item><item><title>Example 2: Masking images</title><link>https://mevislab.github.io/examples/pull/116/tutorials/image_processing/image_processing2/</link><pubDate>Wed, 15 Jun 2022 08:56:33 +0200</pubDate><guid>https://mevislab.github.io/examples/pull/116/tutorials/image_processing/image_processing2/</guid><description>&lt;h1 id="example-2-masking-images">Example 2: Masking images&lt;/h1>
&lt;div class="alert alert-secondary d-flex align-items-center" role="alert">
 &lt;div>
 &lt;img width="100px" src="https://mevislab.github.io/examples/pull/116/images/youtube.svg" />&amp;nbsp;&amp;nbsp;&lt;a href="https://www.youtube.com/watch?v=k003ytr8ZQA" target="_blank">&lt;img width="100px" src="https://img.youtube.com/vi/k003ytr8ZQA/0.jpg" />&lt;/a>&amp;nbsp;&amp;nbsp;&amp;nbsp;This example is also available on &lt;a href="https://www.youtube.com/watch?v=k003ytr8ZQA" target="_blank">YouTube&lt;/a>.
 &lt;/div>
&lt;/div>
&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;p>The background of medical images is black for most cases. In case an image is inverted or window/level values are adapted, these black pixels outside clinical relevant pixels might become very bright or even white.&lt;/p>
&lt;p>Being in a dark room using a large screen, the user might be blended by these large white regions.&lt;/p>
&lt;p>Image masking is a very good way to select a defined region where image processing shall be applied. A mask allows to define a region (the masked region) to allow image modifications whereas pixels outside the mask remain unchanged.&lt;/p></description></item><item><title>Example 3: Region Growing</title><link>https://mevislab.github.io/examples/pull/116/tutorials/image_processing/image_processing3/</link><pubDate>Wed, 15 Jun 2022 08:56:33 +0200</pubDate><guid>https://mevislab.github.io/examples/pull/116/tutorials/image_processing/image_processing3/</guid><description>&lt;h1 id="example-3-region-growing">Example 3: Region Growing&lt;/h1>
&lt;div class="alert alert-secondary d-flex align-items-center" role="alert">
 &lt;div>
 &lt;img width="100px" src="https://mevislab.github.io/examples/pull/116/images/youtube.svg" />&amp;nbsp;&amp;nbsp;&lt;a href="https://www.youtube.com/watch?v=nQV2o_3BcJI" target="_blank">&lt;img width="100px" src="https://img.youtube.com/vi/nQV2o_3BcJI/0.jpg" />&lt;/a>&amp;nbsp;&amp;nbsp;&amp;nbsp;This example is also available on &lt;a href="https://www.youtube.com/watch?v=nQV2o_3BcJI" target="_blank">YouTube&lt;/a>.
 &lt;/div>
&lt;/div>
&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;p>A very simple approach to segment parts of an image is the region growing method. A general explanation can be found &lt;a href="%22https://en.wikipedia.org/wiki/Region_growing%22">here&lt;/a>.&lt;/p>
&lt;p>In this example, you will segment the brain of an image and show the segmentation results as an overlay on the original image.&lt;/p>
&lt;h2 id="steps-to-do">Steps to do&lt;/h2>
&lt;h3 id="develop-your-network">Develop your network&lt;/h3>
&lt;p>Add a &lt;code>LocalImage&lt;/code> module to your workspace and select load &lt;em>$(DemoDataPath)/BrainMultiModal/ProbandT1.dcm&lt;/em>. Add a &lt;code>View2D&lt;/code> module and connect both as seen below.&lt;/p></description></item><item><title>Example 4: Subtract 3D objects</title><link>https://mevislab.github.io/examples/pull/116/tutorials/image_processing/image_processing4/</link><pubDate>Wed, 15 Jun 2022 08:56:33 +0200</pubDate><guid>https://mevislab.github.io/examples/pull/116/tutorials/image_processing/image_processing4/</guid><description>&lt;h1 id="example-4-subtract-3d-objects">Example 4: Subtract 3D objects&lt;/h1>
&lt;div class="alert alert-secondary d-flex align-items-center" role="alert">
 &lt;div>
 &lt;img width="100px" src="https://mevislab.github.io/examples/pull/116/images/youtube.svg" />&amp;nbsp;&amp;nbsp;&lt;a href="https://www.youtube.com/watch?v=VdvErVvoq2k" target="_blank">&lt;img width="100px" src="https://img.youtube.com/vi/VdvErVvoq2k/0.jpg" />&lt;/a>&amp;nbsp;&amp;nbsp;&amp;nbsp;This example is also available on &lt;a href="https://www.youtube.com/watch?v=VdvErVvoq2k" target="_blank">YouTube&lt;/a>.
 &lt;/div>
&lt;/div>
&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;p>In this example, we load an image and render it as &lt;code>WEMIsoSurface&lt;/code>. Then we create a 3-dimensional &lt;code>SoSphere&lt;/code> and subtract the sphere from the initial WEM.&lt;/p>
&lt;h2 id="steps-to-do">Steps to do&lt;/h2>
&lt;h3 id="develop-your-network">Develop your network&lt;/h3>
&lt;p>Add a &lt;code>LocalImage&lt;/code> module to your workspace and select load &lt;em>$(DemoDataPath)/BrainMultiModal/ProbandT1.dcm&lt;/em>. Add a &lt;code>WEMIsoSurface&lt;/code>, a &lt;code>SoWEMRenderer&lt;/code>, a &lt;code>SoBackground&lt;/code> and a &lt;code>SoExaminerViewer&lt;/code> module and connect them as seen below. Make sure to configure the &lt;code>WEMIsoSurface&lt;/code> to use a &lt;em>Iso Min. Value&lt;/em> of 420 and a &lt;em>Voxel Sampling&lt;/em> 1.&lt;/p></description></item><item><title>Example 5: Clip Planes</title><link>https://mevislab.github.io/examples/pull/116/tutorials/image_processing/image_processing5/</link><pubDate>Wed, 15 Jun 2022 08:56:33 +0200</pubDate><guid>https://mevislab.github.io/examples/pull/116/tutorials/image_processing/image_processing5/</guid><description>&lt;h1 id="example-5-clip-planes">Example 5: Clip Planes&lt;/h1>
&lt;div class="alert alert-secondary d-flex align-items-center" role="alert">
 &lt;div>
 &lt;img width="100px" src="https://mevislab.github.io/examples/pull/116/images/youtube.svg" />&amp;nbsp;&amp;nbsp;&lt;a href="https://www.youtube.com/watch?v=Lmt7helBl0E" target="_blank">&lt;img width="100px" src="https://img.youtube.com/vi/Lmt7helBl0E/0.jpg" />&lt;/a>&amp;nbsp;&amp;nbsp;&amp;nbsp;This example is also available on &lt;a href="https://www.youtube.com/watch?v=Lmt7helBl0E" target="_blank">YouTube&lt;/a>.
 &lt;/div>
&lt;/div>
&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;p>In this example, we are using the &lt;code>SoGVRDrawOnPlane&lt;/code> module to define the currently visible slice from a 2D view as a clip plane in 3D.&lt;/p>
&lt;h2 id="steps-to-do">Steps to do&lt;/h2>
&lt;h3 id="develop-your-network">Develop your network&lt;/h3>
&lt;p>First we need to develop the network to scroll through the slices. Add a &lt;code>LocalImage&lt;/code> module to your workspace and select the file &lt;em>ProbandT1&lt;/em> from MeVisLab demo data.&lt;/p></description></item><item><title>Example 6: DICOM RT Visualization in MeVisLab – RTSTRUCT and RTDOSE Workflow</title><link>https://mevislab.github.io/examples/pull/116/tutorials/image_processing/image_processing6/</link><pubDate>Mon, 05 May 2025 00:00:00 +0000</pubDate><guid>https://mevislab.github.io/examples/pull/116/tutorials/image_processing/image_processing6/</guid><description>&lt;h1 id="example-6-dicom-rt-visualization-in-mevislab--rtstruct-and-rtdose-workflow">Example 6: DICOM RT Visualization in MeVisLab – RTSTRUCT and RTDOSE Workflow&lt;/h1>
&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;p>This tutorial explains how to load and visualize DICOM RT (Radiotherapy) data in MeVisLab. You will learn how to:&lt;/p>
&lt;ul>
&lt;li>Load CT and related RTSTRUCT data.&lt;/li>
&lt;li>Visualize RTSTRUCTs as colored CSOs.&lt;/li>
&lt;li>Show labels next to each RTSTRUCT contour.&lt;/li>
&lt;li>Visualize RTDOSE as a semi-transparent colored overlay.&lt;/li>
&lt;/ul>
&lt;p>&lt;em>DICOM RT&lt;/em> files are essential in radiotherapy treatment planning.&lt;/p>
&lt;p>They include:&lt;/p>
&lt;ul>
&lt;li>&lt;strong>RT Structure Set&lt;/strong>, containing information related to patient anatomy, for example structures, markers, and isocenters. These entities are typically identified on devices such as CT scanners, physical or virtual simulation workstations, or treatment planning systems.&lt;/li>
&lt;li>&lt;strong>RT Plan&lt;/strong>, containing geometric and dosimetric data specifying a course of external beam and/or brachytherapy treatment, for example beam angles, collimator openings, beam modifiers, and brachytherapy channel and source specifications. The RT Plan entity may be created by a simulation workstation, and subsequently enriched by a treatment planning system before being passed on to a record and verify system or treatment device. An instance of the RT Plan object usually references an RT Structure Set instance to define a coordinate system and set of patient structures.&lt;/li>
&lt;li>&lt;strong>RT Dose&lt;/strong>, containing dose data generated by a treatment planning system in one or more of several formats: three-dimensional dose data, isodose curves, DVHs, or dose points.&lt;/li>
&lt;/ul>
&lt;p>Additional objects not used in this tutorial are:&lt;/p></description></item><item><title>Chapter V: Data Objects</title><link>https://mevislab.github.io/examples/pull/116/tutorials/dataobjects/</link><pubDate>Wed, 15 Jun 2022 08:56:33 +0200</pubDate><guid>https://mevislab.github.io/examples/pull/116/tutorials/dataobjects/</guid><description>&lt;h2 id="TutorialDataObjects">Data Objects in MeVisLab&lt;/h2>
&lt;p>MeVisLab provides pre-defined data objects, e. g.&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://mevislab.github.io/examples/pull/116/tutorials/dataobjects/contourobjects">Contour Segmented Objects (CSOs)&lt;/a> &lt;br>
which are three-dimensional objects encapsulating formerly defined contours within images.&lt;/li>
&lt;li>&lt;a href="https://mevislab.github.io/examples/pull/116/tutorials/dataobjects/surfaceobjects">Surface Objects (Winged Edge Meshes or WEMs)&lt;/a> &lt;br>
represent the surface of geometrical figures and allow the user to manipulate them.&lt;/li>
&lt;li>&lt;a href="https://mevislab.github.io/examples/pull/116/tutorials/dataobjects/markerobjects">Markers&lt;/a> &lt;br>
are used to mark specific locations or aspects of an image and allow to process those later on.&lt;/li>
&lt;li>&lt;a href="tutorials/dataobjects/curves">Curves&lt;/a> &lt;br>
can print the results of a function as two-dimensional mathematical graphs into a diagram.&lt;/li>
&lt;/ul>
&lt;p>Usage, advantages and disadvantages of each above mentioned data object type will be covered in the following specified chapters, where you will be building example networks for some of the most common use cases.&lt;/p></description></item><item><title>Contour Objects (CSO)</title><link>https://mevislab.github.io/examples/pull/116/tutorials/dataobjects/contourobjects/</link><pubDate>Wed, 15 Jun 2022 08:56:33 +0200</pubDate><guid>https://mevislab.github.io/examples/pull/116/tutorials/dataobjects/contourobjects/</guid><description>&lt;h1 id="CSO">Contour Segmented Objects (CSOs) in MeVisLab&lt;/h1>
&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;h3 id="structure-of-csos">Structure of CSOs&lt;/h3>
&lt;p>MeVisLab provides modules to create contours in images. 3D objects which encapsulate these contours are called Contour Segmented Objects (CSOs).&lt;/p>
&lt;p>In the next image, you can see a rectangular shaped CSO. The pink circles you can see are called &lt;em>Seed Points&lt;/em>.&lt;/p>
&lt;p>&lt;em>Seed Points&lt;/em> define the shape of the CSO. In case of a rectangle, you need four &lt;em>Seed Points&lt;/em> forming the corners, to define the whole rectangle.&lt;/p></description></item><item><title>Contour Example 1: Creation of Contours</title><link>https://mevislab.github.io/examples/pull/116/tutorials/dataobjects/contours/contourexample1/</link><pubDate>Wed, 15 Jun 2022 08:56:33 +0200</pubDate><guid>https://mevislab.github.io/examples/pull/116/tutorials/dataobjects/contours/contourexample1/</guid><description>&lt;h1 id="TutorialContoursExample1">Contour Example 1: Creation of Contours&lt;/h1>
&lt;div class="alert alert-secondary d-flex align-items-center" role="alert">
 &lt;div>
 &lt;img width="100px" src="https://mevislab.github.io/examples/pull/116/images/youtube.svg" />&amp;nbsp;&amp;nbsp;&lt;a href="https://www.youtube.com/watch?v=ygYJMmQ95v8" target="_blank">&lt;img width="100px" src="https://img.youtube.com/vi/ygYJMmQ95v8/0.jpg" />&lt;/a>&amp;nbsp;&amp;nbsp;&amp;nbsp;This example is also available on &lt;a href="https://www.youtube.com/watch?v=ygYJMmQ95v8" target="_blank">YouTube&lt;/a>.
 &lt;/div>
&lt;/div>
&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;p>We like to start with the creation of CSOs. To create CSOs, you need a &lt;code>SoCSO*&lt;/code>-Editor. There are several different editors, which can be used to create CSOs (see &lt;a href="tutorials/dataobjects/contourobjects#CSOEditors">here&lt;/a>). Some of them are introduced in this example.&lt;/p>
&lt;h2 id="steps-to-do">Steps to do&lt;/h2>
&lt;h3 id="develop-your-network">Develop your network&lt;/h3>
&lt;p>For this example, we need the following modules. Add the modules to your workspace, connect them as shown below and load the example image &lt;em>$(DemoDataPath)/BrainMultiModal/ProbandT1.tif&lt;/em>.&lt;/p></description></item><item><title>Contour Example 2: Contour Interpolation</title><link>https://mevislab.github.io/examples/pull/116/tutorials/dataobjects/contours/contourexample2/</link><pubDate>Wed, 15 Jun 2022 08:56:33 +0200</pubDate><guid>https://mevislab.github.io/examples/pull/116/tutorials/dataobjects/contours/contourexample2/</guid><description>&lt;h1 id="TutorialContoursExample2">Contour Example 2: Creating Contours using Live Wire and Interpolation&lt;/h1>
&lt;div class="alert alert-secondary d-flex align-items-center" role="alert">
 &lt;div>
 &lt;img width="100px" src="https://mevislab.github.io/examples/pull/116/images/youtube.svg" />&amp;nbsp;&amp;nbsp;&lt;a href="https://www.youtube.com/watch?v=l2ih_maKfSw" target="_blank">&lt;img width="100px" src="https://img.youtube.com/vi/l2ih_maKfSw/0.jpg" />&lt;/a>&amp;nbsp;&amp;nbsp;&amp;nbsp;This example is also available on &lt;a href="https://www.youtube.com/watch?v=l2ih_maKfSw" target="_blank">YouTube&lt;/a>.
 &lt;/div>
&lt;/div>
&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;p>In this example, we like to create CSOs using the &lt;strong>Live Wire
Algorithm&lt;/strong>, which allows semi-automatic CSO creation. The algorithm
uses edge detection to support the user creating CSOs.&lt;/p>
&lt;p>We also like to interpolate CSOs over slices. That means additional CSOs are
generated between manual segmentations based on a linear interpolation.&lt;/p></description></item><item><title>Contour Example 3: 2D and 3D Visualization of Contours</title><link>https://mevislab.github.io/examples/pull/116/tutorials/dataobjects/contours/contourexample3/</link><pubDate>Wed, 15 Jun 2022 08:56:33 +0200</pubDate><guid>https://mevislab.github.io/examples/pull/116/tutorials/dataobjects/contours/contourexample3/</guid><description>&lt;h1 id="TutorialContoursExample3">Contour Example 3: Overlay Creation and 3D Visualization of Contours&lt;/h1>
&lt;div class="alert alert-secondary d-flex align-items-center" role="alert">
 &lt;div>
 &lt;img width="100px" src="https://mevislab.github.io/examples/pull/116/images/youtube.svg" />&amp;nbsp;&amp;nbsp;&lt;a href="https://www.youtube.com/watch?v=6NmKQagTDKg" target="_blank">&lt;img width="100px" src="https://img.youtube.com/vi/6NmKQagTDKg/0.jpg" />&lt;/a>&amp;nbsp;&amp;nbsp;&amp;nbsp;This example is also available on &lt;a href="https://www.youtube.com/watch?v=6NmKQagTDKg" target="_blank">YouTube&lt;/a>.
 &lt;/div>
&lt;/div>
&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;p>In this example, we&amp;rsquo;d like to use the created CSOs to display an overlay.
This allows us to mark one of two lungs. In addition to
that, we will display the whole segmented lobe of the lung in a 3D
image.&lt;/p>
&lt;h2 id="steps-to-do">Steps to do&lt;/h2>
&lt;h3 id="develop-your-network">Develop your network&lt;/h3>
&lt;p>Use the network from the &lt;a href="https://mevislab.github.io/examples/pull/116/tutorials/dataobjects/contours/contourexample2">contour example 2&lt;/a> and add the modules &lt;code>VoxelizeCSO&lt;/code>,
&lt;code>SoView2DOverlay&lt;/code> and &lt;code>View2D&lt;/code> to your workspace. Connect the module as
shown. The module &lt;code>VoxelizeCSO&lt;/code> allows to convert CSOs into voxel images.&lt;/p></description></item><item><title>Contour Example 4: Annotation of Images</title><link>https://mevislab.github.io/examples/pull/116/tutorials/dataobjects/contours/contourexample4/</link><pubDate>Wed, 15 Jun 2022 08:56:33 +0200</pubDate><guid>https://mevislab.github.io/examples/pull/116/tutorials/dataobjects/contours/contourexample4/</guid><description>&lt;h1 id="TutorialContoursExample4">Contour Example 4: Annotation of Images&lt;/h1>
&lt;div class="alert alert-secondary d-flex align-items-center" role="alert">
 &lt;div>
 &lt;img width="100px" src="https://mevislab.github.io/examples/pull/116/images/youtube.svg" />&amp;nbsp;&amp;nbsp;&lt;a href="https://www.youtube.com/watch?v=bT2ZprYcuOU" target="_blank">&lt;img width="100px" src="https://img.youtube.com/vi/bT2ZprYcuOU/0.jpg" />&lt;/a>&amp;nbsp;&amp;nbsp;&amp;nbsp;This example is also available on &lt;a href="https://www.youtube.com/watch?v=bT2ZprYcuOU" target="_blank">YouTube&lt;/a>.
 &lt;/div>
&lt;/div>
&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;p>In this example we like to calculate the volume of our object, in this
case the part of the lung we have segmented.&lt;/p>
&lt;h2 id="steps-to-do">Steps to do&lt;/h2>
&lt;h3 id="develop-your-network-and-calculate-the-lung-volume">Develop your network and calculate the lung volume&lt;/h3>
&lt;p>Add the module &lt;code>CalculateVolume&lt;/code> and &lt;code>SoView2DAnnotation&lt;/code> to your workspace
and connect both modules as shown. Update the module &lt;code>CalculateVolume&lt;/code>,
which directly shows the volume of our object.&lt;/p></description></item><item><title>Contour Example 5: Contours and Ghosting</title><link>https://mevislab.github.io/examples/pull/116/tutorials/dataobjects/contours/contourexample5/</link><pubDate>Wed, 15 Jun 2022 08:56:33 +0200</pubDate><guid>https://mevislab.github.io/examples/pull/116/tutorials/dataobjects/contours/contourexample5/</guid><description>&lt;h1 id="TutorialContoursExample5">Contour Example 5: Visualizing Contours and Images&lt;/h1>
&lt;div class="alert alert-secondary d-flex align-items-center" role="alert">
 &lt;div>
 &lt;img width="100px" src="https://mevislab.github.io/examples/pull/116/images/youtube.svg" />&amp;nbsp;&amp;nbsp;&lt;a href="https://www.youtube.com/watch?v=6fHmy57P3yQ" target="_blank">&lt;img width="100px" src="https://img.youtube.com/vi/6fHmy57P3yQ/0.jpg" />&lt;/a>&amp;nbsp;&amp;nbsp;&amp;nbsp;This example is also available on &lt;a href="https://www.youtube.com/watch?v=6fHmy57P3yQ" target="_blank">YouTube&lt;/a>.
 &lt;/div>
&lt;/div>
&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;p>In this example, we like to automatically create CSOs based on a predefined iso value.&lt;/p>
&lt;h2 id="steps-to-do">Steps to do&lt;/h2>
&lt;h3 id="develop-your-network">Develop your network&lt;/h3>
&lt;p>Add the following modules to your workspace and connect them as shown.
Load the example image &lt;em>Bone.tiff&lt;/em>.&lt;/p>
&lt;h3 id="automatic-creation-of-csos-based-on-the-iso-value">Automatic creation of CSOs based on the iso value&lt;/h3>
&lt;p>Now, open the panel of &lt;code>CSOIsoGenerator&lt;/code> to set the &lt;em>Iso Value&lt;/em> to 1200. If you press &lt;em>Update&lt;/em> in
the panel, you can see the creation of CSOs on every slide, when opening
the module &lt;code>View2D&lt;/code>. In addition to that the number of CSOs is displayed in the &lt;code>CSOManager&lt;/code>. The module
&lt;code>CSOIsoGenerator&lt;/code> generates iso-contours for each slice at a fixed iso
value. This means that closed CSOs are formed based on the detection of the
voxel value of 1200 on every slice.&lt;/p></description></item><item><title>Contour Example 6: Adding Labels to Contours</title><link>https://mevislab.github.io/examples/pull/116/tutorials/dataobjects/contours/contourexample6/</link><pubDate>Mon, 11 Mar 2024 00:00:00 +0000</pubDate><guid>https://mevislab.github.io/examples/pull/116/tutorials/dataobjects/contours/contourexample6/</guid><description>&lt;h1 id="TutorialContoursExample6">Contour Example 6: Adding Labels to Contours&lt;/h1>
&lt;div class="alert alert-secondary d-flex align-items-center" role="alert">
 &lt;div>
 &lt;img width="100px" src="https://mevislab.github.io/examples/pull/116/images/youtube.svg" />&amp;nbsp;&amp;nbsp;&lt;a href="https://www.youtube.com/watch?v=-ACAoeK2Fm8" target="_blank">&lt;img width="100px" src="https://img.youtube.com/vi/-ACAoeK2Fm8/0.jpg" />&lt;/a>&amp;nbsp;&amp;nbsp;&amp;nbsp;This example is also available on &lt;a href="https://www.youtube.com/watch?v=-ACAoeK2Fm8" target="_blank">YouTube&lt;/a>.
 &lt;/div>
&lt;/div>
&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;p>In this example, we are adding a label to a contour. The label provides information about measurements and about the contour itself. The label remains connected to the contour and can be moved via mouse interactions.&lt;/p>
&lt;h2 id="steps-to-do">Steps to do&lt;/h2>
&lt;h3 id="develop-your-network">Develop your network&lt;/h3>
&lt;p>Add a &lt;code>LocalImage&lt;/code> and a &lt;code>View2D&lt;/code> module to your workspace and connect them as shown below. Load the file &lt;em>ProbandT1.dcm&lt;/em> from MeVisLab demo data. In order to create contours (CSOs), we need a &lt;code>SoView2DCSOExtensibleEditor&lt;/code> module. It manages attached CSO editors, renderers and offers an optional default renderer for all types of CSOs.&lt;/p></description></item><item><title>Contour Example 7: Using the CSOListContainer</title><link>https://mevislab.github.io/examples/pull/116/tutorials/dataobjects/contours/contourexample7/</link><pubDate>Thu, 01 Aug 2024 00:00:00 +0000</pubDate><guid>https://mevislab.github.io/examples/pull/116/tutorials/dataobjects/contours/contourexample7/</guid><description>&lt;h1 id="TutorialContoursExample7">Contour Example 7: Using the CSOListContainer&lt;/h1>
&lt;div class="alert alert-secondary d-flex align-items-center" role="alert">
 &lt;div>
 &lt;img width="100px" src="https://mevislab.github.io/examples/pull/116/images/youtube.svg" />&amp;nbsp;&amp;nbsp;&lt;a href="https://www.youtube.com/watch?v=4quJcvvt-GQ" target="_blank">&lt;img width="100px" src="https://img.youtube.com/vi/4quJcvvt-GQ/0.jpg" />&lt;/a>&amp;nbsp;&amp;nbsp;&amp;nbsp;This example is also available on &lt;a href="https://www.youtube.com/watch?v=4quJcvvt-GQ" target="_blank">YouTube&lt;/a>.
 &lt;/div>
&lt;/div>
&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;p>In this example, we are using the module &lt;code>CSOListContainer&lt;/code> instead of the &lt;code>CSOManager&lt;/code>. The &lt;code>CSOManager&lt;/code> is a heavy weight, UI driven module. You can use it to see all of your CSOs, CSOLists and CSOGroups in the module panel. The &lt;code>CSOListContainer&lt;/code> is a light weight module with focus on Python scripting. We recommend to use this module for final application development, because Python provides much more flexibility in handling CSO objects.&lt;/p></description></item><item><title>Surface Objects (WEM)</title><link>https://mevislab.github.io/examples/pull/116/tutorials/dataobjects/surfaceobjects/</link><pubDate>Wed, 15 Jun 2022 08:56:33 +0200</pubDate><guid>https://mevislab.github.io/examples/pull/116/tutorials/dataobjects/surfaceobjects/</guid><description>&lt;h1 id="WEMs">Surface Objects (WEMs)&lt;/h1>
&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;p>In MeVisLab it is possible to create, visualize, process and manipulate surface objects, also known as polygon meshes. Here, we call surface objects &lt;em>Winged Edge Mesh&lt;/em>, in short WEM. In this chapter you will get an introduction into WEMs. In addition, you will find examples on how to work with WEMs. For more information on WEMs take a look at the 
&lt;a href="https://mevislabdownloads.mevis.de/docs/current/MeVisLab/Resources/Documentation/Publish/SDK/ToolBoxReference/WEMDataStructure.html" target="_blank">MeVislab Toolbox Reference&lt;/a>

. If you like to know which WEM formats can be imported into MeVisLab, take a look at the assimp documentation &lt;a href="https://github.com/assimp/assimp" target="_blank" rel="noopener">here&lt;/a>.&lt;/p></description></item><item><title>Surface Example 1: Creation of WEMs</title><link>https://mevislab.github.io/examples/pull/116/tutorials/dataobjects/surfaces/surfaceexample1/</link><pubDate>Wed, 15 Jun 2022 08:56:33 +0200</pubDate><guid>https://mevislab.github.io/examples/pull/116/tutorials/dataobjects/surfaces/surfaceexample1/</guid><description>&lt;h1 id="surface-example-1-create-winged-edge-mesh-out-of-voxel-images-and-csos">Surface Example 1: Create Winged Edge Mesh out of voxel images and CSOs&lt;/h1>
&lt;div class="alert alert-secondary d-flex align-items-center" role="alert">
 &lt;div>
 &lt;img width="100px" src="https://mevislab.github.io/examples/pull/116/images/youtube.svg" />&amp;nbsp;&amp;nbsp;&lt;a href="https://www.youtube.com/watch?v=-KnZ5a27T0c" target="_blank">&lt;img width="100px" src="https://img.youtube.com/vi/-KnZ5a27T0c/0.jpg" />&lt;/a>&amp;nbsp;&amp;nbsp;&amp;nbsp;This example is also available on &lt;a href="https://www.youtube.com/watch?v=-KnZ5a27T0c" target="_blank">YouTube&lt;/a>.
 &lt;/div>
&lt;/div>
&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;p>In this example you will learn how to create a Winged Edge Mesh (WEM). There are several approaches on creating WEMs, a few of them are shown in this example. Instead of creating WEMs, they can also be imported, see chapter &lt;a href="tutorials/dataobjects/surfaceobjects">Surface Objects (WEM)&lt;/a>.&lt;/p>
&lt;h2 id="steps-to-do">Steps to do&lt;/h2>
&lt;h3 id="from-image-to-surface-generating-wems-out-of-voxel-images">From image to surface: Generating WEMs out of voxel images&lt;/h3>
&lt;p>At first, we will create a WEM out of a voxel image using the module &lt;code>WEMIsoSurface&lt;/code>. Add and connect the shown modules. Load the image &lt;em>$(DemoDataPath)/Bone.tiff&lt;/em> and set the &lt;em>Iso Min. Value&lt;/em> in the panel of &lt;code>WEMIsoSurface&lt;/code> to 1200. Tick the box &lt;em>Use image max. value&lt;/em>. The module &lt;code>WEMIsoSurface&lt;/code> creates surface objects out of all voxels with an Iso value equal or above 1200 (and smaller than the image max value). The module &lt;code>SoWEMRenderer&lt;/code> can now be used to generate an Open Inventor scene, which can be displayed by the module &lt;code>SoExaminerViewer&lt;/code>.&lt;/p></description></item><item><title>Surface Example 2: Processing and Modification of WEM</title><link>https://mevislab.github.io/examples/pull/116/tutorials/dataobjects/surfaces/surfaceexample2/</link><pubDate>Wed, 15 Jun 2022 08:56:33 +0200</pubDate><guid>https://mevislab.github.io/examples/pull/116/tutorials/dataobjects/surfaces/surfaceexample2/</guid><description>&lt;h1 id="surface-example-2-processing-and-modification-of-wem">Surface Example 2: Processing and Modification of WEM&lt;/h1>
&lt;div class="alert alert-secondary d-flex align-items-center" role="alert">
 &lt;div>
 &lt;img width="100px" src="https://mevislab.github.io/examples/pull/116/images/youtube.svg" />&amp;nbsp;&amp;nbsp;&lt;a href="https://www.youtube.com/watch?v=lVbldzanvfE" target="_blank">&lt;img width="100px" src="https://img.youtube.com/vi/lVbldzanvfE/0.jpg" />&lt;/a>&amp;nbsp;&amp;nbsp;&amp;nbsp;This example is also available on &lt;a href="https://www.youtube.com/watch?v=lVbldzanvfE" target="_blank">YouTube&lt;/a>.
 &lt;/div>
&lt;/div>
&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;p>In this example, you will learn how to modify and process WEMs.&lt;/p>
&lt;h2 id="steps-to-do">Steps to do&lt;/h2>
&lt;h3 id="develop-your-network">Develop your network&lt;/h3>
&lt;h4 id="modification-of-wems">Modification of WEMs&lt;/h4>
&lt;p>Use the module &lt;code>WEMLoad&lt;/code> to load the file &lt;em>venus.off&lt;/em>. Then add and connect the shown modules. We like to display the WEM &lt;em>venus&lt;/em> two times, one time this WEM is modified. You can use the module &lt;code>WEMModify&lt;/code> to apply modifications. In its panel, change the scale and the size of the WEM. Now you see two times the &lt;code>venus&lt;/code> next to each other.&lt;/p></description></item><item><title>Surface Example 3: Interactions with WEM</title><link>https://mevislab.github.io/examples/pull/116/tutorials/dataobjects/surfaces/surfaceexample3/</link><pubDate>Tue, 21 Mar 2023 00:00:00 +0000</pubDate><guid>https://mevislab.github.io/examples/pull/116/tutorials/dataobjects/surfaces/surfaceexample3/</guid><description>&lt;h1 id="surface-example-3-interactions-with-wem">Surface Example 3: Interactions with WEM&lt;/h1>
&lt;div class="alert alert-secondary d-flex align-items-center" role="alert">
 &lt;div>
 &lt;img width="100px" src="https://mevislab.github.io/examples/pull/116/images/youtube.svg" />&amp;nbsp;&amp;nbsp;&lt;a href="https://www.youtube.com/watch?v=YDOEqCOmUFw" target="_blank">&lt;img width="100px" src="https://img.youtube.com/vi/YDOEqCOmUFw/0.jpg" />&lt;/a>&amp;nbsp;&amp;nbsp;&amp;nbsp;This example is also available on &lt;a href="https://www.youtube.com/watch?v=YDOEqCOmUFw" target="_blank">YouTube&lt;/a>.
 &lt;/div>
&lt;/div>
&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;p>In these examples, we are showing 2 different possibilities to interact with a WEM:&lt;/p>
&lt;ul>
&lt;li>Scale, rotate and move a WEM in a scene&lt;/li>
&lt;li>Modify a WEM in a scene&lt;/li>
&lt;/ul>
&lt;h3 id="scale-rotate-and-move-a-wem-in-a-scene">Scale, rotate and move a WEM in a scene&lt;/h3>
&lt;p>We are using a &lt;code>SoTransformerDragger&lt;/code> module to apply transformations on a 3D WEM object via mouse interactions.&lt;/p></description></item><item><title>Surface Example 4: Interactively moving WEM</title><link>https://mevislab.github.io/examples/pull/116/tutorials/dataobjects/surfaces/surfaceexample4/</link><pubDate>Wed, 15 Jun 2022 08:56:33 +0200</pubDate><guid>https://mevislab.github.io/examples/pull/116/tutorials/dataobjects/surfaces/surfaceexample4/</guid><description>&lt;h1 id="surface-example-4-interactively-moving-wem">Surface Example 4: Interactively moving WEM&lt;/h1>
&lt;div class="alert alert-secondary d-flex align-items-center" role="alert">
 &lt;div>
 &lt;img width="100px" src="https://mevislab.github.io/examples/pull/116/images/youtube.svg" />&amp;nbsp;&amp;nbsp;&lt;a href="https://www.youtube.com/watch?v=WKiCddNGKrw" target="_blank">&lt;img width="100px" src="https://img.youtube.com/vi/WKiCddNGKrw/0.jpg" />&lt;/a>&amp;nbsp;&amp;nbsp;&amp;nbsp;This example is also available on &lt;a href="https://www.youtube.com/watch?v=WKiCddNGKrw" target="_blank">YouTube&lt;/a>.
 &lt;/div>
&lt;/div>
&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;p>In this example, we like to interactively move WEMs using &lt;code>SoDragger&lt;/code> modules insight a viewer.&lt;/p>
&lt;h3 id="develop-your-network">Develop your network&lt;/h3>
&lt;h3 id="interactively-translating-objects-in-3d-using-sodragger-modules">Interactively translating objects in 3D using SoDragger modules&lt;/h3>
&lt;p>Add and connect the following modules as shown. In the panel of the module &lt;code>WEMInitialize&lt;/code> select the &lt;em>Model&lt;/em> &lt;em>Octasphere&lt;/em>. After that, open the viewer &lt;code>SoExaminerViewer&lt;/code> and make sure to select the &lt;em>Interaction Mode&lt;/em>. Now, you are able to click on the presented &lt;em>Octaspehere&lt;/em> and move it alongside one axis. The following modules are involved in the interactions:&lt;/p></description></item><item><title>Surface Example 5: WEM - Primitive Value Lists</title><link>https://mevislab.github.io/examples/pull/116/tutorials/dataobjects/surfaces/surfaceexample5/</link><pubDate>Wed, 15 Jun 2022 08:56:33 +0200</pubDate><guid>https://mevislab.github.io/examples/pull/116/tutorials/dataobjects/surfaces/surfaceexample5/</guid><description>&lt;h1 id="surface-example-5-wem---primitive-value-lists">Surface Example 5: WEM - Primitive Value Lists&lt;/h1>
&lt;div class="alert alert-secondary d-flex align-items-center" role="alert">
 &lt;div>
 &lt;img width="100px" src="https://mevislab.github.io/examples/pull/116/images/youtube.svg" />&amp;nbsp;&amp;nbsp;&lt;a href="https://www.youtube.com/watch?v=Rap1RY6l5Cc" target="_blank">&lt;img width="100px" src="https://img.youtube.com/vi/Rap1RY6l5Cc/0.jpg" />&lt;/a>&amp;nbsp;&amp;nbsp;&amp;nbsp;This example is also available on &lt;a href="https://www.youtube.com/watch?v=Rap1RY6l5Cc" target="_blank">YouTube&lt;/a>.
 &lt;/div>
&lt;/div>
&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;p>WEMs do not only contain the coordinates of nodes and surfaces, they can also contain additional information. These information are stored in so called &lt;em>Primitive Value Lists&lt;/em> (PVLs). Every node, every surface and every edge can contains such a list. In these lists, you can for example store the color of the node or specific patient information. These information can be used for visualization or for further statistical analysis.&lt;/p></description></item><item><title>Chapter VI: Testing</title><link>https://mevislab.github.io/examples/pull/116/tutorials/testing/</link><pubDate>Wed, 15 Jun 2022 08:56:33 +0200</pubDate><guid>https://mevislab.github.io/examples/pull/116/tutorials/testing/</guid><description>&lt;h1 id="TutorialChapter6">MeVisLab Tutorial Chapter VI&lt;/h1>
&lt;h2 id="TutorialTesting">Testing, Profiling and Debugging in MeVisLab&lt;/h2>
&lt;p>The MeVisLab Integrated Development Environment (IDE) provides tools to write automated tests in Python, profile your network performance and to debug your Python code.
All of these funtionalities will be addressed in this chapter.&lt;/p>
&lt;h3 id="testing">Testing&lt;/h3>
&lt;p>The MeVisLab TestCenter is the starting point of your tests. Select &lt;i>[
 
 File
 &amp;rarr; 
 Run TestCaseManager
]&lt;/i> to open the user interface of the TestCaseManager.&lt;/p></description></item><item><title>Marker Objects</title><link>https://mevislab.github.io/examples/pull/116/tutorials/dataobjects/markerobjects/</link><pubDate>Wed, 15 Jun 2022 08:56:33 +0200</pubDate><guid>https://mevislab.github.io/examples/pull/116/tutorials/dataobjects/markerobjects/</guid><description>&lt;h1 id="MarkersInMeVisLab">Markers in MeVisLab&lt;/h1>
&lt;p>In MeVisLab you can equip images and other data objects with markers. In this example you will see how to create, process and use markers.&lt;/p>
&lt;h2 id="creation-and-rendering">Creation and Rendering&lt;/h2>
&lt;p>To create markers, you can use a marker editor, for example the &lt;code>SoView2DMarkerEditor&lt;/code>. Connect this editor to a viewer as shown below. Now you can interactively create new markers. Connect the module &lt;code>XMarkerListContainer&lt;/code> to your marker editor to store markers in a list.&lt;/p></description></item><item><title>Example 1: Distance between Markers</title><link>https://mevislab.github.io/examples/pull/116/tutorials/dataobjects/markers/markerexample1/</link><pubDate>Wed, 15 Jun 2022 08:56:33 +0200</pubDate><guid>https://mevislab.github.io/examples/pull/116/tutorials/dataobjects/markers/markerexample1/</guid><description>&lt;h1 id="example-1-calculating-the-distance-between-markers">Example 1: Calculating the distance between markers&lt;/h1>
&lt;div class="alert alert-secondary d-flex align-items-center" role="alert">
 &lt;div>
 &lt;img width="100px" src="https://mevislab.github.io/examples/pull/116/images/youtube.svg" />&amp;nbsp;&amp;nbsp;&lt;a href="https://www.youtube.com/watch?v=xYR5Qkze0lE" target="_blank">&lt;img width="100px" src="https://img.youtube.com/vi/xYR5Qkze0lE/0.jpg" />&lt;/a>&amp;nbsp;&amp;nbsp;&amp;nbsp;This example is also available on &lt;a href="https://www.youtube.com/watch?v=xYR5Qkze0lE" target="_blank">YouTube&lt;/a>.
 &lt;/div>
&lt;/div>
&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;p>In this example, we will measure the distance between one position in an image to a list of markers.&lt;/p>
&lt;h2 id="steps-to-do">Steps to do&lt;/h2>
&lt;h3 id="develop-your-network">Develop your network&lt;/h3>
&lt;p>Add the following modules and connect them as shown.&lt;/p>
&lt;p>We changed the names of the modules &lt;code>SoView2DMarkerEditor&lt;/code> and &lt;code>XMarkerLIstContainer&lt;/code>, to distinguish these modules from two similar modules we will add later on. Open the panel of &lt;code>SoView2DMarkerEditor&lt;/code> and select the tab &lt;em>Drawing&lt;/em>. Now chose the &lt;em>Color&lt;/em> &lt;em>red&lt;/em>.&lt;/p></description></item><item><title>Example 1: Writing a simple test case in MeVisLab</title><link>https://mevislab.github.io/examples/pull/116/tutorials/testing/testingexample1/</link><pubDate>Wed, 15 Jun 2022 08:56:33 +0200</pubDate><guid>https://mevislab.github.io/examples/pull/116/tutorials/testing/testingexample1/</guid><description>&lt;h1 id="example-1-writing-a-simple-test-case-in-mevislab">Example 1: Writing a simple test case in MeVisLab&lt;/h1>
&lt;div class="alert alert-secondary d-flex align-items-center" role="alert">
 &lt;div>
 &lt;img width="100px" src="https://mevislab.github.io/examples/pull/116/images/youtube.svg" />&amp;nbsp;&amp;nbsp;&lt;a href="https://www.youtube.com/watch?v=DqpVaKai_00" target="_blank">&lt;img width="100px" src="https://img.youtube.com/vi/DqpVaKai_00/0.jpg" />&lt;/a>&amp;nbsp;&amp;nbsp;&amp;nbsp;This example is also available on &lt;a href="https://www.youtube.com/watch?v=DqpVaKai_00" target="_blank">YouTube&lt;/a>.
 &lt;/div>
&lt;/div>
&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;p>In this example, you will learn how to write an automated test for a simple network using the &lt;code>DicomImport&lt;/code>, &lt;code>MinMaxScan&lt;/code> and &lt;code>View3D&lt;/code> modules. Afterwards, you will be able to write test cases for any other module and network yourself.&lt;/p>
&lt;h2 id="steps-to-do">Steps to do&lt;/h2>
&lt;h3 id="creating-the-network-to-be-used-for-testing">Creating the network to be used for testing&lt;/h3>
&lt;p>Add the following modules to your workspace and connect them as seen below:&lt;/p></description></item><item><title>Example 2: Profiling in MeVisLab</title><link>https://mevislab.github.io/examples/pull/116/tutorials/testing/testingexample2/</link><pubDate>Wed, 15 Jun 2022 08:56:33 +0200</pubDate><guid>https://mevislab.github.io/examples/pull/116/tutorials/testing/testingexample2/</guid><description>&lt;h1 id="example-2-profiling-in-mevislab">Example 2: Profiling in MeVisLab&lt;/h1>
&lt;div class="alert alert-secondary d-flex align-items-center" role="alert">
 &lt;div>
 &lt;img width="100px" src="https://mevislab.github.io/examples/pull/116/images/youtube.svg" />&amp;nbsp;&amp;nbsp;&lt;a href="https://www.youtube.com/watch?v=DZ4BcAne4hM" target="_blank">&lt;img width="100px" src="https://img.youtube.com/vi/DZ4BcAne4hM/0.jpg" />&lt;/a>&amp;nbsp;&amp;nbsp;&amp;nbsp;This example is also available on &lt;a href="https://www.youtube.com/watch?v=DZ4BcAne4hM" target="_blank">YouTube&lt;/a>.
 &lt;/div>
&lt;/div>
&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;p>In this example, we are using the MeVisLab Profiler to inspect the memory and CPU consumption of the modules in an example network.&lt;/p>
&lt;h2 id="steps-to-do">Steps to do&lt;/h2>
&lt;h3 id="creating-the-network-to-be-used-for-profiling">Creating the network to be used for profiling&lt;/h3>
&lt;p>You can open any network you like, here we are using the example network of the module &lt;code>MinMaxScan&lt;/code> for profiling. Add the module &lt;code>MinMaxScan&lt;/code> to your workspace, open the example network via right-click 


&lt;img width="22px" src="https://mevislab.github.io/examples/pull/116/images/rmb.svg" alt="Right Mouse Button" />

 and select &lt;i>[
 
 Help
 &amp;rarr; 
 Show Example Network
]&lt;/i>.&lt;/p></description></item><item><title>Example 3: Iterative tests in MeVisLab with Screenshots</title><link>https://mevislab.github.io/examples/pull/116/tutorials/testing/testingexample3/</link><pubDate>Wed, 15 Jun 2022 08:56:33 +0200</pubDate><guid>https://mevislab.github.io/examples/pull/116/tutorials/testing/testingexample3/</guid><description>&lt;h1 id="example-3-iterative-tests-in-mevislab">Example 3: Iterative tests in MeVisLab&lt;/h1>
&lt;div class="alert alert-secondary d-flex align-items-center" role="alert">
 &lt;div>
 &lt;img width="100px" src="https://mevislab.github.io/examples/pull/116/images/youtube.svg" />&amp;nbsp;&amp;nbsp;&lt;a href="https://www.youtube.com/watch?v=1JidUyfz0xU" target="_blank">&lt;img width="100px" src="https://img.youtube.com/vi/1JidUyfz0xU/0.jpg" />&lt;/a>&amp;nbsp;&amp;nbsp;&amp;nbsp;This example is also available on &lt;a href="https://www.youtube.com/watch?v=1JidUyfz0xU" target="_blank">YouTube&lt;/a>.
 &lt;/div>
&lt;/div>
&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;p>In this example, you are writing an iterative test. Iterative test functions run a function for every specified input. They return a tuple consisting of the function object called and the inputs iterated over. The iterative test functions are useful if the same function should be applied to different input data. These could be input values, names of input images, etc.&lt;/p></description></item><item><title>Curves</title><link>https://mevislab.github.io/examples/pull/116/tutorials/dataobjects/curves/</link><pubDate>Wed, 15 Jun 2022 08:56:33 +0200</pubDate><guid>https://mevislab.github.io/examples/pull/116/tutorials/dataobjects/curves/</guid><description>&lt;h1 id="CurvesInMeVisLab">Curves in MeVisLab&lt;/h1>
&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;p>Curves can be used in MeVisLab to print the results of a function as two-dimensional mathematical curves into a diagram.&lt;/p>
&lt;p>&lt;p class="page-image">
 &lt;a data-modal="bs-lightbox" href="https://mevislab.github.io/examples/pull/116/images/tutorials/dataobjects/curves/Curves.png" title="Curves in MeVisLab">&lt;img id="Curves in MeVisLab" class="img-fluid rounded" src="https://mevislab.github.io/examples/pull/116/images/tutorials/dataobjects/curves/Curves.png" alt="Curves in MeVisLab" title="Curves in MeVisLab" />&lt;/a>
 &lt;figcaption class="figure-caption">Curves in MeVisLab&lt;/figcaption>
&lt;/p>
&lt;/p>
&lt;p>In the given example, only modules available in commercial &lt;strong>MeVisLab Professional SDK&lt;/strong> have been used. The non-commercial &lt;strong>MeVisLab Standard SDK&lt;/strong> provides more modules for curves.&lt;/p></description></item><item><title>Example 1: Drawing curves</title><link>https://mevislab.github.io/examples/pull/116/tutorials/dataobjects/curves/curvesexample1/</link><pubDate>Wed, 15 Jun 2022 08:56:33 +0200</pubDate><guid>https://mevislab.github.io/examples/pull/116/tutorials/dataobjects/curves/curvesexample1/</guid><description>&lt;h1 id="example-1-drawing-curves">Example 1: Drawing curves&lt;/h1>
&lt;div class="alert alert-secondary d-flex align-items-center" role="alert">
 &lt;div>
 &lt;img width="100px" src="https://mevislab.github.io/examples/pull/116/images/youtube.svg" />&amp;nbsp;&amp;nbsp;&lt;a href="https://www.youtube.com/watch?v=sj6muyInkRc" target="_blank">&lt;img width="100px" src="https://img.youtube.com/vi/sj6muyInkRc/0.jpg" />&lt;/a>&amp;nbsp;&amp;nbsp;&amp;nbsp;This example is also available on &lt;a href="https://www.youtube.com/watch?v=sj6muyInkRc" target="_blank">YouTube&lt;/a>.
 &lt;/div>
&lt;/div>
&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;p>In this example, you will draw one or more curves into a diagram and define different styles for the curves.&lt;/p>
&lt;h2 id="steps-to-do">Steps to do&lt;/h2>
&lt;h3 id="develop-your-network">Develop your network&lt;/h3>
&lt;p>A curve requires x- and y-coordinates to be printed. You can use the &lt;code>CurveCreator&lt;/code> module as input for these coordinates. The &lt;code>SoDiagram2D&lt;/code> draws the curves into a &lt;code>SoRenderArea&lt;/code>. You can also define the style of the curves by using the &lt;code>StylePalette&lt;/code> module.&lt;/p></description></item><item><title>Chapter VII: Application Development</title><link>https://mevislab.github.io/examples/pull/116/tutorials/summary/</link><pubDate>Wed, 15 Jun 2022 08:56:33 +0200</pubDate><guid>https://mevislab.github.io/examples/pull/116/tutorials/summary/</guid><description>&lt;h1 id="TutorialChapter7">MeVisLab Tutorial Chapter VII&lt;/h1>
&lt;h2 id="summary">Summary&lt;/h2>
&lt;p>This chapter will summarize all previous chapters and you will develop a whole application in MeVisLab. The complete workflow from developing a prototype to delivering your final application to your customer is explained step-by-step.&lt;/p>
&lt;p>&lt;p class="page-image">
 &lt;a data-modal="bs-lightbox" href="https://mevislab.github.io/examples/pull/116/images/tutorials/summary/Prototyping.png" title="Prototype to Product">&lt;img id="Prototype to Product" class="img-fluid rounded" src="https://mevislab.github.io/examples/pull/116/images/tutorials/summary/Prototyping.png" alt="Prototype to Product" title="Prototype to Product" />&lt;/a>
 &lt;figcaption class="figure-caption">Prototype to Product&lt;/figcaption>
&lt;/p>
&lt;/p>

&lt;svg xmlns="http://www.w3.org/2000/svg" style="display: none;">
 &lt;symbol id="check-fill" fill="currentColor" viewBox="0 0 16 16">
 &lt;path d="M16 8A8 8 0 1 1 0 8a8 8 0 0 1 16 0zm-3.97-3.03a.75.75 0 0 0-1.08.022L7.477 9.417 5.384 7.323a.75.75 0 0 0-1.06 1.06L6.97 11.03a.75.75 0 0 0 1.079-.02l3.992-4.99a.75.75 0 0 0-.01-1.05z"/>
 &lt;/symbol>
 &lt;symbol id="info-fill" fill="currentColor" viewBox="0 0 16 16">
 &lt;path d="M8 16A8 8 0 1 0 8 0a8 8 0 0 0 0 16zm.93-9.412-1 4.705c-.07.34.029.533.304.533.194 0 .487-.07.686-.246l-.088.416c-.287.346-.92.598-1.465.598-.703 0-1.002-.422-.808-1.319l.738-3.468c.064-.293.006-.399-.287-.47l-.451-.081.082-.381 2.29-.287zM8 5.5a1 1 0 1 1 0-2 1 1 0 0 1 0 2z"/>
 &lt;/symbol>
 &lt;symbol id="warning-fill" fill="currentColor" viewBox="0 0 16 16">
 &lt;path d="M8.982 1.566a1.13 1.13 0 0 0-1.96 0L.165 13.233c-.457.778.091 1.767.98 1.767h13.713c.889 0 1.438-.99.98-1.767L8.982 1.566zM8 5c.535 0 .954.462.9.995l-.35 3.507a.552.552 0 0 1-1.1 0L7.1 5.995A.905.905 0 0 1 8 5zm.002 6a1 1 0 1 1 0 2 1 1 0 0 1 0-2z"/>
 &lt;/symbol>
 &lt;symbol id="danger-fill" fill="currentColor" viewBox="0 0 16 16">
 &lt;path d="M8.982 1.566a1.13 1.13 0 0 0-1.96 0L.165 13.233c-.457.778.091 1.767.98 1.767h13.713c.889 0 1.438-.99.98-1.767L8.982 1.566zM8 5c.535 0 .954.462.9.995l-.35 3.507a.552.552 0 0 1-1.1 0L7.1 5.995A.905.905 0 0 1 8 5zm.002 6a1 1 0 1 1 0 2 1 1 0 0 1 0-2z"/>
 &lt;/symbol>
&lt;/svg>

&lt;div class="alert alert-primary alert-warning d-flex align-items-center" role="alert">
 &lt;svg class="bi flex-shrink-0 me-2" width="24" height="24" role="img" aria-label="Licensing:">&lt;use xlink:href="#warning-fill"/>&lt;/svg>
 &lt;div>
 &lt;b>Licensing:&amp;nbsp;&lt;/b>
 &lt;p>Some of the features described here will require a separate license. Building an installable executable requires the &lt;strong>MeVisLab ApplicationBuilder&lt;/strong> license. It extends the &lt;strong>MeVisLab SDK&lt;/strong> so that you can generate an installer of your developed macro module.&lt;/p></description></item><item><title>Step 1: Prototyping - Develop your Network</title><link>https://mevislab.github.io/examples/pull/116/tutorials/summary/summary1/</link><pubDate>Sun, 15 Jan 2023 00:00:00 +0000</pubDate><guid>https://mevislab.github.io/examples/pull/116/tutorials/summary/summary1/</guid><description>&lt;h1 id="step-1-prototyping---develop-your-network">Step 1: Prototyping - Develop your Network&lt;/h1>
&lt;div class="alert alert-secondary d-flex align-items-center" role="alert">
 &lt;div>
 &lt;img width="100px" src="https://mevislab.github.io/examples/pull/116/images/youtube.svg" />&amp;nbsp;&amp;nbsp;&lt;a href="https://www.youtube.com/watch?v=-hbddg0bXcA" target="_blank">&lt;img width="100px" src="https://img.youtube.com/vi/-hbddg0bXcA/0.jpg" />&lt;/a>&amp;nbsp;&amp;nbsp;&amp;nbsp;This example is also available on &lt;a href="https://www.youtube.com/watch?v=-hbddg0bXcA" target="_blank">YouTube&lt;/a>.
 &lt;/div>
&lt;/div>
&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;p>In this example, we will develop a network which fulfills the requirements mentioned on the &lt;a href="https://mevislab.github.io/examples/pull/116/tutorials/summary#DevelopNetwork">overview page&lt;/a>. The network will be developed by re-using existing modules and defining basic field values.&lt;/p>
&lt;h2 id="steps-to-do">Steps to do&lt;/h2>
&lt;h3 id="2d-viewer">2D viewer&lt;/h3>
&lt;p>The 2D viewer shall visualize the loaded images. In addition to that, it shall be possible to click into the image to trigger a RegionGrowing algorithm to segment parts of the loaded image based on a threshold.&lt;/p></description></item><item><title>Step 2: Prototyping - Create a macro module</title><link>https://mevislab.github.io/examples/pull/116/tutorials/summary/summary2/</link><pubDate>Mon, 16 Jan 2023 00:00:00 +0000</pubDate><guid>https://mevislab.github.io/examples/pull/116/tutorials/summary/summary2/</guid><description>&lt;h1 id="step-2-prototyping---create-a-macro-module">Step 2: Prototyping - Create a macro module&lt;/h1>
&lt;div class="alert alert-secondary d-flex align-items-center" role="alert">
 &lt;div>
 &lt;img width="100px" src="https://mevislab.github.io/examples/pull/116/images/youtube.svg" />&amp;nbsp;&amp;nbsp;&lt;a href="https://www.youtube.com/watch?v=gNlOTiEOJgU" target="_blank">&lt;img width="100px" src="https://img.youtube.com/vi/gNlOTiEOJgU/0.jpg" />&lt;/a>&amp;nbsp;&amp;nbsp;&amp;nbsp;This example is also available on &lt;a href="https://www.youtube.com/watch?v=gNlOTiEOJgU" target="_blank">YouTube&lt;/a>.
 &lt;/div>
&lt;/div>
&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;p>In this example, we encapsulate the previously developed prototype network into a macro module for future application development and automated testing.&lt;/p>
&lt;h2 id="steps-to-do">Steps to do&lt;/h2>
&lt;p>Make sure to have your *.mlab file from the previous &lt;a href="https://mevislab.github.io/examples/pull/116/tutorials/summary/summary1/">tutorial&lt;/a> available.&lt;/p>
&lt;h3 id="package-creation">Package creation&lt;/h3>
&lt;p>Packages are described in detail in &lt;a href="https://mevislab.github.io/examples/pull/116/tutorials/basicmechanisms/macromodules/package/">Example 2.1: Package creation&lt;/a>. If you already have your own package, you can skip this part and continue creating a macro module.&lt;/p></description></item><item><title>Step 3: Prototyping - User Interface and Python scripting</title><link>https://mevislab.github.io/examples/pull/116/tutorials/summary/summary3/</link><pubDate>Tue, 17 Jan 2023 00:00:00 +0000</pubDate><guid>https://mevislab.github.io/examples/pull/116/tutorials/summary/summary3/</guid><description>&lt;h1 id="step-3-prototyping---user-interface-and-python-scripting">Step 3: Prototyping - User Interface and Python scripting&lt;/h1>
&lt;div class="alert alert-secondary d-flex align-items-center" role="alert">
 &lt;div>
 &lt;img width="100px" src="https://mevislab.github.io/examples/pull/116/images/youtube.svg" />&amp;nbsp;&amp;nbsp;&lt;a href="https://www.youtube.com/watch?v=dOyncLUpclU" target="_blank">&lt;img width="100px" src="https://img.youtube.com/vi/dOyncLUpclU/0.jpg" />&lt;/a>&amp;nbsp;&amp;nbsp;&amp;nbsp;This example is also available on &lt;a href="https://www.youtube.com/watch?v=dOyncLUpclU" target="_blank">YouTube&lt;/a>.
 &lt;/div>
&lt;/div>
&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;p>In this step, we will develop a user interface and add Python scripting to the macro module you created in &lt;a href="https://mevislab.github.io/examples/pull/116/tutorials/summary/summary2">Step 2&lt;/a>.&lt;/p>
&lt;h2 id="steps-to-do">Steps to do&lt;/h2>
&lt;h3 id="develop-the-user-interface">Develop the User Interface&lt;/h3>
&lt;p>A mockup of the user interface you are going to develop is available &lt;a href="https://mevislab.github.io/examples/pull/116/tutorials/summary#UIDesign">here&lt;/a>. The interface provides the possibility to load files and shows a 2D and a 3D viewer. In addition to that, some settings and information for our final application are available.&lt;/p></description></item><item><title>Step 4: Review - Automated Tests</title><link>https://mevislab.github.io/examples/pull/116/tutorials/summary/summary4/</link><pubDate>Wed, 18 Jan 2023 00:00:00 +0000</pubDate><guid>https://mevislab.github.io/examples/pull/116/tutorials/summary/summary4/</guid><description>&lt;h1 id="step-4-review---automated-tests">Step 4: Review - Automated Tests&lt;/h1>
&lt;div class="alert alert-secondary d-flex align-items-center" role="alert">
 &lt;div>
 &lt;img width="100px" src="https://mevislab.github.io/examples/pull/116/images/youtube.svg" />&amp;nbsp;&amp;nbsp;&lt;a href="https://www.youtube.com/watch?v=_wheDC8TBJQ" target="_blank">&lt;img width="100px" src="https://img.youtube.com/vi/_wheDC8TBJQ/0.jpg" />&lt;/a>&amp;nbsp;&amp;nbsp;&amp;nbsp;This example is also available on &lt;a href="https://www.youtube.com/watch?v=_wheDC8TBJQ" target="_blank">YouTube&lt;/a>.
 &lt;/div>
&lt;/div>
&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;p>In the previous chapters you developed a macro module with User Interface and Python scripting. In this step you will see how to implement an automated test to verify and validate the Requirements defined in &lt;a href="https://mevislab.github.io/examples/pull/116/tutorials/summary">Overview&lt;/a>.&lt;/p>
&lt;h2 id="steps-to-do">Steps to do&lt;/h2>
&lt;h3 id="create-a-test-network-using-your-macro-module">Create a test network using your macro module&lt;/h3>
&lt;p>Create a new and empty network and save it as *.mlab file. Remember the location.&lt;/p></description></item><item><title>Step 5: Review - Installer creation</title><link>https://mevislab.github.io/examples/pull/116/tutorials/summary/summary5/</link><pubDate>Thu, 19 Jan 2023 00:00:00 +0000</pubDate><guid>https://mevislab.github.io/examples/pull/116/tutorials/summary/summary5/</guid><description>&lt;h1 id="step-5-review---installer-creation">Step 5: Review - Installer creation&lt;/h1>
&lt;div class="alert alert-secondary d-flex align-items-center" role="alert">
 &lt;div>
 &lt;img width="100px" src="https://mevislab.github.io/examples/pull/116/images/youtube.svg" />&amp;nbsp;&amp;nbsp;&lt;a href="https://www.youtube.com/watch?v=64l3igSmeWY" target="_blank">&lt;img width="100px" src="https://img.youtube.com/vi/64l3igSmeWY/0.jpg" />&lt;/a>&amp;nbsp;&amp;nbsp;&amp;nbsp;This example is also available on &lt;a href="https://www.youtube.com/watch?v=64l3igSmeWY" target="_blank">YouTube&lt;/a>.
 &lt;/div>
&lt;/div>
&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;p>Your macro module has been tested manually and/or automatically? Then you should create your first installable executable and deliver it to your customer(s) for final evaluation.&lt;/p>

&lt;svg xmlns="http://www.w3.org/2000/svg" style="display: none;">
 &lt;symbol id="check-fill" fill="currentColor" viewBox="0 0 16 16">
 &lt;path d="M16 8A8 8 0 1 1 0 8a8 8 0 0 1 16 0zm-3.97-3.03a.75.75 0 0 0-1.08.022L7.477 9.417 5.384 7.323a.75.75 0 0 0-1.06 1.06L6.97 11.03a.75.75 0 0 0 1.079-.02l3.992-4.99a.75.75 0 0 0-.01-1.05z"/>
 &lt;/symbol>
 &lt;symbol id="info-fill" fill="currentColor" viewBox="0 0 16 16">
 &lt;path d="M8 16A8 8 0 1 0 8 0a8 8 0 0 0 0 16zm.93-9.412-1 4.705c-.07.34.029.533.304.533.194 0 .487-.07.686-.246l-.088.416c-.287.346-.92.598-1.465.598-.703 0-1.002-.422-.808-1.319l.738-3.468c.064-.293.006-.399-.287-.47l-.451-.081.082-.381 2.29-.287zM8 5.5a1 1 0 1 1 0-2 1 1 0 0 1 0 2z"/>
 &lt;/symbol>
 &lt;symbol id="warning-fill" fill="currentColor" viewBox="0 0 16 16">
 &lt;path d="M8.982 1.566a1.13 1.13 0 0 0-1.96 0L.165 13.233c-.457.778.091 1.767.98 1.767h13.713c.889 0 1.438-.99.98-1.767L8.982 1.566zM8 5c.535 0 .954.462.9.995l-.35 3.507a.552.552 0 0 1-1.1 0L7.1 5.995A.905.905 0 0 1 8 5zm.002 6a1 1 0 1 1 0 2 1 1 0 0 1 0-2z"/>
 &lt;/symbol>
 &lt;symbol id="danger-fill" fill="currentColor" viewBox="0 0 16 16">
 &lt;path d="M8.982 1.566a1.13 1.13 0 0 0-1.96 0L.165 13.233c-.457.778.091 1.767.98 1.767h13.713c.889 0 1.438-.99.98-1.767L8.982 1.566zM8 5c.535 0 .954.462.9.995l-.35 3.507a.552.552 0 0 1-1.1 0L7.1 5.995A.905.905 0 0 1 8 5zm.002 6a1 1 0 1 1 0 2 1 1 0 0 1 0-2z"/>
 &lt;/symbol>
&lt;/svg>

&lt;div class="alert alert-primary alert-warning d-flex align-items-center" role="alert">
 &lt;svg class="bi flex-shrink-0 me-2" width="24" height="24" role="img" aria-label="Licensing:">&lt;use xlink:href="#warning-fill"/>&lt;/svg>
 &lt;div>
 &lt;b>Licensing:&amp;nbsp;&lt;/b>
 This step requires a valid &lt;strong>MeVisLab ApplicationBuilder&lt;/strong> license. It extends the &lt;strong>MeVisLab SDK&lt;/strong> so that you can generate an installer of your developed macro module.
Free evaluation licenses of the &lt;strong>MeVisLab ApplicationBuilder&lt;/strong>, time-limited to 3 months, can be requested at &lt;a href="mailto://sales@mevislab.de">sales(at)mevislab.de&lt;/a>.
 &lt;/div>
&lt;/div>
&lt;h2 id="steps-to-do">Steps to do&lt;/h2>
&lt;h3 id="install-tools-necessary-for-installer-generation">Install tools necessary for installer generation&lt;/h3>
&lt;p>The MeVisLab Project Wizard for Standalone Applications &lt;i>[
 
 File
 &amp;rarr; 
 Run Project Wizard...
 &amp;rarr; 
 Standalone Application
]&lt;/i> provides a check for all necessary tools you need to install before generating an installer.&lt;/p></description></item><item><title>Step 6: Refine - Update Application</title><link>https://mevislab.github.io/examples/pull/116/tutorials/summary/summary6/</link><pubDate>Fri, 20 Jan 2023 00:00:00 +0000</pubDate><guid>https://mevislab.github.io/examples/pull/116/tutorials/summary/summary6/</guid><description>&lt;h1 id="step-6-refine---update-application">Step 6: Refine - Update Application&lt;/h1>
&lt;div class="alert alert-secondary d-flex align-items-center" role="alert">
 &lt;div>
 &lt;img width="100px" src="https://mevislab.github.io/examples/pull/116/images/youtube.svg" />&amp;nbsp;&amp;nbsp;&lt;a href="https://www.youtube.com/watch?v=1v_UyGs8W1g" target="_blank">&lt;img width="100px" src="https://img.youtube.com/vi/1v_UyGs8W1g/0.jpg" />&lt;/a>&amp;nbsp;&amp;nbsp;&amp;nbsp;This example is also available on &lt;a href="https://www.youtube.com/watch?v=1v_UyGs8W1g" target="_blank">YouTube&lt;/a>.
 &lt;/div>
&lt;/div>
&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;p>In previous step you developed an application which can be installed on your customers systems for usage. In this step we are going to integrate simple feedback into our executable and re-create the installer.&lt;/p>
&lt;p>We want to show you how easy it is to update your application using MeVisLab.&lt;/p>
&lt;p>Your customer requests an additional requirement to define the transparency of your 2D overlay in addition to defining the color.&lt;/p></description></item><item><title>Step 7: Refine - Re-Build Installer</title><link>https://mevislab.github.io/examples/pull/116/tutorials/summary/summary7/</link><pubDate>Sat, 21 Jan 2023 00:00:00 +0000</pubDate><guid>https://mevislab.github.io/examples/pull/116/tutorials/summary/summary7/</guid><description>&lt;h1 id="step-7-refine---re-build-installer">Step 7: Refine - Re-Build Installer&lt;/h1>
&lt;div class="alert alert-secondary d-flex align-items-center" role="alert">
 &lt;div>
 &lt;img width="100px" src="https://mevislab.github.io/examples/pull/116/images/youtube.svg" />&amp;nbsp;&amp;nbsp;&lt;a href="https://www.youtube.com/watch?v=E0GnWPXT8Og" target="_blank">&lt;img width="100px" src="https://img.youtube.com/vi/E0GnWPXT8Og/0.jpg" />&lt;/a>&amp;nbsp;&amp;nbsp;&amp;nbsp;This example is also available on &lt;a href="https://www.youtube.com/watch?v=E0GnWPXT8Og" target="_blank">YouTube&lt;/a>.
 &lt;/div>
&lt;/div>
&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;p>In this step you are re-creating your application installer after changing the UI in previous &lt;a href="https://mevislab.github.io/examples/pull/116/tutorials/summary/summary6/">Step 6: Refine - Update Application&lt;/a>.&lt;/p>
&lt;h2 id="steps-to-do">Steps to do&lt;/h2>
&lt;h3 id="update-the-mlinstall-file">Update the *.mlinstall file&lt;/h3>
&lt;p>You do not need to use the Project Wizard now, because you already have a valid *.mlinstall file. The location should be in your package, under &lt;em>.\Configuration\Installers\TutorialSummary&lt;/em>. Open the file in any text editor and search for the &lt;em>$VERSION 0.5&lt;/em>. Change the version to something else, in our case we now have our first major release 1.0.&lt;/p></description></item><item><title>Extra: Run your application in Browser</title><link>https://mevislab.github.io/examples/pull/116/tutorials/summary/summary8/</link><pubDate>Fri, 24 Feb 2023 00:00:00 +0000</pubDate><guid>https://mevislab.github.io/examples/pull/116/tutorials/summary/summary8/</guid><description>&lt;h1 id="extra-run-your-application-in-browser">Extra: Run your application in Browser&lt;/h1>
&lt;div class="alert alert-secondary d-flex align-items-center" role="alert">
 &lt;div>
 &lt;img width="100px" src="https://mevislab.github.io/examples/pull/116/images/youtube.svg" />&amp;nbsp;&amp;nbsp;&lt;a href="https://www.youtube.com/watch?v=XgOyeu65f7Q" target="_blank">&lt;img width="100px" src="https://img.youtube.com/vi/XgOyeu65f7Q/0.jpg" />&lt;/a>&amp;nbsp;&amp;nbsp;&amp;nbsp;This example is also available on &lt;a href="https://www.youtube.com/watch?v=XgOyeu65f7Q" target="_blank">YouTube&lt;/a>.
 &lt;/div>
&lt;/div>
&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;p>This step explains how to run your developed application in a browser. The MeVisLab network remains the same, only some adaptations are necessary for running any macro module in a browser window.&lt;/p>

&lt;svg xmlns="http://www.w3.org/2000/svg" style="display: none;">
 &lt;symbol id="check-fill" fill="currentColor" viewBox="0 0 16 16">
 &lt;path d="M16 8A8 8 0 1 1 0 8a8 8 0 0 1 16 0zm-3.97-3.03a.75.75 0 0 0-1.08.022L7.477 9.417 5.384 7.323a.75.75 0 0 0-1.06 1.06L6.97 11.03a.75.75 0 0 0 1.079-.02l3.992-4.99a.75.75 0 0 0-.01-1.05z"/>
 &lt;/symbol>
 &lt;symbol id="info-fill" fill="currentColor" viewBox="0 0 16 16">
 &lt;path d="M8 16A8 8 0 1 0 8 0a8 8 0 0 0 0 16zm.93-9.412-1 4.705c-.07.34.029.533.304.533.194 0 .487-.07.686-.246l-.088.416c-.287.346-.92.598-1.465.598-.703 0-1.002-.422-.808-1.319l.738-3.468c.064-.293.006-.399-.287-.47l-.451-.081.082-.381 2.29-.287zM8 5.5a1 1 0 1 1 0-2 1 1 0 0 1 0 2z"/>
 &lt;/symbol>
 &lt;symbol id="warning-fill" fill="currentColor" viewBox="0 0 16 16">
 &lt;path d="M8.982 1.566a1.13 1.13 0 0 0-1.96 0L.165 13.233c-.457.778.091 1.767.98 1.767h13.713c.889 0 1.438-.99.98-1.767L8.982 1.566zM8 5c.535 0 .954.462.9.995l-.35 3.507a.552.552 0 0 1-1.1 0L7.1 5.995A.905.905 0 0 1 8 5zm.002 6a1 1 0 1 1 0 2 1 1 0 0 1 0-2z"/>
 &lt;/symbol>
 &lt;symbol id="danger-fill" fill="currentColor" viewBox="0 0 16 16">
 &lt;path d="M8.982 1.566a1.13 1.13 0 0 0-1.96 0L.165 13.233c-.457.778.091 1.767.98 1.767h13.713c.889 0 1.438-.99.98-1.767L8.982 1.566zM8 5c.535 0 .954.462.9.995l-.35 3.507a.552.552 0 0 1-1.1 0L7.1 5.995A.905.905 0 0 1 8 5zm.002 6a1 1 0 1 1 0 2 1 1 0 0 1 0-2z"/>
 &lt;/symbol>
&lt;/svg>

&lt;div class="alert alert-primary alert-warning d-flex align-items-center" role="alert">
 &lt;svg class="bi flex-shrink-0 me-2" width="24" height="24" role="img" aria-label="Licensing:">&lt;use xlink:href="#warning-fill"/>&lt;/svg>
 &lt;div>
 &lt;b>Licensing:&amp;nbsp;&lt;/b>
 This step requires a valid &lt;strong>MeVisLab Webtoolkit&lt;/strong> license. It extends the &lt;strong>MeVisLab SDK&lt;/strong> so that you can develop web macro modules.
Free evaluation licenses of the &lt;strong>MeVisLab Webtoolkit&lt;/strong>, time-limited to 3 months, can be requested at &lt;a href="mailto://sales@mevislab.de">sales(at)mevislab.de&lt;/a>.
 &lt;/div>
&lt;/div>
&lt;h2 id="steps-to-do">Steps to do&lt;/h2>
&lt;p>Make sure to have your macro module from previous &lt;a href="https://mevislab.github.io/examples/pull/116/tutorials/summary/summary2/">Step 2&lt;/a> available.&lt;/p></description></item><item><title>Chapter VIII: ThirdParty components</title><link>https://mevislab.github.io/examples/pull/116/tutorials/thirdparty/</link><pubDate>Wed, 15 Jun 2022 08:56:33 +0200</pubDate><guid>https://mevislab.github.io/examples/pull/116/tutorials/thirdparty/</guid><description>&lt;h1 id="TutorialChapter8">MeVisLab Tutorial Chapter VIII&lt;/h1>
&lt;h2 id="TutorialThirdParty">Using ThirdParty software integrated into MeVisLab&lt;/h2>
&lt;p>MeVisLab is equipped with a lot of useful software right out of the box, like the Insight Segmentation and Registration Toolkit (ITK) or the Visualization Toolkit (VTK). This chapter works as a guide on how to use some of the third party components integrated in MeVisLab for your projects via Python scripting.

&lt;svg xmlns="http://www.w3.org/2000/svg" style="display: none;">
 &lt;symbol id="check-fill" fill="currentColor" viewBox="0 0 16 16">
 &lt;path d="M16 8A8 8 0 1 1 0 8a8 8 0 0 1 16 0zm-3.97-3.03a.75.75 0 0 0-1.08.022L7.477 9.417 5.384 7.323a.75.75 0 0 0-1.06 1.06L6.97 11.03a.75.75 0 0 0 1.079-.02l3.992-4.99a.75.75 0 0 0-.01-1.05z"/>
 &lt;/symbol>
 &lt;symbol id="info-fill" fill="currentColor" viewBox="0 0 16 16">
 &lt;path d="M8 16A8 8 0 1 0 8 0a8 8 0 0 0 0 16zm.93-9.412-1 4.705c-.07.34.029.533.304.533.194 0 .487-.07.686-.246l-.088.416c-.287.346-.92.598-1.465.598-.703 0-1.002-.422-.808-1.319l.738-3.468c.064-.293.006-.399-.287-.47l-.451-.081.082-.381 2.29-.287zM8 5.5a1 1 0 1 1 0-2 1 1 0 0 1 0 2z"/>
 &lt;/symbol>
 &lt;symbol id="warning-fill" fill="currentColor" viewBox="0 0 16 16">
 &lt;path d="M8.982 1.566a1.13 1.13 0 0 0-1.96 0L.165 13.233c-.457.778.091 1.767.98 1.767h13.713c.889 0 1.438-.99.98-1.767L8.982 1.566zM8 5c.535 0 .954.462.9.995l-.35 3.507a.552.552 0 0 1-1.1 0L7.1 5.995A.905.905 0 0 1 8 5zm.002 6a1 1 0 1 1 0 2 1 1 0 0 1 0-2z"/>
 &lt;/symbol>
 &lt;symbol id="danger-fill" fill="currentColor" viewBox="0 0 16 16">
 &lt;path d="M8.982 1.566a1.13 1.13 0 0 0-1.96 0L.165 13.233c-.457.778.091 1.767.98 1.767h13.713c.889 0 1.438-.99.98-1.767L8.982 1.566zM8 5c.535 0 .954.462.9.995l-.35 3.507a.552.552 0 0 1-1.1 0L7.1 5.995A.905.905 0 0 1 8 5zm.002 6a1 1 0 1 1 0 2 1 1 0 0 1 0-2z"/>
 &lt;/symbol>
&lt;/svg>

&lt;div class="alert alert-primary alert-info d-flex align-items-center" role="alert">
 &lt;svg class="bi flex-shrink-0 me-2" width="24" height="24" role="img" aria-label="Additional Information:">&lt;use xlink:href="#info-fill"/>&lt;/svg>
 &lt;div>
 &lt;b>Additional Information:&amp;nbsp;&lt;/b>
 You will also find instructions to install and use any Python package (e.g. PyTorch) in MeVisLab using the &lt;code>PythonPip&lt;/code> module.
 &lt;/div>
&lt;/div>&lt;/p></description></item><item><title>OpenCV</title><link>https://mevislab.github.io/examples/pull/116/tutorials/thirdparty/opencv/</link><pubDate>Wed, 15 Jun 2022 08:56:33 +0200</pubDate><guid>https://mevislab.github.io/examples/pull/116/tutorials/thirdparty/opencv/</guid><description>&lt;h1 id="OpenCV">Open Source Computer Vision Library (OpenCV)&lt;/h1>
&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;p>&lt;a href="https://opencv.org/" title="OpenCV" target="_blank" rel="noopener">OpenCV&lt;/a> (Open Source Computer Vision Library) is an open source computer vision and machine learning software library.&lt;/p>
&lt;p>This chapter provides some examples how to use OpenCV in MeVisLab.&lt;/p>
&lt;h2 id="other-resources">Other resources&lt;/h2>
&lt;p>You can find a lot of OpenCV examples and tutorials on their &lt;a href="https://docs.opencv.org/4.x/d9/df8/tutorial_root.html" target="_blank" rel="noopener">website&lt;/a>.&lt;/p></description></item><item><title>Example 1: WebCam access with OpenCV</title><link>https://mevislab.github.io/examples/pull/116/tutorials/thirdparty/opencv/thirdpartyexample1/</link><pubDate>Wed, 15 Jun 2022 08:56:33 +0200</pubDate><guid>https://mevislab.github.io/examples/pull/116/tutorials/thirdparty/opencv/thirdpartyexample1/</guid><description>&lt;h1 id="example-1-webcam-access-with-opencv">Example 1: WebCam access with OpenCV&lt;/h1>
&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;p>In this example, we are using the &lt;code>PythonImage&lt;/code> module and access your WebCam to show the video in a &lt;code>View2D&lt;/code>.&lt;/p>
&lt;h2 id="steps-to-do">Steps to do&lt;/h2>
&lt;h3 id="creating-the-network-to-be-used-for-testing">Creating the network to be used for testing&lt;/h3>
&lt;p>Add the modules to your workspace and connect them as seen below.&lt;/p>
&lt;p>&lt;p class="page-image">
 &lt;a data-modal="bs-lightbox" href="https://mevislab.github.io/examples/pull/116/images/tutorials/thirdparty/network_example1.png" title="Example Network ">&lt;img id="Example Network " class="img-fluid rounded" src="https://mevislab.github.io/examples/pull/116/images/tutorials/thirdparty/network_example1.png" alt="Example Network " title="Example Network " />&lt;/a>
 &lt;figcaption class="figure-caption">Example Network &lt;/figcaption>
&lt;/p>
&lt;/p>
&lt;p>The viewer is empty because the image needs to be set via Python scripting.&lt;/p></description></item><item><title>Example 2: Face Detection with OpenCV</title><link>https://mevislab.github.io/examples/pull/116/tutorials/thirdparty/opencv/thirdpartyexample2/</link><pubDate>Wed, 15 Jun 2022 08:56:33 +0200</pubDate><guid>https://mevislab.github.io/examples/pull/116/tutorials/thirdparty/opencv/thirdpartyexample2/</guid><description>&lt;h1 id="example-2-face-detection-with-opencv">Example 2: Face Detection with OpenCV&lt;/h1>
&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;p>This example uses the OpenCV WebCam Python script and adds a basic face detection.&lt;/p>

&lt;svg xmlns="http://www.w3.org/2000/svg" style="display: none;">
 &lt;symbol id="check-fill" fill="currentColor" viewBox="0 0 16 16">
 &lt;path d="M16 8A8 8 0 1 1 0 8a8 8 0 0 1 16 0zm-3.97-3.03a.75.75 0 0 0-1.08.022L7.477 9.417 5.384 7.323a.75.75 0 0 0-1.06 1.06L6.97 11.03a.75.75 0 0 0 1.079-.02l3.992-4.99a.75.75 0 0 0-.01-1.05z"/>
 &lt;/symbol>
 &lt;symbol id="info-fill" fill="currentColor" viewBox="0 0 16 16">
 &lt;path d="M8 16A8 8 0 1 0 8 0a8 8 0 0 0 0 16zm.93-9.412-1 4.705c-.07.34.029.533.304.533.194 0 .487-.07.686-.246l-.088.416c-.287.346-.92.598-1.465.598-.703 0-1.002-.422-.808-1.319l.738-3.468c.064-.293.006-.399-.287-.47l-.451-.081.082-.381 2.29-.287zM8 5.5a1 1 0 1 1 0-2 1 1 0 0 1 0 2z"/>
 &lt;/symbol>
 &lt;symbol id="warning-fill" fill="currentColor" viewBox="0 0 16 16">
 &lt;path d="M8.982 1.566a1.13 1.13 0 0 0-1.96 0L.165 13.233c-.457.778.091 1.767.98 1.767h13.713c.889 0 1.438-.99.98-1.767L8.982 1.566zM8 5c.535 0 .954.462.9.995l-.35 3.507a.552.552 0 0 1-1.1 0L7.1 5.995A.905.905 0 0 1 8 5zm.002 6a1 1 0 1 1 0 2 1 1 0 0 1 0-2z"/>
 &lt;/symbol>
 &lt;symbol id="danger-fill" fill="currentColor" viewBox="0 0 16 16">
 &lt;path d="M8.982 1.566a1.13 1.13 0 0 0-1.96 0L.165 13.233c-.457.778.091 1.767.98 1.767h13.713c.889 0 1.438-.99.98-1.767L8.982 1.566zM8 5c.535 0 .954.462.9.995l-.35 3.507a.552.552 0 0 1-1.1 0L7.1 5.995A.905.905 0 0 1 8 5zm.002 6a1 1 0 1 1 0 2 1 1 0 0 1 0-2z"/>
 &lt;/symbol>
&lt;/svg>

&lt;div class="alert alert-primary alert-info d-flex align-items-center" role="alert">
 &lt;svg class="bi flex-shrink-0 me-2" width="24" height="24" role="img" aria-label="Info:">&lt;use xlink:href="#info-fill"/>&lt;/svg>
 &lt;div>
 &lt;b>Info:&amp;nbsp;&lt;/b>
 The Python code used in this example has been taken from &lt;a href="https://towardsdatascience.com/face-detection-in-2-minutes-using-opencv-python-90f89d7c0f81" target="_blank" rel="noopener">Towards Data Science&lt;/a>.
 &lt;/div>
&lt;/div>
&lt;h2 id="steps-to-do">Steps to do&lt;/h2>
&lt;h3 id="open-example-1">Open Example 1&lt;/h3>
&lt;p>Add the macro module developed in &lt;a href="https://mevislab.github.io/examples/pull/116/tutorials/thirdparty/opencv/thirdpartyexample1">Example 1&lt;/a> to your workspace.&lt;/p></description></item><item><title>assimp</title><link>https://mevislab.github.io/examples/pull/116/tutorials/thirdparty/assimp/</link><pubDate>Wed, 15 Jun 2022 08:56:33 +0200</pubDate><guid>https://mevislab.github.io/examples/pull/116/tutorials/thirdparty/assimp/</guid><description>&lt;h1 id="assimp">Asset-Importer-Lib (assimp)&lt;/h1>
&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;p>&lt;a href="http://www.assimp.org" title="assimp" target="_blank" rel="noopener">Assimp&lt;/a> (Asset-Importer-Lib) is a library to load and process geometric scenes from various 3D data formats.&lt;/p>
&lt;p>This chapter provides some examples of how 3D formats can be imported into MeVisLab. In general you always need a &lt;code>SoSceneLoader&lt;/code> module. The &lt;code>SoSceneLoader&lt;/code> allows to load meshes as Open Inventor points/lines/triangles/faces using the Open Asset Import Library.&lt;/p>
&lt;p>&lt;p class="page-image">
 &lt;a data-modal="bs-lightbox" href="https://mevislab.github.io/examples/pull/116/images/tutorials/thirdparty/SoSceneLoader.png" title="SoSceneLoader">&lt;img id="SoSceneLoader" class="img-fluid rounded" src="https://mevislab.github.io/examples/pull/116/images/tutorials/thirdparty/SoSceneLoader.png" alt="SoSceneLoader" title="SoSceneLoader" />&lt;/a>
 &lt;figcaption class="figure-caption">SoSceneLoader&lt;/figcaption>
&lt;/p>
&lt;/p>
&lt;p>You can also use the &lt;code>SoSceneWriter&lt;/code> module to export your 3D scenes from MeVisLab into any of the output formats listed below.&lt;/p></description></item><item><title>Example 1: 3D Printing in MeVisLab</title><link>https://mevislab.github.io/examples/pull/116/tutorials/thirdparty/assimp/assimpexample1/</link><pubDate>Wed, 15 Jun 2022 08:56:33 +0200</pubDate><guid>https://mevislab.github.io/examples/pull/116/tutorials/thirdparty/assimp/assimpexample1/</guid><description>&lt;h1 id="example-1-3d-printing-in-mevislab">Example 1: 3D Printing in MeVisLab&lt;/h1>
&lt;div class="alert alert-secondary d-flex align-items-center" role="alert">
 &lt;div>
 &lt;img width="100px" src="https://mevislab.github.io/examples/pull/116/images/youtube.svg" />&amp;nbsp;&amp;nbsp;&lt;a href="https://www.youtube.com/watch?v=82ysCYNTyso" target="_blank">&lt;img width="100px" src="https://img.youtube.com/vi/82ysCYNTyso/0.jpg" />&lt;/a>&amp;nbsp;&amp;nbsp;&amp;nbsp;This example is also available on &lt;a href="https://www.youtube.com/watch?v=82ysCYNTyso" target="_blank">YouTube&lt;/a>.
 &lt;/div>
&lt;/div>
&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;p>This example uses the assimp library to load a 3D file and save the file as *.stl for 3D printing.&lt;/p>
&lt;h2 id="steps-to-do">Steps to do&lt;/h2>
&lt;h3 id="develop-your-network">Develop your network&lt;/h3>
&lt;p>Add the modules &lt;code>SoSceneLoader&lt;/code>, &lt;code>SoBackground&lt;/code> and &lt;code>SoExaminerViewer&lt;/code> to your workspace and connect them as seen below.&lt;/p>
&lt;p>&lt;p class="page-image">
 &lt;a data-modal="bs-lightbox" href="https://mevislab.github.io/examples/pull/116/images/tutorials/thirdparty/assimp_example1.png" title="Example Network">&lt;img id="Example Network" class="img-fluid rounded" src="https://mevislab.github.io/examples/pull/116/images/tutorials/thirdparty/assimp_example1.png" alt="Example Network" title="Example Network" />&lt;/a>
 &lt;figcaption class="figure-caption">Example Network&lt;/figcaption>
&lt;/p>
&lt;/p>
&lt;h3 id="open-the-3d-file">Open the 3D file&lt;/h3>
&lt;p>Select the file &lt;em>vtkCow.obj&lt;/em> from MeVisLab demo data directory. Open &lt;code>SoExaminerViewer&lt;/code> and inspect the scene. You will see a 3D cow.&lt;/p></description></item><item><title>PyTorch</title><link>https://mevislab.github.io/examples/pull/116/tutorials/thirdparty/pytorch/</link><pubDate>Tue, 16 May 2023 00:00:00 +0000</pubDate><guid>https://mevislab.github.io/examples/pull/116/tutorials/thirdparty/pytorch/</guid><description>&lt;h1 id="pytorch">PyTorch&lt;/h1>
&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;p>&lt;a href="http://www.pytorch.org" title="pytorch" target="_blank" rel="noopener">PyTorch&lt;/a> is a machine learning framework based on the Torch library, used for applications such as Computer Vision and Natural Language Processing, originally developed by Meta AI and now part of the Linux Foundation umbrella.&lt;/p>
&lt;p>A lot of AI frameworks can be used within MeVisLab. We currently do not provide a preintegrated AI framework though as we try to avoid compatibility issues, and AI frameworks are very fast-moving by nature.&lt;/p></description></item><item><title>Example 1: Installing PyTorch using the PythonPip module</title><link>https://mevislab.github.io/examples/pull/116/tutorials/thirdparty/pytorch/pytorchexample1/</link><pubDate>Tue, 16 May 2023 00:00:00 +0000</pubDate><guid>https://mevislab.github.io/examples/pull/116/tutorials/thirdparty/pytorch/pytorchexample1/</guid><description>&lt;h1 id="example-1-installing-pytorch-using-the-pythonpip-module">Example 1: Installing PyTorch using the PythonPip module&lt;/h1>
&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;p>The module &lt;code>PythonPip&lt;/code> allows you to install additional Python packages to be used in MeVisLab.&lt;/p>

&lt;svg xmlns="http://www.w3.org/2000/svg" style="display: none;">
 &lt;symbol id="check-fill" fill="currentColor" viewBox="0 0 16 16">
 &lt;path d="M16 8A8 8 0 1 1 0 8a8 8 0 0 1 16 0zm-3.97-3.03a.75.75 0 0 0-1.08.022L7.477 9.417 5.384 7.323a.75.75 0 0 0-1.06 1.06L6.97 11.03a.75.75 0 0 0 1.079-.02l3.992-4.99a.75.75 0 0 0-.01-1.05z"/>
 &lt;/symbol>
 &lt;symbol id="info-fill" fill="currentColor" viewBox="0 0 16 16">
 &lt;path d="M8 16A8 8 0 1 0 8 0a8 8 0 0 0 0 16zm.93-9.412-1 4.705c-.07.34.029.533.304.533.194 0 .487-.07.686-.246l-.088.416c-.287.346-.92.598-1.465.598-.703 0-1.002-.422-.808-1.319l.738-3.468c.064-.293.006-.399-.287-.47l-.451-.081.082-.381 2.29-.287zM8 5.5a1 1 0 1 1 0-2 1 1 0 0 1 0 2z"/>
 &lt;/symbol>
 &lt;symbol id="warning-fill" fill="currentColor" viewBox="0 0 16 16">
 &lt;path d="M8.982 1.566a1.13 1.13 0 0 0-1.96 0L.165 13.233c-.457.778.091 1.767.98 1.767h13.713c.889 0 1.438-.99.98-1.767L8.982 1.566zM8 5c.535 0 .954.462.9.995l-.35 3.507a.552.552 0 0 1-1.1 0L7.1 5.995A.905.905 0 0 1 8 5zm.002 6a1 1 0 1 1 0 2 1 1 0 0 1 0-2z"/>
 &lt;/symbol>
 &lt;symbol id="danger-fill" fill="currentColor" viewBox="0 0 16 16">
 &lt;path d="M8.982 1.566a1.13 1.13 0 0 0-1.96 0L.165 13.233c-.457.778.091 1.767.98 1.767h13.713c.889 0 1.438-.99.98-1.767L8.982 1.566zM8 5c.535 0 .954.462.9.995l-.35 3.507a.552.552 0 0 1-1.1 0L7.1 5.995A.905.905 0 0 1 8 5zm.002 6a1 1 0 1 1 0 2 1 1 0 0 1 0-2z"/>
 &lt;/symbol>
&lt;/svg>

&lt;div class="alert alert-primary alert-warning d-flex align-items-center" role="alert">
 &lt;svg class="bi flex-shrink-0 me-2" width="24" height="24" role="img" aria-label="Warning:">&lt;use xlink:href="#warning-fill"/>&lt;/svg>
 &lt;div>
 &lt;b>Warning:&amp;nbsp;&lt;/b>
 You should not use the general Python &lt;em>pip&lt;/em> command from a locally installed Python, because MeVisLab will not know these packages and they cannot be used in MeVisLab directly.
 &lt;/div>
&lt;/div>
&lt;p>The module either allows to install packages into the global MeVisLab installation directory, or into your defined user package. We will use the user package directory, because then the installed packages remain available in your packages even if you uninstall or update MeVisLab. In addition to that, no administrative rights are necessary if you did install MeVisLab for all users.&lt;/p></description></item><item><title>Example 2: Brain Parcellation using PyTorch</title><link>https://mevislab.github.io/examples/pull/116/tutorials/thirdparty/pytorch/pytorchexample2/</link><pubDate>Fri, 30 Jun 2023 00:00:00 +0000</pubDate><guid>https://mevislab.github.io/examples/pull/116/tutorials/thirdparty/pytorch/pytorchexample2/</guid><description>&lt;h1 id="example-2-brain-parcellation-using-pytorch">Example 2: Brain Parcellation using PyTorch&lt;/h1>
&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;p>In this example, you are using a pre-trained PyTorch deep learning model (HighRes3DNet) to perform a full brain parcellation. HighRes3DNet is a 3D residual network presented by Li et al. in &lt;a href="https://link.springer.com/chapter/10.1007/978-3-319-59050-9_28" target="_blank" rel="noopener">On the Compactness, Efficiency, and Representation of 3D Convolutional Networks: Brain Parcellation as a Pretext Task&lt;/a>.&lt;/p>
&lt;h2 id="steps-to-do">Steps to do&lt;/h2>
&lt;p>Add a &lt;code>LocalImage&lt;/code> module to your workspace and select the file &lt;em>MRI_Head.dcm&lt;/em>. For PyTorch it is necessary to resample the data to a defined size. Add a &lt;code>Resample3D&lt;/code> module to the &lt;code>LocalImage&lt;/code> and open the panel. Change &lt;em>Keep Constant&lt;/em> to &lt;em>Voxel Size&lt;/em> and define &lt;em>Image Size&lt;/em> as 176, 217, 160.&lt;/p></description></item><item><title>Example 3: Segment persons in webcam videos</title><link>https://mevislab.github.io/examples/pull/116/tutorials/thirdparty/pytorch/pytorchexample3/</link><pubDate>Tue, 16 May 2023 00:00:00 +0000</pubDate><guid>https://mevislab.github.io/examples/pull/116/tutorials/thirdparty/pytorch/pytorchexample3/</guid><description>&lt;h1 id="example-3-segment-persons-in-webcam-videos">Example 3: Segment persons in webcam videos&lt;/h1>
&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;p>This tutorial is based on &lt;a href="https://mevislab.github.io/examples/pull/116/tutorials/thirdparty/opencv/thirdpartyexample2" title="Example 2: Face Detection with OpenCV">Example 2: Face Detection with OpenCV&lt;/a>. You can re-use some of the scripts already developed in the other tutorial.&lt;/p>
&lt;h2 id="steps-to-do">Steps to do&lt;/h2>
&lt;p>Add the macro module developed in the previous example to your workspace.&lt;/p>
&lt;p>&lt;p class="page-image">
 &lt;a data-modal="bs-lightbox" href="https://mevislab.github.io/examples/pull/116/images/tutorials/thirdparty/pytorch_example3_1.png" title="WebCamTest module">&lt;img id="WebCamTest module" class="img-fluid rounded" src="https://mevislab.github.io/examples/pull/116/images/tutorials/thirdparty/pytorch_example3_1.png" alt="WebCamTest module" title="WebCamTest module" />&lt;/a>
 &lt;figcaption class="figure-caption">WebCamTest module&lt;/figcaption>
&lt;/p>
&lt;/p>
&lt;p>Open the internal network of the module via middle mouse button 



&lt;img width="22px" src="https://mevislab.github.io/examples/pull/116/images/mmb.svg" alt="Middle Mouse Button / Mouse Wheel" />
 and right click 


&lt;img width="22px" src="https://mevislab.github.io/examples/pull/116/images/rmb.svg" alt="Right Mouse Button" />

 on the tab of the workspace showing the internal network. Select &lt;em>Show Enclosing Folder&lt;/em>.&lt;/p></description></item><item><title>Matplotlib</title><link>https://mevislab.github.io/examples/pull/116/tutorials/thirdparty/matplotlib/</link><pubDate>Thu, 25 May 2023 00:00:00 +0000</pubDate><guid>https://mevislab.github.io/examples/pull/116/tutorials/thirdparty/matplotlib/</guid><description>&lt;h1 id="matplotlib">Matplotlib&lt;/h1>
&lt;p>Matplotlib, introduced by John Hunter in 2002 and initially released in 2003, is a comprehensive data visualization library in Python. It is widely used among the scientific world as it is easy to grasp for beginners and provides high quality plots and images, that are widely customizable.&lt;/p>

&lt;svg xmlns="http://www.w3.org/2000/svg" style="display: none;">
 &lt;symbol id="check-fill" fill="currentColor" viewBox="0 0 16 16">
 &lt;path d="M16 8A8 8 0 1 1 0 8a8 8 0 0 1 16 0zm-3.97-3.03a.75.75 0 0 0-1.08.022L7.477 9.417 5.384 7.323a.75.75 0 0 0-1.06 1.06L6.97 11.03a.75.75 0 0 0 1.079-.02l3.992-4.99a.75.75 0 0 0-.01-1.05z"/>
 &lt;/symbol>
 &lt;symbol id="info-fill" fill="currentColor" viewBox="0 0 16 16">
 &lt;path d="M8 16A8 8 0 1 0 8 0a8 8 0 0 0 0 16zm.93-9.412-1 4.705c-.07.34.029.533.304.533.194 0 .487-.07.686-.246l-.088.416c-.287.346-.92.598-1.465.598-.703 0-1.002-.422-.808-1.319l.738-3.468c.064-.293.006-.399-.287-.47l-.451-.081.082-.381 2.29-.287zM8 5.5a1 1 0 1 1 0-2 1 1 0 0 1 0 2z"/>
 &lt;/symbol>
 &lt;symbol id="warning-fill" fill="currentColor" viewBox="0 0 16 16">
 &lt;path d="M8.982 1.566a1.13 1.13 0 0 0-1.96 0L.165 13.233c-.457.778.091 1.767.98 1.767h13.713c.889 0 1.438-.99.98-1.767L8.982 1.566zM8 5c.535 0 .954.462.9.995l-.35 3.507a.552.552 0 0 1-1.1 0L7.1 5.995A.905.905 0 0 1 8 5zm.002 6a1 1 0 1 1 0 2 1 1 0 0 1 0-2z"/>
 &lt;/symbol>
 &lt;symbol id="danger-fill" fill="currentColor" viewBox="0 0 16 16">
 &lt;path d="M8.982 1.566a1.13 1.13 0 0 0-1.96 0L.165 13.233c-.457.778.091 1.767.98 1.767h13.713c.889 0 1.438-.99.98-1.767L8.982 1.566zM8 5c.535 0 .954.462.9.995l-.35 3.507a.552.552 0 0 1-1.1 0L7.1 5.995A.905.905 0 0 1 8 5zm.002 6a1 1 0 1 1 0 2 1 1 0 0 1 0-2z"/>
 &lt;/symbol>
&lt;/svg>

&lt;div class="alert alert-primary alert-info d-flex align-items-center" role="alert">
 &lt;svg class="bi flex-shrink-0 me-2" width="24" height="24" role="img" aria-label="Info:">&lt;use xlink:href="#info-fill"/>&lt;/svg>
 &lt;div>
 &lt;b>Info:&amp;nbsp;&lt;/b>
 The documentation on Matplotlib along with general examples, cheat sheets and a starting guide can be found &lt;a href="https://matplotlib.org/" target="_blank" rel="noopener">here&lt;/a>.
 &lt;/div>
&lt;/div>
&lt;p>As MeVisLab supports the integration of Python scripts e. g. for test automation, Matplotlib can be used to visualize any data you might want to see. And as it is directly integrated into MeVisLab, you don&amp;rsquo;t have to install it (via &lt;code>PythonPip&lt;/code> module) first.&lt;/p></description></item><item><title>Example 1: Module Setup</title><link>https://mevislab.github.io/examples/pull/116/tutorials/thirdparty/matplotlib/modulesetup/</link><pubDate>Fri, 26 May 2023 00:00:00 +0000</pubDate><guid>https://mevislab.github.io/examples/pull/116/tutorials/thirdparty/matplotlib/modulesetup/</guid><description>&lt;h1 id="example-1-module-setup">Example 1: Module Setup&lt;/h1>
&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;p>To be able to access the data needed for our grayscale distribution plots, we need a network consisting of a module that imports DICOM data, a module that differentiates between slices and another that ouputs histogram data.&lt;/p>
&lt;h2 id="steps-to-do">Steps to do&lt;/h2>
&lt;p>Open up your MeVisLab workspace and add the modules &lt;code>LocalImage&lt;/code>, &lt;code>SubImage&lt;/code> and &lt;code>Histogram&lt;/code> to it.
Connect the output of &lt;code>LocalImage&lt;/code> to the input of &lt;code>SubImage&lt;/code> and the output of &lt;code>SubImage&lt;/code> with the input of &lt;code>Histogram&lt;/code>.
If you feel like using a shortcut, you can also download the base network below and open it in your MeVisLab.&lt;/p></description></item><item><title>Example 2: 2D Plotting</title><link>https://mevislab.github.io/examples/pull/116/tutorials/thirdparty/matplotlib/2dplotting/</link><pubDate>Tue, 30 May 2023 00:00:00 +0000</pubDate><guid>https://mevislab.github.io/examples/pull/116/tutorials/thirdparty/matplotlib/2dplotting/</guid><description>&lt;h1 id="example-2-2d-plotting">Example 2: 2D Plotting&lt;/h1>
&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;p>In this tutorial, we will equip the macro module we created in the &lt;a href="https://mevislab.github.io/examples/pull/116/tutorials/thirdparty/matplotlib/modulesetup">previous tutorial&lt;/a> with a responsive and interactable panel to plot grayscale distributions of single slices as well as defined sequences of slices in 2D.&lt;/p>
&lt;h2 id="steps-to-do">Steps to do&lt;/h2>
&lt;p>Open the module definition folder of your macro module and the related .script file in MATE. Then activate the Preview as shown below:&lt;/p>
&lt;p>&lt;p class="page-image">
 &lt;a data-modal="bs-lightbox" href="https://mevislab.github.io/examples/pull/116/images/tutorials/thirdparty/Matplotlib7.png" title="">&lt;img id="" class="img-fluid rounded" src="https://mevislab.github.io/examples/pull/116/images/tutorials/thirdparty/Matplotlib7.png" alt="MATE Preview" />&lt;/a>
 &lt;figcaption class="figure-caption">&lt;/figcaption>
&lt;/p></description></item><item><title>Example 3: Slice Comparison</title><link>https://mevislab.github.io/examples/pull/116/tutorials/thirdparty/matplotlib/slicecomparison/</link><pubDate>Wed, 31 May 2023 00:00:00 +0000</pubDate><guid>https://mevislab.github.io/examples/pull/116/tutorials/thirdparty/matplotlib/slicecomparison/</guid><description>&lt;h1 id="example-3-slice-comparison">Example 3: Slice Comparison&lt;/h1>
&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;p>We will adapt the previously created macro module to be able to overlay two defined slices to compare their grayscale distributions.&lt;/p>
&lt;ul>
&lt;li>The module we are adapting has been set up in the &lt;a href="https://mevislab.github.io/examples/pull/116/tutorials/thirdparty/matplotlib/modulesetup">Example 1: Module Setup&lt;/a> tutorial.&lt;/li>
&lt;li>The panel and two-dimensional plotting functionality has been added in [Example 2: 2D Plotting]
(/tutorials/thirdparty/matplotlib/2dplotting).&lt;/li>
&lt;/ul>
&lt;h2 id="steps-to-do">Steps to do&lt;/h2>
&lt;p>At first, we will extend the panel: Open your &lt;code>BaseNetwork&lt;/code> macro module within an empty MeVisLab workspace and select the .script file from its related files.&lt;/p></description></item><item><title>Example 4: 3D Plotting</title><link>https://mevislab.github.io/examples/pull/116/tutorials/thirdparty/matplotlib/3dplotting/</link><pubDate>Wed, 31 May 2023 00:00:00 +0000</pubDate><guid>https://mevislab.github.io/examples/pull/116/tutorials/thirdparty/matplotlib/3dplotting/</guid><description>&lt;h1 id="example-4-3d-plotting">Example 4: 3D Plotting&lt;/h1>
&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;p>In this tutorial, we will equip the macro module we created in the &lt;a href="https://mevislab.github.io/examples/pull/116/tutorials/thirdparty/matplotlib/modulesetup">Example 1: Module Setup&lt;/a> and later on adapted by enabling it to plot grayscale distributions of single slices and sequences in 2D in &lt;a href="https://mevislab.github.io/examples/pull/116/tutorials/thirdparty/matplotlib/2dplotting">Example 2: 2D Plotting&lt;/a> with a three dimensional plotting functionality.&lt;/p>
&lt;h2 id="steps-to-do">Steps to do&lt;/h2>
&lt;p>The fields and commands needed have already been prepared in the second tutorial. We will just have to modify our .py file a little to make them usable. Integrate the following code into your .py file and import numpy.&lt;/p></description></item><item><title>Tips and Tricks</title><link>https://mevislab.github.io/examples/pull/116/tutorials/shorts/</link><pubDate>Wed, 29 Nov 2023 00:00:00 +0000</pubDate><guid>https://mevislab.github.io/examples/pull/116/tutorials/shorts/</guid><description>&lt;h1 id="mevislab-tips-and-tricks">MeVisLab Tips and Tricks&lt;/h1>
&lt;p>This chapter shows some features and functionalities which are helpful but do not provide its own tutorial.&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://mevislab.github.io/examples/pull/116/tutorials/shorts#shortcuts">Keyboard Shortcuts&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://mevislab.github.io/examples/pull/116/tutorials/shorts#snippets">Using Snippets&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://mevislab.github.io/examples/pull/116/tutorials/shorts#scriptingassistant">Scripting Assistant&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://mevislab.github.io/examples/pull/116/tutorials/shorts#user_scripts">User Scripts&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://mevislab.github.io/examples/pull/116/tutorials/shorts#mlimagestate">Show status of module in- and output&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://mevislab.github.io/examples/pull/116/tutorials/shorts#modulesuggest">Module suggestion of module in- and output&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="shortcuts">Keyboard Shortcuts&lt;/h2>
&lt;p>This is a collection of useful keyboard shortcuts in MeVisLab, hopefully it grows continuously.&lt;/p>
&lt;table class="table table-striped">
 &lt;thead>
 &lt;tr>
 &lt;th>Shortcut&lt;/th>
 &lt;th>Functionality&lt;/th>
 &lt;/tr>
 &lt;/thead>
 &lt;tbody>
 &lt;tr>
 &lt;td>
 
 &lt;kbd>
 
 
 
 
 CTRL
 &lt;/kbd>
 +
 &lt;kbd>
 
 
 
 
 1
 &lt;/kbd>&lt;/td>
 &lt;td>Automatically arrange selection of modules / in the current network&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>
 
 &lt;kbd>
 
 
 
 
 CTRL
 &lt;/kbd>
 +
 &lt;kbd>
 
 
 
 
 2
 &lt;/kbd>&lt;/td>
 &lt;td>Open most recent network file&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>
 
 &lt;kbd>
 
 
 
 
 CTRL
 &lt;/kbd>
 +
 &lt;kbd>
 
 
 
 
 3
 &lt;/kbd>&lt;/td>
 &lt;td>Run most recent test case (extremely useful for developers)&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>
 
 &lt;kbd>
 
 
 
 
 CTRL
 &lt;/kbd>
 +
 &lt;kbd>
 
 
 
 
 A
 &lt;/kbd> then 
 
 &lt;kbd>
 
 
 
 
 CTRL
 &lt;/kbd>
 +
 &lt;kbd>
 
 
 
 
 1
 &lt;/kbd>&lt;/td>
 &lt;td>Layout network&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>
 
 &lt;kbd>
 
 
 
 
 CTRL
 &lt;/kbd>
 +
 &lt;kbd>
 
 
 
 
 A
 &lt;/kbd> then 
 
 &lt;kbd>
 
 
 
 
 TAB
 &lt;/kbd>&lt;/td>
 &lt;td>Layout .script file (in MATE)&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>
 
 &lt;kbd>
 
 
 
 
 CTRL
 &lt;/kbd>
 +
 &lt;kbd>
 
 
 
 
 D
 &lt;/kbd>&lt;/td>
 &lt;td>Duplicate currently selected module (including all field values)&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>
 
 &lt;kbd>
 
 
 
 
 CTRL
 &lt;/kbd> and Left Mouse 

&lt;img width="22px" src="https://mevislab.github.io/examples/pull/116/images/lmb.svg" alt="Left Mouse Button" />


 or Middle Mouse Button 



&lt;img width="22px" src="https://mevislab.github.io/examples/pull/116/images/mmb.svg" alt="Middle Mouse Button / Mouse Wheel" />
&lt;/td>
 &lt;td>Show Internal Network&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>
 
 &lt;kbd>
 
 
 
 
 SPACE
 &lt;/kbd>&lt;/td>
 &lt;td>Show hidden outputs of the currently selected module&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>
 
 &lt;kbd>
 
 
 
 
 CTRL
 &lt;/kbd>
 +
 &lt;kbd>
 
 
 
 
 ALT
 &lt;/kbd>
 +
 &lt;kbd>
 
 
 
 
 T
 &lt;/kbd>&lt;/td>
 &lt;td>Start test center&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>
 
 &lt;kbd>
 
 
 
 
 CTRL
 &lt;/kbd>
 +
 &lt;kbd>
 
 
 
 
 K
 &lt;/kbd>&lt;/td>
 &lt;td>Restart MeVisLab with current network(s)&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>
 
 &lt;kbd>
 
 
 
 
 CTRL
 &lt;/kbd>
 +
 &lt;kbd>
 
 
 
 
 R
 &lt;/kbd>&lt;/td>
 &lt;td>Run script file with the same name of your network file if available in the same directory.&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>
 
 &lt;kbd>
 
 
 
 
 ALT
 &lt;/kbd> Double-click 

&lt;img width="22px" src="https://mevislab.github.io/examples/pull/116/images/lmb.svg" alt="Left Mouse Button" />


 on a module&lt;/td>
 &lt;td>Open automatic panel of the module.&lt;/td>
 &lt;/tr>
 &lt;/tbody>
&lt;/table>
&lt;h2 id="snippets">Using Snippets&lt;/h2>
&lt;div class="alert alert-secondary d-flex align-items-center" role="alert">
 &lt;div>
 &lt;img width="100px" src="https://mevislab.github.io/examples/pull/116/images/youtube.svg" />&amp;nbsp;&amp;nbsp;&lt;a href="https://www.youtube.com/watch?v=xX7wJiyfxhA" target="_blank">&lt;img width="100px" src="https://img.youtube.com/vi/xX7wJiyfxhA/0.jpg" />&lt;/a>&amp;nbsp;&amp;nbsp;&amp;nbsp;This example is also available on &lt;a href="https://www.youtube.com/watch?v=xX7wJiyfxhA" target="_blank">YouTube&lt;/a>.
 &lt;/div>
&lt;/div>
&lt;p>Sometimes you have to create the same network over and over again &amp;ndash; for example, to quickly preview DICOM files. Generally, you will at least add one module to load and another module to display your images. Sometimes you may also want to view the DICOM header data. A network you possibly generate whenever opening DICOM files will be the following:&lt;/p></description></item></channel></rss>