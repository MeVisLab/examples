<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Advanced on MeVisLab Examples</title><link>https://mevislab.github.io/examples/pull/119/tags/advanced/</link><description>Recent content in Advanced on MeVisLab Examples</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Tue, 03 Jun 2025 00:00:00 +0000</lastBuildDate><atom:link href="https://mevislab.github.io/examples/pull/119/tags/advanced/index.xml" rel="self" type="application/rss+xml"/><item><title>Example 2.5.2: Module interactions via Python scripting</title><link>https://mevislab.github.io/examples/pull/119/tutorials/basicmechanisms/macromodules/scriptingexample2/</link><pubDate>Wed, 15 Jun 2022 08:58:44 +0200</pubDate><guid>https://mevislab.github.io/examples/pull/119/tutorials/basicmechanisms/macromodules/scriptingexample2/</guid><description>&lt;h1 id="example-252-module-interactions-via-python-scripting">Example 2.5.2: Module interactions via Python scripting&lt;/h1>
&lt;div class="alert alert-secondary d-flex align-items-center" role="alert">
 &lt;div>
 &lt;img width="100px" src="https://mevislab.github.io/examples/pull/119/images/youtube.svg" />&amp;nbsp;&amp;nbsp;&lt;a href="https://www.youtube.com/watch?v=hGq6vA7Ll9Q" target="_blank">&lt;img width="100px" src="https://img.youtube.com/vi/hGq6vA7Ll9Q/0.jpg" />&lt;/a>&amp;nbsp;&amp;nbsp;&amp;nbsp;This example is also available on &lt;a href="https://www.youtube.com/watch?v=hGq6vA7Ll9Q" target="_blank">YouTube&lt;/a>.
 &lt;/div>
&lt;/div>
&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;p>In this example, you will learn how to add Python scripting to your User Interface. The network used in &lt;a href="tutorials/dataobjects/contours/contourexample5/">Chapter V&lt;/a> will be used for creating the macro module.&lt;/p>
&lt;h2 id="steps-to-do">Steps to do&lt;/h2>
&lt;h3 id="creating-the-macro-module">Creating the macro module&lt;/h3>
&lt;p>First, we condense the example network into a macro module and then we create a panel for that module. To create a macro module use the
Project Wizard, which you find under &lt;i>[
 
 File
 &amp;rarr; 
 Run Project Wizard
]&lt;/i>. Select
&lt;em>Macro module&lt;/em> and press &lt;em>Run&lt;/em>.&lt;/p></description></item><item><title>Example 3: Creating a simple application</title><link>https://mevislab.github.io/examples/pull/119/tutorials/basicmechanisms/macromodules/viewerexample/</link><pubDate>Wed, 15 Jun 2022 08:58:44 +0200</pubDate><guid>https://mevislab.github.io/examples/pull/119/tutorials/basicmechanisms/macromodules/viewerexample/</guid><description>&lt;h1 id="example-3-creating-a-simple-application">Example 3: Creating a simple application&lt;/h1>
&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;p>In the previous examples, you already learned how to create macro modules, user interfaces and how to interact with your UI via Python scripting.&lt;/p>
&lt;p>In this example, you will learn how to create a simple Prototype application in MeVisLab including a User Interface with 2D and 3D viewer. You will learn how to implement field listeners and react on events.&lt;/p>
&lt;h2 id="steps-to-do">Steps to do&lt;/h2>
&lt;h3 id="create-your-network">Create your network&lt;/h3>
&lt;p>Start with an empty network and add the Module &lt;code>ImageLoad&lt;/code> to your workspace. Then add a &lt;code>View2D&lt;/code> and &lt;code>View3D&lt;/code> to your workspace and connect the modules as seen below.&lt;/p></description></item><item><title>Example 4: Installing additional Python packages using the PythonPip module</title><link>https://mevislab.github.io/examples/pull/119/tutorials/basicmechanisms/macromodules/pythonpip/</link><pubDate>Tue, 16 May 2023 00:00:00 +0000</pubDate><guid>https://mevislab.github.io/examples/pull/119/tutorials/basicmechanisms/macromodules/pythonpip/</guid><description>&lt;h1 id="example-4-installing-additional-python-packages-using-the-pythonpip-module">Example 4: Installing additional Python packages using the PythonPip module&lt;/h1>
&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;p>MeVisLab already comes with a lot of integrated third party software tools ready to use. Nevertheless it might be necessary to install additional Python packages for your specific needs. This example will walk you through the process of adding packages through usage of/using the &lt;code>PythonPip&lt;/code> module.&lt;/p>
&lt;p>The &lt;code>PythonPip&lt;/code> module allows to work with the Python package manager pip. It can be used to install Python packages into the site-packages of the MeVisLab Python installation.&lt;/p></description></item><item><title>Example 5: Debugging Python in MATE</title><link>https://mevislab.github.io/examples/pull/119/tutorials/basicmechanisms/macromodules/pythondebugger/</link><pubDate>Thu, 09 Jan 2025 00:00:00 +0000</pubDate><guid>https://mevislab.github.io/examples/pull/119/tutorials/basicmechanisms/macromodules/pythondebugger/</guid><description>&lt;h1 id="example-5-debugging-python-files-in-mate">Example 5: Debugging Python files in MATE&lt;/h1>
&lt;div class="alert alert-secondary d-flex align-items-center" role="alert">
 &lt;div>
 &lt;img width="100px" src="https://mevislab.github.io/examples/pull/119/images/youtube.svg" />&amp;nbsp;&amp;nbsp;&lt;a href="https://www.youtube.com/watch?v=ccLDQUrlzjU" target="_blank">&lt;img width="100px" src="https://img.youtube.com/vi/ccLDQUrlzjU/0.jpg" />&lt;/a>&amp;nbsp;&amp;nbsp;&amp;nbsp;This example is also available on &lt;a href="https://www.youtube.com/watch?v=ccLDQUrlzjU" target="_blank">YouTube&lt;/a>.
 &lt;/div>
&lt;/div>
&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;p>MeVisLab provides the powerful integrated text editor MATE. By default, MATE is used to create/edit files like Python scripts. In this tutorial, we want to show you how to debug Python scripts in MeVisLab.&lt;/p>
&lt;h2 id="prepare-your-network">Prepare your network&lt;/h2>
&lt;p>We are using a very simple network of pre-defined modules, but you can also debug your self-written Python scripts. Add a &lt;code>LocalImage&lt;/code> module to your workspace and connect it to a &lt;code>DicomTagBrowser&lt;/code> module. The &lt;code>DicomTagBrowser&lt;/code> module shows a table containing the DICOM tags of your currently opened file.&lt;/p></description></item><item><title>Example 7: Creating your own ItemModel by using the ItemModelView</title><link>https://mevislab.github.io/examples/pull/119/tutorials/basicmechanisms/macromodules/itemmodelview/</link><pubDate>Tue, 03 Jun 2025 00:00:00 +0000</pubDate><guid>https://mevislab.github.io/examples/pull/119/tutorials/basicmechanisms/macromodules/itemmodelview/</guid><description>&lt;h1 id="example-7-creating-your-own-itemmodel-by-using-the-itemmodelview">Example 7: Creating your own ItemModel by using the ItemModelView&lt;/h1>
&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;p>In this example, we will show how to use the &lt;em>ItemModelView&lt;/em> MDL control to represent an abstract hierarchical item model with generically named attributes. You will see how to select the displayed attributes in the resulting table and how to interact with this table.&lt;/p>
&lt;p>We create a macro module that receives an input image and then shows some selected DICOM attributes of this patient in our own &lt;em>ItemModelView&lt;/em>.&lt;/p></description></item><item><title>Example 4: Post Effects in Open Inventor</title><link>https://mevislab.github.io/examples/pull/119/tutorials/openinventor/posteffectsinopeninventor/</link><pubDate>Fri, 03 May 2024 10:52:33 +0200</pubDate><guid>https://mevislab.github.io/examples/pull/119/tutorials/openinventor/posteffectsinopeninventor/</guid><description>&lt;h1 id="example-4-post-effects-in-open-inventor">Example 4: Post Effects in Open Inventor&lt;/h1>
&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;p>Up to this point, we practiced constructing Open Inventor scenes and placed three-dimensional Open Inventor objects of different colors and shapes within them.
In this tutorial, we will go over the steps to add shadows to our 3D-objects, make them glow and vary their opacity to make them transparent. We will also incorporate WEMs from multi-frame DICOMs and render them as scene objects to see how different post effects can be used on them.&lt;/p></description></item><item><title>Example 6: MeVis Path Tracer</title><link>https://mevislab.github.io/examples/pull/119/tutorials/visualization/visualizationexample6/</link><pubDate>Thu, 23 Feb 2023 00:00:00 +0000</pubDate><guid>https://mevislab.github.io/examples/pull/119/tutorials/visualization/visualizationexample6/</guid><description>&lt;h1 id="example-6-mevis-path-tracer">Example 6: MeVis Path Tracer&lt;/h1>
&lt;div class="alert alert-secondary d-flex align-items-center" role="alert">
 &lt;div>
 &lt;img width="100px" src="https://mevislab.github.io/examples/pull/119/images/youtube.svg" />&amp;nbsp;&amp;nbsp;&lt;a href="https://youtube.com/shorts/U23QH2Pvwew" target="_blank">&lt;img width="100px" src="https://img.youtube.com/vi/U23QH2Pvwew/0.jpg" />&lt;/a>&amp;nbsp;&amp;nbsp;&amp;nbsp;We have a Short video showing the possibilities of the &lt;b>MeVis Path Tracer&lt;/b> on &lt;a href="https://youtube.com/shorts/U23QH2Pvwew" target="_blank">YouTube&lt;/a>.
 &lt;/div>
&lt;/div>
&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;p>The MeVis Path Tracer offers a Monte Carlo Path Tracing framework running on CUDA GPUs. It offers photorealistic rendering of volumes and meshes, physically based lightning with area lights and soft shadows and fully integrates into MeVisLab Open Inventor (camera, depth buffer, clipping planes, etc.).&lt;/p>

&lt;svg xmlns="http://www.w3.org/2000/svg" style="display: none;">
 &lt;symbol id="check-fill" fill="currentColor" viewBox="0 0 16 16">
 &lt;path d="M16 8A8 8 0 1 1 0 8a8 8 0 0 1 16 0zm-3.97-3.03a.75.75 0 0 0-1.08.022L7.477 9.417 5.384 7.323a.75.75 0 0 0-1.06 1.06L6.97 11.03a.75.75 0 0 0 1.079-.02l3.992-4.99a.75.75 0 0 0-.01-1.05z"/>
 &lt;/symbol>
 &lt;symbol id="info-fill" fill="currentColor" viewBox="0 0 16 16">
 &lt;path d="M8 16A8 8 0 1 0 8 0a8 8 0 0 0 0 16zm.93-9.412-1 4.705c-.07.34.029.533.304.533.194 0 .487-.07.686-.246l-.088.416c-.287.346-.92.598-1.465.598-.703 0-1.002-.422-.808-1.319l.738-3.468c.064-.293.006-.399-.287-.47l-.451-.081.082-.381 2.29-.287zM8 5.5a1 1 0 1 1 0-2 1 1 0 0 1 0 2z"/>
 &lt;/symbol>
 &lt;symbol id="warning-fill" fill="currentColor" viewBox="0 0 16 16">
 &lt;path d="M8.982 1.566a1.13 1.13 0 0 0-1.96 0L.165 13.233c-.457.778.091 1.767.98 1.767h13.713c.889 0 1.438-.99.98-1.767L8.982 1.566zM8 5c.535 0 .954.462.9.995l-.35 3.507a.552.552 0 0 1-1.1 0L7.1 5.995A.905.905 0 0 1 8 5zm.002 6a1 1 0 1 1 0 2 1 1 0 0 1 0-2z"/>
 &lt;/symbol>
 &lt;symbol id="danger-fill" fill="currentColor" viewBox="0 0 16 16">
 &lt;path d="M8.982 1.566a1.13 1.13 0 0 0-1.96 0L.165 13.233c-.457.778.091 1.767.98 1.767h13.713c.889 0 1.438-.99.98-1.767L8.982 1.566zM8 5c.535 0 .954.462.9.995l-.35 3.507a.552.552 0 0 1-1.1 0L7.1 5.995A.905.905 0 0 1 8 5zm.002 6a1 1 0 1 1 0 2 1 1 0 0 1 0-2z"/>
 &lt;/symbol>
&lt;/svg>

&lt;div class="alert alert-primary alert-info d-flex align-items-center" role="alert">
 &lt;svg class="bi flex-shrink-0 me-2" width="24" height="24" role="img" aria-label="Extra Infos:">&lt;use xlink:href="#info-fill"/>&lt;/svg>
 &lt;div>
 &lt;b>Extra Infos:&amp;nbsp;&lt;/b>
 CUDA is a parallel computing platform and programming model created by NVIDIA. For further information, see &lt;a href="https://blogs.nvidia.com/blog/2012/09/10/what-is-cuda-2/" target="_blank" rel="noopener">NVIDIA website&lt;/a>.
 &lt;/div>
&lt;/div>
&lt;div class="container">
 
 
 &lt;div class="row row-cols-1 row-cols-sm-2 row-cols-md-5">
 &lt;div class="col mt-5">
 &lt;p class="page-image">
 &lt;a data-modal="bs-lightbox" href="https://mevislab.github.io/examples/pull/119/images/tutorials/visualization/pathtracer/PathTracer1.png" title="PathTracer1">&lt;img src="https://mevislab.github.io/examples/pull/119/images/tutorials/visualization/pathtracer/PathTracer1.png" class="img-fluid" alt="PathTracer1">&lt;/a>
 &lt;figcaption class="figure-caption">PathTracer1&lt;/figcaption>
 &lt;/p></description></item><item><title>Example 6.1: Volume Rendering vs. Path Tracer</title><link>https://mevislab.github.io/examples/pull/119/tutorials/visualization/pathtracer/pathtracerexample1/</link><pubDate>Thu, 23 Feb 2023 00:00:00 +0000</pubDate><guid>https://mevislab.github.io/examples/pull/119/tutorials/visualization/pathtracer/pathtracerexample1/</guid><description>&lt;h1 id="example-61-volume-rendering-vs-path-tracer">Example 6.1: Volume Rendering vs. Path Tracer&lt;/h1>
&lt;div class="alert alert-secondary d-flex align-items-center" role="alert">
 &lt;div>
 &lt;img width="100px" src="https://mevislab.github.io/examples/pull/119/images/youtube.svg" />&amp;nbsp;&amp;nbsp;&lt;a href="https://www.youtube.com/watch?v=E0H87Cimu_M" target="_blank">&lt;img width="100px" src="https://img.youtube.com/vi/E0H87Cimu_M/0.jpg" />&lt;/a>&amp;nbsp;&amp;nbsp;&amp;nbsp;This example is also available on &lt;a href="https://www.youtube.com/watch?v=E0H87Cimu_M" target="_blank">YouTube&lt;/a>.
 &lt;/div>
&lt;/div>
&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;p>In this example you develop a network to show some differences between volume rendering and the MeVisLab Path Tracer. You will visualize the same scene using both 3D rendering techniques and some of the modules for path tracing.&lt;/p>

&lt;svg xmlns="http://www.w3.org/2000/svg" style="display: none;">
 &lt;symbol id="check-fill" fill="currentColor" viewBox="0 0 16 16">
 &lt;path d="M16 8A8 8 0 1 1 0 8a8 8 0 0 1 16 0zm-3.97-3.03a.75.75 0 0 0-1.08.022L7.477 9.417 5.384 7.323a.75.75 0 0 0-1.06 1.06L6.97 11.03a.75.75 0 0 0 1.079-.02l3.992-4.99a.75.75 0 0 0-.01-1.05z"/>
 &lt;/symbol>
 &lt;symbol id="info-fill" fill="currentColor" viewBox="0 0 16 16">
 &lt;path d="M8 16A8 8 0 1 0 8 0a8 8 0 0 0 0 16zm.93-9.412-1 4.705c-.07.34.029.533.304.533.194 0 .487-.07.686-.246l-.088.416c-.287.346-.92.598-1.465.598-.703 0-1.002-.422-.808-1.319l.738-3.468c.064-.293.006-.399-.287-.47l-.451-.081.082-.381 2.29-.287zM8 5.5a1 1 0 1 1 0-2 1 1 0 0 1 0 2z"/>
 &lt;/symbol>
 &lt;symbol id="warning-fill" fill="currentColor" viewBox="0 0 16 16">
 &lt;path d="M8.982 1.566a1.13 1.13 0 0 0-1.96 0L.165 13.233c-.457.778.091 1.767.98 1.767h13.713c.889 0 1.438-.99.98-1.767L8.982 1.566zM8 5c.535 0 .954.462.9.995l-.35 3.507a.552.552 0 0 1-1.1 0L7.1 5.995A.905.905 0 0 1 8 5zm.002 6a1 1 0 1 1 0 2 1 1 0 0 1 0-2z"/>
 &lt;/symbol>
 &lt;symbol id="danger-fill" fill="currentColor" viewBox="0 0 16 16">
 &lt;path d="M8.982 1.566a1.13 1.13 0 0 0-1.96 0L.165 13.233c-.457.778.091 1.767.98 1.767h13.713c.889 0 1.438-.99.98-1.767L8.982 1.566zM8 5c.535 0 .954.462.9.995l-.35 3.507a.552.552 0 0 1-1.1 0L7.1 5.995A.905.905 0 0 1 8 5zm.002 6a1 1 0 1 1 0 2 1 1 0 0 1 0-2z"/>
 &lt;/symbol>
&lt;/svg>

&lt;div class="alert alert-primary alert-warning d-flex align-items-center" role="alert">
 &lt;svg class="bi flex-shrink-0 me-2" width="24" height="24" role="img" aria-label="Attention:">&lt;use xlink:href="#warning-fill"/>&lt;/svg>
 &lt;div>
 &lt;b>Attention:&amp;nbsp;&lt;/b>
 &lt;p>The MeVis Path Tracer requires an NVIDIA graphics card with CUDA support. In order to check your hardware, open MeVisLab and add a &lt;code>SoPathTracer&lt;/code> module to your workspace. You will see a message if your hardware does not support CUDA:&lt;/p></description></item><item><title>Example 6.2: Visualization using Path Tracer</title><link>https://mevislab.github.io/examples/pull/119/tutorials/visualization/pathtracer/pathtracerexample2/</link><pubDate>Tue, 02 Jan 2024 00:00:00 +0000</pubDate><guid>https://mevislab.github.io/examples/pull/119/tutorials/visualization/pathtracer/pathtracerexample2/</guid><description>&lt;h1 id="example-62-visualization-using-sopathtracer">Example 6.2: Visualization using SoPathTracer&lt;/h1>
&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;p>In this tutorial, we will explain the basics of using the &lt;code>SoPathTracer&lt;/code> module in MeVisLab. You will learn how to create a scene, assign materials, add light sources, and configure the PathTracer to generate enhanced renderings.&lt;/p>

&lt;svg xmlns="http://www.w3.org/2000/svg" style="display: none;">
 &lt;symbol id="check-fill" fill="currentColor" viewBox="0 0 16 16">
 &lt;path d="M16 8A8 8 0 1 1 0 8a8 8 0 0 1 16 0zm-3.97-3.03a.75.75 0 0 0-1.08.022L7.477 9.417 5.384 7.323a.75.75 0 0 0-1.06 1.06L6.97 11.03a.75.75 0 0 0 1.079-.02l3.992-4.99a.75.75 0 0 0-.01-1.05z"/>
 &lt;/symbol>
 &lt;symbol id="info-fill" fill="currentColor" viewBox="0 0 16 16">
 &lt;path d="M8 16A8 8 0 1 0 8 0a8 8 0 0 0 0 16zm.93-9.412-1 4.705c-.07.34.029.533.304.533.194 0 .487-.07.686-.246l-.088.416c-.287.346-.92.598-1.465.598-.703 0-1.002-.422-.808-1.319l.738-3.468c.064-.293.006-.399-.287-.47l-.451-.081.082-.381 2.29-.287zM8 5.5a1 1 0 1 1 0-2 1 1 0 0 1 0 2z"/>
 &lt;/symbol>
 &lt;symbol id="warning-fill" fill="currentColor" viewBox="0 0 16 16">
 &lt;path d="M8.982 1.566a1.13 1.13 0 0 0-1.96 0L.165 13.233c-.457.778.091 1.767.98 1.767h13.713c.889 0 1.438-.99.98-1.767L8.982 1.566zM8 5c.535 0 .954.462.9.995l-.35 3.507a.552.552 0 0 1-1.1 0L7.1 5.995A.905.905 0 0 1 8 5zm.002 6a1 1 0 1 1 0 2 1 1 0 0 1 0-2z"/>
 &lt;/symbol>
 &lt;symbol id="danger-fill" fill="currentColor" viewBox="0 0 16 16">
 &lt;path d="M8.982 1.566a1.13 1.13 0 0 0-1.96 0L.165 13.233c-.457.778.091 1.767.98 1.767h13.713c.889 0 1.438-.99.98-1.767L8.982 1.566zM8 5c.535 0 .954.462.9.995l-.35 3.507a.552.552 0 0 1-1.1 0L7.1 5.995A.905.905 0 0 1 8 5zm.002 6a1 1 0 1 1 0 2 1 1 0 0 1 0-2z"/>
 &lt;/symbol>
&lt;/svg>

&lt;div class="alert alert-primary alert-warning d-flex align-items-center" role="alert">
 &lt;svg class="bi flex-shrink-0 me-2" width="24" height="24" role="img" aria-label="Attention:">&lt;use xlink:href="#warning-fill"/>&lt;/svg>
 &lt;div>
 &lt;b>Attention:&amp;nbsp;&lt;/b>
 &lt;p>The MeVis Path Tracer requires an NVIDIA graphics card with CUDA support. In order to check your hardware, open MeVisLab and add a &lt;code>SoPathTracer&lt;/code> module to your workspace. You will see a message if your hardware does not support CUDA:&lt;/p></description></item><item><title>Example 8: Vessel Segmentation using SoVascularSystem</title><link>https://mevislab.github.io/examples/pull/119/tutorials/visualization/visualizationexample8/</link><pubDate>Fri, 08 Dec 2023 00:00:00 +0000</pubDate><guid>https://mevislab.github.io/examples/pull/119/tutorials/visualization/visualizationexample8/</guid><description>&lt;h1 id="TutorialVisualizationExample8">Example 8: Vessel Segmentation using SoVascularSystem&lt;/h1>
&lt;div class="alert alert-secondary d-flex align-items-center" role="alert">
 &lt;div>
 &lt;img width="100px" src="https://mevislab.github.io/examples/pull/119/images/youtube.svg" />&amp;nbsp;&amp;nbsp;&lt;a href="https://www.youtube.com/watch?v=tEwEgI_3ZGM" target="_blank">&lt;img width="100px" src="https://img.youtube.com/vi/tEwEgI_3ZGM/0.jpg" />&lt;/a>&amp;nbsp;&amp;nbsp;&amp;nbsp;This example is also available on &lt;a href="https://www.youtube.com/watch?v=tEwEgI_3ZGM" target="_blank">YouTube&lt;/a>.
 &lt;/div>
&lt;/div>
&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;p>In this tutorial, we are using an input mask to create a vessel centerline using the &lt;code>DtfSkeletonization&lt;/code> module and visualize the vascular structures in 3D using the &lt;code>SoVascularSystem&lt;/code> module. The second part uses the distance between centerline and surface of the vessel structures to color thin vessels red and thick vessels green.&lt;/p>
&lt;h2 id="steps-to-do">Steps to do&lt;/h2>
&lt;h3 id="develop-your-network">Develop your network&lt;/h3>
&lt;p>Load the example &lt;a href="https://mevislab.github.io/examples/pull/119/examples/visualization/example8/EditedImage.mlimage">tree mask&lt;/a> by using the &lt;code>LocalImage&lt;/code> module. Connect the output to a &lt;code>DtfSkeletonization&lt;/code> module as seen below. The initial output of the &lt;code>DtfSkeletonization&lt;/code> module is empty. Press the &lt;em>Update&lt;/em> button to calculate the skeleton and the erosion distances.&lt;/p></description></item><item><title>Example 9: Creating Dynamic 3D Animations using AnimationRecorder</title><link>https://mevislab.github.io/examples/pull/119/tutorials/visualization/visualizationexample9/</link><pubDate>Mon, 08 Jan 2024 00:00:00 +0000</pubDate><guid>https://mevislab.github.io/examples/pull/119/tutorials/visualization/visualizationexample9/</guid><description>&lt;h1 id="TutorialVisualizationExample9">Example 9: Creating Dynamic 3D Animations using AnimationRecorder&lt;/h1>
&lt;div class="alert alert-secondary d-flex align-items-center" role="alert">
 &lt;div>
 &lt;img width="100px" src="https://mevislab.github.io/examples/pull/119/images/youtube.svg" />&amp;nbsp;&amp;nbsp;&lt;a href="https://www.youtube.com/watch?v=Sxfwwm6BGnA" target="_blank">&lt;img width="100px" src="https://img.youtube.com/vi/Sxfwwm6BGnA/0.jpg" />&lt;/a>&amp;nbsp;&amp;nbsp;&amp;nbsp;This example is also available on &lt;a href="https://www.youtube.com/watch?v=Sxfwwm6BGnA" target="_blank">YouTube&lt;/a>.
 &lt;/div>
&lt;/div>
&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;p>In this tutorial, we are using the &lt;code>AnimationRecorder&lt;/code> module to generate dynamic and visually appealing animations of our 3D scenes. We will be recording a video of the results of our previous project, particularly the detailed visualizations of the muscles, bones and blood vessels created using &lt;code>PathTracer&lt;/code>.&lt;/p>
&lt;h2 id="steps-to-do">Steps to do&lt;/h2>
&lt;p>Open the network and files of &lt;a href="https://mevislab.github.io/examples/pull/119/tutorials/visualization/pathtracer/pathtracerexample2/">Example 6.2&lt;/a>, add a &lt;code>SoSeparator&lt;/code> module and an &lt;code>AnimationRecorder&lt;/code> module to your workspace and connect them as shown below.&lt;/p></description></item><item><title>Example 4: Subtract 3D objects</title><link>https://mevislab.github.io/examples/pull/119/tutorials/image_processing/image_processing4/</link><pubDate>Wed, 15 Jun 2022 08:56:33 +0200</pubDate><guid>https://mevislab.github.io/examples/pull/119/tutorials/image_processing/image_processing4/</guid><description>&lt;h1 id="example-4-subtract-3d-objects">Example 4: Subtract 3D objects&lt;/h1>
&lt;div class="alert alert-secondary d-flex align-items-center" role="alert">
 &lt;div>
 &lt;img width="100px" src="https://mevislab.github.io/examples/pull/119/images/youtube.svg" />&amp;nbsp;&amp;nbsp;&lt;a href="https://www.youtube.com/watch?v=VdvErVvoq2k" target="_blank">&lt;img width="100px" src="https://img.youtube.com/vi/VdvErVvoq2k/0.jpg" />&lt;/a>&amp;nbsp;&amp;nbsp;&amp;nbsp;This example is also available on &lt;a href="https://www.youtube.com/watch?v=VdvErVvoq2k" target="_blank">YouTube&lt;/a>.
 &lt;/div>
&lt;/div>
&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;p>In this example, we load an image and render it as &lt;code>WEMIsoSurface&lt;/code>. Then we create a 3-dimensional &lt;code>SoSphere&lt;/code> and subtract the sphere from the initial WEM.&lt;/p>
&lt;h2 id="steps-to-do">Steps to do&lt;/h2>
&lt;h3 id="develop-your-network">Develop your network&lt;/h3>
&lt;p>Add a &lt;code>LocalImage&lt;/code> module to your workspace and select load &lt;em>$(DemoDataPath)/BrainMultiModal/ProbandT1.dcm&lt;/em>. Add a &lt;code>WEMIsoSurface&lt;/code>, a &lt;code>SoWEMRenderer&lt;/code>, a &lt;code>SoBackground&lt;/code> and a &lt;code>SoExaminerViewer&lt;/code> module and connect them as seen below. Make sure to configure the &lt;code>WEMIsoSurface&lt;/code> to use a &lt;em>Iso Min. Value&lt;/em> of 420 and a &lt;em>Voxel Sampling&lt;/em> 1.&lt;/p></description></item><item><title>Example 5: Clip Planes</title><link>https://mevislab.github.io/examples/pull/119/tutorials/image_processing/image_processing5/</link><pubDate>Wed, 15 Jun 2022 08:56:33 +0200</pubDate><guid>https://mevislab.github.io/examples/pull/119/tutorials/image_processing/image_processing5/</guid><description>&lt;h1 id="example-5-clip-planes">Example 5: Clip Planes&lt;/h1>
&lt;div class="alert alert-secondary d-flex align-items-center" role="alert">
 &lt;div>
 &lt;img width="100px" src="https://mevislab.github.io/examples/pull/119/images/youtube.svg" />&amp;nbsp;&amp;nbsp;&lt;a href="https://www.youtube.com/watch?v=Lmt7helBl0E" target="_blank">&lt;img width="100px" src="https://img.youtube.com/vi/Lmt7helBl0E/0.jpg" />&lt;/a>&amp;nbsp;&amp;nbsp;&amp;nbsp;This example is also available on &lt;a href="https://www.youtube.com/watch?v=Lmt7helBl0E" target="_blank">YouTube&lt;/a>.
 &lt;/div>
&lt;/div>
&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;p>In this example, we are using the &lt;code>SoGVRDrawOnPlane&lt;/code> module to define the currently visible slice from a 2D view as a clip plane in 3D.&lt;/p>
&lt;h2 id="steps-to-do">Steps to do&lt;/h2>
&lt;h3 id="develop-your-network">Develop your network&lt;/h3>
&lt;p>First we need to develop the network to scroll through the slices. Add a &lt;code>LocalImage&lt;/code> module to your workspace and select the file &lt;em>ProbandT1&lt;/em> from MeVisLab demo data.&lt;/p></description></item><item><title>Example 6: DICOM RT Visualization in MeVisLab – RTSTRUCT and RTDOSE Workflow</title><link>https://mevislab.github.io/examples/pull/119/tutorials/image_processing/image_processing6/</link><pubDate>Mon, 05 May 2025 00:00:00 +0000</pubDate><guid>https://mevislab.github.io/examples/pull/119/tutorials/image_processing/image_processing6/</guid><description>&lt;h1 id="example-6-dicom-rt-visualization-in-mevislab--rtstruct-and-rtdose-workflow">Example 6: DICOM RT Visualization in MeVisLab – RTSTRUCT and RTDOSE Workflow&lt;/h1>
&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;p>This tutorial explains how to load and visualize DICOM RT (Radiotherapy) data in MeVisLab. You will learn how to:&lt;/p>
&lt;ul>
&lt;li>Load CT and related RTSTRUCT data.&lt;/li>
&lt;li>Visualize RTSTRUCTs as colored CSOs.&lt;/li>
&lt;li>Show labels next to each RTSTRUCT contour.&lt;/li>
&lt;li>Visualize RTDOSE as a semi-transparent colored overlay.&lt;/li>
&lt;/ul>
&lt;p>&lt;em>DICOM RT&lt;/em> files are essential in radiotherapy treatment planning.&lt;/p>
&lt;p>They include:&lt;/p>
&lt;ul>
&lt;li>&lt;strong>RT Structure Set&lt;/strong>, containing information related to patient anatomy, for example structures, markers, and isocenters. These entities are typically identified on devices such as CT scanners, physical or virtual simulation workstations, or treatment planning systems.&lt;/li>
&lt;li>&lt;strong>RT Plan&lt;/strong>, containing geometric and dosimetric data specifying a course of external beam and/or brachytherapy treatment, for example beam angles, collimator openings, beam modifiers, and brachytherapy channel and source specifications. The RT Plan entity may be created by a simulation workstation, and subsequently enriched by a treatment planning system before being passed on to a record and verify system or treatment device. An instance of the RT Plan object usually references an RT Structure Set instance to define a coordinate system and set of patient structures.&lt;/li>
&lt;li>&lt;strong>RT Dose&lt;/strong>, containing dose data generated by a treatment planning system in one or more of several formats: three-dimensional dose data, isodose curves, DVHs, or dose points.&lt;/li>
&lt;/ul>
&lt;p>Additional objects not used in this tutorial are:&lt;/p></description></item><item><title>Contour Example 7: Using the CSOListContainer</title><link>https://mevislab.github.io/examples/pull/119/tutorials/dataobjects/contours/contourexample7/</link><pubDate>Thu, 01 Aug 2024 00:00:00 +0000</pubDate><guid>https://mevislab.github.io/examples/pull/119/tutorials/dataobjects/contours/contourexample7/</guid><description>&lt;h1 id="TutorialContoursExample7">Contour Example 7: Using the CSOListContainer&lt;/h1>
&lt;div class="alert alert-secondary d-flex align-items-center" role="alert">
 &lt;div>
 &lt;img width="100px" src="https://mevislab.github.io/examples/pull/119/images/youtube.svg" />&amp;nbsp;&amp;nbsp;&lt;a href="https://www.youtube.com/watch?v=4quJcvvt-GQ" target="_blank">&lt;img width="100px" src="https://img.youtube.com/vi/4quJcvvt-GQ/0.jpg" />&lt;/a>&amp;nbsp;&amp;nbsp;&amp;nbsp;This example is also available on &lt;a href="https://www.youtube.com/watch?v=4quJcvvt-GQ" target="_blank">YouTube&lt;/a>.
 &lt;/div>
&lt;/div>
&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;p>In this example, we are using the module &lt;code>CSOListContainer&lt;/code> instead of the &lt;code>CSOManager&lt;/code>. The &lt;code>CSOManager&lt;/code> is a heavy weight, UI driven module. You can use it to see all of your CSOs, CSOLists and CSOGroups in the module panel. The &lt;code>CSOListContainer&lt;/code> is a light weight module with focus on Python scripting. We recommend to use this module for final application development, because Python provides much more flexibility in handling CSO objects.&lt;/p></description></item><item><title>Surface Example 5: WEM - Primitive Value Lists</title><link>https://mevislab.github.io/examples/pull/119/tutorials/dataobjects/surfaces/surfaceexample5/</link><pubDate>Wed, 15 Jun 2022 08:56:33 +0200</pubDate><guid>https://mevislab.github.io/examples/pull/119/tutorials/dataobjects/surfaces/surfaceexample5/</guid><description>&lt;h1 id="surface-example-5-wem---primitive-value-lists">Surface Example 5: WEM - Primitive Value Lists&lt;/h1>
&lt;div class="alert alert-secondary d-flex align-items-center" role="alert">
 &lt;div>
 &lt;img width="100px" src="https://mevislab.github.io/examples/pull/119/images/youtube.svg" />&amp;nbsp;&amp;nbsp;&lt;a href="https://www.youtube.com/watch?v=Rap1RY6l5Cc" target="_blank">&lt;img width="100px" src="https://img.youtube.com/vi/Rap1RY6l5Cc/0.jpg" />&lt;/a>&amp;nbsp;&amp;nbsp;&amp;nbsp;This example is also available on &lt;a href="https://www.youtube.com/watch?v=Rap1RY6l5Cc" target="_blank">YouTube&lt;/a>.
 &lt;/div>
&lt;/div>
&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;p>WEMs do not only contain the coordinates of nodes and surfaces, they can also contain additional information. These information are stored in so called &lt;em>Primitive Value Lists&lt;/em> (PVLs). Every node, every surface and every edge can contains such a list. In these lists, you can for example store the color of the node or specific patient information. These information can be used for visualization or for further statistical analysis.&lt;/p></description></item><item><title>Example 3: Iterative tests in MeVisLab with Screenshots</title><link>https://mevislab.github.io/examples/pull/119/tutorials/testing/testingexample3/</link><pubDate>Wed, 15 Jun 2022 08:56:33 +0200</pubDate><guid>https://mevislab.github.io/examples/pull/119/tutorials/testing/testingexample3/</guid><description>&lt;h1 id="example-3-iterative-tests-in-mevislab">Example 3: Iterative tests in MeVisLab&lt;/h1>
&lt;div class="alert alert-secondary d-flex align-items-center" role="alert">
 &lt;div>
 &lt;img width="100px" src="https://mevislab.github.io/examples/pull/119/images/youtube.svg" />&amp;nbsp;&amp;nbsp;&lt;a href="https://www.youtube.com/watch?v=1JidUyfz0xU" target="_blank">&lt;img width="100px" src="https://img.youtube.com/vi/1JidUyfz0xU/0.jpg" />&lt;/a>&amp;nbsp;&amp;nbsp;&amp;nbsp;This example is also available on &lt;a href="https://www.youtube.com/watch?v=1JidUyfz0xU" target="_blank">YouTube&lt;/a>.
 &lt;/div>
&lt;/div>
&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;p>In this example, you are writing an iterative test. Iterative test functions run a function for every specified input. They return a tuple consisting of the function object called and the inputs iterated over. The iterative test functions are useful if the same function should be applied to different input data. These could be input values, names of input images, etc.&lt;/p></description></item><item><title>Chapter VII: Application Development</title><link>https://mevislab.github.io/examples/pull/119/tutorials/summary/</link><pubDate>Wed, 15 Jun 2022 08:56:33 +0200</pubDate><guid>https://mevislab.github.io/examples/pull/119/tutorials/summary/</guid><description>&lt;h1 id="TutorialChapter7">MeVisLab Tutorial Chapter VII&lt;/h1>
&lt;h2 id="summary">Summary&lt;/h2>
&lt;p>This chapter will summarize all previous chapters and you will develop a whole application in MeVisLab. The complete workflow from developing a prototype to delivering your final application to your customer is explained step-by-step.&lt;/p>
&lt;p>&lt;p class="page-image">
 &lt;a data-modal="bs-lightbox" href="https://mevislab.github.io/examples/pull/119/images/tutorials/summary/Prototyping.png" title="Prototype to Product">&lt;img id="Prototype to Product" class="img-fluid rounded" src="https://mevislab.github.io/examples/pull/119/images/tutorials/summary/Prototyping.png" alt="Prototype to Product" title="Prototype to Product" />&lt;/a>
 &lt;figcaption class="figure-caption">Prototype to Product&lt;/figcaption>
&lt;/p>
&lt;/p>

&lt;svg xmlns="http://www.w3.org/2000/svg" style="display: none;">
 &lt;symbol id="check-fill" fill="currentColor" viewBox="0 0 16 16">
 &lt;path d="M16 8A8 8 0 1 1 0 8a8 8 0 0 1 16 0zm-3.97-3.03a.75.75 0 0 0-1.08.022L7.477 9.417 5.384 7.323a.75.75 0 0 0-1.06 1.06L6.97 11.03a.75.75 0 0 0 1.079-.02l3.992-4.99a.75.75 0 0 0-.01-1.05z"/>
 &lt;/symbol>
 &lt;symbol id="info-fill" fill="currentColor" viewBox="0 0 16 16">
 &lt;path d="M8 16A8 8 0 1 0 8 0a8 8 0 0 0 0 16zm.93-9.412-1 4.705c-.07.34.029.533.304.533.194 0 .487-.07.686-.246l-.088.416c-.287.346-.92.598-1.465.598-.703 0-1.002-.422-.808-1.319l.738-3.468c.064-.293.006-.399-.287-.47l-.451-.081.082-.381 2.29-.287zM8 5.5a1 1 0 1 1 0-2 1 1 0 0 1 0 2z"/>
 &lt;/symbol>
 &lt;symbol id="warning-fill" fill="currentColor" viewBox="0 0 16 16">
 &lt;path d="M8.982 1.566a1.13 1.13 0 0 0-1.96 0L.165 13.233c-.457.778.091 1.767.98 1.767h13.713c.889 0 1.438-.99.98-1.767L8.982 1.566zM8 5c.535 0 .954.462.9.995l-.35 3.507a.552.552 0 0 1-1.1 0L7.1 5.995A.905.905 0 0 1 8 5zm.002 6a1 1 0 1 1 0 2 1 1 0 0 1 0-2z"/>
 &lt;/symbol>
 &lt;symbol id="danger-fill" fill="currentColor" viewBox="0 0 16 16">
 &lt;path d="M8.982 1.566a1.13 1.13 0 0 0-1.96 0L.165 13.233c-.457.778.091 1.767.98 1.767h13.713c.889 0 1.438-.99.98-1.767L8.982 1.566zM8 5c.535 0 .954.462.9.995l-.35 3.507a.552.552 0 0 1-1.1 0L7.1 5.995A.905.905 0 0 1 8 5zm.002 6a1 1 0 1 1 0 2 1 1 0 0 1 0-2z"/>
 &lt;/symbol>
&lt;/svg>

&lt;div class="alert alert-primary alert-warning d-flex align-items-center" role="alert">
 &lt;svg class="bi flex-shrink-0 me-2" width="24" height="24" role="img" aria-label="Licensing:">&lt;use xlink:href="#warning-fill"/>&lt;/svg>
 &lt;div>
 &lt;b>Licensing:&amp;nbsp;&lt;/b>
 &lt;p>Some of the features described here will require a separate license. Building an installable executable requires the &lt;strong>MeVisLab ApplicationBuilder&lt;/strong> license. It extends the &lt;strong>MeVisLab SDK&lt;/strong> so that you can generate an installer of your developed macro module.&lt;/p></description></item><item><title>Step 1: Prototyping - Develop your Network</title><link>https://mevislab.github.io/examples/pull/119/tutorials/summary/summary1/</link><pubDate>Sun, 15 Jan 2023 00:00:00 +0000</pubDate><guid>https://mevislab.github.io/examples/pull/119/tutorials/summary/summary1/</guid><description>&lt;h1 id="step-1-prototyping---develop-your-network">Step 1: Prototyping - Develop your Network&lt;/h1>
&lt;div class="alert alert-secondary d-flex align-items-center" role="alert">
 &lt;div>
 &lt;img width="100px" src="https://mevislab.github.io/examples/pull/119/images/youtube.svg" />&amp;nbsp;&amp;nbsp;&lt;a href="https://www.youtube.com/watch?v=-hbddg0bXcA" target="_blank">&lt;img width="100px" src="https://img.youtube.com/vi/-hbddg0bXcA/0.jpg" />&lt;/a>&amp;nbsp;&amp;nbsp;&amp;nbsp;This example is also available on &lt;a href="https://www.youtube.com/watch?v=-hbddg0bXcA" target="_blank">YouTube&lt;/a>.
 &lt;/div>
&lt;/div>
&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;p>In this example, we will develop a network which fulfills the requirements mentioned on the &lt;a href="https://mevislab.github.io/examples/pull/119/tutorials/summary#DevelopNetwork">overview page&lt;/a>. The network will be developed by re-using existing modules and defining basic field values.&lt;/p>
&lt;h2 id="steps-to-do">Steps to do&lt;/h2>
&lt;h3 id="2d-viewer">2D viewer&lt;/h3>
&lt;p>The 2D viewer shall visualize the loaded images. In addition to that, it shall be possible to click into the image to trigger a RegionGrowing algorithm to segment parts of the loaded image based on a threshold.&lt;/p></description></item><item><title>Step 2: Prototyping - Create a macro module</title><link>https://mevislab.github.io/examples/pull/119/tutorials/summary/summary2/</link><pubDate>Mon, 16 Jan 2023 00:00:00 +0000</pubDate><guid>https://mevislab.github.io/examples/pull/119/tutorials/summary/summary2/</guid><description>&lt;h1 id="step-2-prototyping---create-a-macro-module">Step 2: Prototyping - Create a macro module&lt;/h1>
&lt;div class="alert alert-secondary d-flex align-items-center" role="alert">
 &lt;div>
 &lt;img width="100px" src="https://mevislab.github.io/examples/pull/119/images/youtube.svg" />&amp;nbsp;&amp;nbsp;&lt;a href="https://www.youtube.com/watch?v=gNlOTiEOJgU" target="_blank">&lt;img width="100px" src="https://img.youtube.com/vi/gNlOTiEOJgU/0.jpg" />&lt;/a>&amp;nbsp;&amp;nbsp;&amp;nbsp;This example is also available on &lt;a href="https://www.youtube.com/watch?v=gNlOTiEOJgU" target="_blank">YouTube&lt;/a>.
 &lt;/div>
&lt;/div>
&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;p>In this example, we encapsulate the previously developed prototype network into a macro module for future application development and automated testing.&lt;/p>
&lt;h2 id="steps-to-do">Steps to do&lt;/h2>
&lt;p>Make sure to have your *.mlab file from the previous &lt;a href="https://mevislab.github.io/examples/pull/119/tutorials/summary/summary1/">tutorial&lt;/a> available.&lt;/p>
&lt;h3 id="package-creation">Package creation&lt;/h3>
&lt;p>Packages are described in detail in &lt;a href="https://mevislab.github.io/examples/pull/119/tutorials/basicmechanisms/macromodules/package/">Example 2.1: Package creation&lt;/a>. If you already have your own package, you can skip this part and continue creating a macro module.&lt;/p></description></item><item><title>Step 3: Prototyping - User Interface and Python scripting</title><link>https://mevislab.github.io/examples/pull/119/tutorials/summary/summary3/</link><pubDate>Tue, 17 Jan 2023 00:00:00 +0000</pubDate><guid>https://mevislab.github.io/examples/pull/119/tutorials/summary/summary3/</guid><description>&lt;h1 id="step-3-prototyping---user-interface-and-python-scripting">Step 3: Prototyping - User Interface and Python scripting&lt;/h1>
&lt;div class="alert alert-secondary d-flex align-items-center" role="alert">
 &lt;div>
 &lt;img width="100px" src="https://mevislab.github.io/examples/pull/119/images/youtube.svg" />&amp;nbsp;&amp;nbsp;&lt;a href="https://www.youtube.com/watch?v=dOyncLUpclU" target="_blank">&lt;img width="100px" src="https://img.youtube.com/vi/dOyncLUpclU/0.jpg" />&lt;/a>&amp;nbsp;&amp;nbsp;&amp;nbsp;This example is also available on &lt;a href="https://www.youtube.com/watch?v=dOyncLUpclU" target="_blank">YouTube&lt;/a>.
 &lt;/div>
&lt;/div>
&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;p>In this step, we will develop a user interface and add Python scripting to the macro module you created in &lt;a href="https://mevislab.github.io/examples/pull/119/tutorials/summary/summary2">Step 2&lt;/a>.&lt;/p>
&lt;h2 id="steps-to-do">Steps to do&lt;/h2>
&lt;h3 id="develop-the-user-interface">Develop the User Interface&lt;/h3>
&lt;p>A mockup of the user interface you are going to develop is available &lt;a href="https://mevislab.github.io/examples/pull/119/tutorials/summary#UIDesign">here&lt;/a>. The interface provides the possibility to load files and shows a 2D and a 3D viewer. In addition to that, some settings and information for our final application are available.&lt;/p></description></item><item><title>Step 4: Review - Automated Tests</title><link>https://mevislab.github.io/examples/pull/119/tutorials/summary/summary4/</link><pubDate>Wed, 18 Jan 2023 00:00:00 +0000</pubDate><guid>https://mevislab.github.io/examples/pull/119/tutorials/summary/summary4/</guid><description>&lt;h1 id="step-4-review---automated-tests">Step 4: Review - Automated Tests&lt;/h1>
&lt;div class="alert alert-secondary d-flex align-items-center" role="alert">
 &lt;div>
 &lt;img width="100px" src="https://mevislab.github.io/examples/pull/119/images/youtube.svg" />&amp;nbsp;&amp;nbsp;&lt;a href="https://www.youtube.com/watch?v=_wheDC8TBJQ" target="_blank">&lt;img width="100px" src="https://img.youtube.com/vi/_wheDC8TBJQ/0.jpg" />&lt;/a>&amp;nbsp;&amp;nbsp;&amp;nbsp;This example is also available on &lt;a href="https://www.youtube.com/watch?v=_wheDC8TBJQ" target="_blank">YouTube&lt;/a>.
 &lt;/div>
&lt;/div>
&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;p>In the previous chapters you developed a macro module with User Interface and Python scripting. In this step you will see how to implement an automated test to verify and validate the Requirements defined in &lt;a href="https://mevislab.github.io/examples/pull/119/tutorials/summary">Overview&lt;/a>.&lt;/p>
&lt;h2 id="steps-to-do">Steps to do&lt;/h2>
&lt;h3 id="create-a-test-network-using-your-macro-module">Create a test network using your macro module&lt;/h3>
&lt;p>Create a new and empty network and save it as *.mlab file. Remember the location.&lt;/p></description></item><item><title>Step 5: Review - Installer creation</title><link>https://mevislab.github.io/examples/pull/119/tutorials/summary/summary5/</link><pubDate>Thu, 19 Jan 2023 00:00:00 +0000</pubDate><guid>https://mevislab.github.io/examples/pull/119/tutorials/summary/summary5/</guid><description>&lt;h1 id="step-5-review---installer-creation">Step 5: Review - Installer creation&lt;/h1>
&lt;div class="alert alert-secondary d-flex align-items-center" role="alert">
 &lt;div>
 &lt;img width="100px" src="https://mevislab.github.io/examples/pull/119/images/youtube.svg" />&amp;nbsp;&amp;nbsp;&lt;a href="https://www.youtube.com/watch?v=64l3igSmeWY" target="_blank">&lt;img width="100px" src="https://img.youtube.com/vi/64l3igSmeWY/0.jpg" />&lt;/a>&amp;nbsp;&amp;nbsp;&amp;nbsp;This example is also available on &lt;a href="https://www.youtube.com/watch?v=64l3igSmeWY" target="_blank">YouTube&lt;/a>.
 &lt;/div>
&lt;/div>
&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;p>Your macro module has been tested manually and/or automatically? Then you should create your first installable executable and deliver it to your customer(s) for final evaluation.&lt;/p>

&lt;svg xmlns="http://www.w3.org/2000/svg" style="display: none;">
 &lt;symbol id="check-fill" fill="currentColor" viewBox="0 0 16 16">
 &lt;path d="M16 8A8 8 0 1 1 0 8a8 8 0 0 1 16 0zm-3.97-3.03a.75.75 0 0 0-1.08.022L7.477 9.417 5.384 7.323a.75.75 0 0 0-1.06 1.06L6.97 11.03a.75.75 0 0 0 1.079-.02l3.992-4.99a.75.75 0 0 0-.01-1.05z"/>
 &lt;/symbol>
 &lt;symbol id="info-fill" fill="currentColor" viewBox="0 0 16 16">
 &lt;path d="M8 16A8 8 0 1 0 8 0a8 8 0 0 0 0 16zm.93-9.412-1 4.705c-.07.34.029.533.304.533.194 0 .487-.07.686-.246l-.088.416c-.287.346-.92.598-1.465.598-.703 0-1.002-.422-.808-1.319l.738-3.468c.064-.293.006-.399-.287-.47l-.451-.081.082-.381 2.29-.287zM8 5.5a1 1 0 1 1 0-2 1 1 0 0 1 0 2z"/>
 &lt;/symbol>
 &lt;symbol id="warning-fill" fill="currentColor" viewBox="0 0 16 16">
 &lt;path d="M8.982 1.566a1.13 1.13 0 0 0-1.96 0L.165 13.233c-.457.778.091 1.767.98 1.767h13.713c.889 0 1.438-.99.98-1.767L8.982 1.566zM8 5c.535 0 .954.462.9.995l-.35 3.507a.552.552 0 0 1-1.1 0L7.1 5.995A.905.905 0 0 1 8 5zm.002 6a1 1 0 1 1 0 2 1 1 0 0 1 0-2z"/>
 &lt;/symbol>
 &lt;symbol id="danger-fill" fill="currentColor" viewBox="0 0 16 16">
 &lt;path d="M8.982 1.566a1.13 1.13 0 0 0-1.96 0L.165 13.233c-.457.778.091 1.767.98 1.767h13.713c.889 0 1.438-.99.98-1.767L8.982 1.566zM8 5c.535 0 .954.462.9.995l-.35 3.507a.552.552 0 0 1-1.1 0L7.1 5.995A.905.905 0 0 1 8 5zm.002 6a1 1 0 1 1 0 2 1 1 0 0 1 0-2z"/>
 &lt;/symbol>
&lt;/svg>

&lt;div class="alert alert-primary alert-warning d-flex align-items-center" role="alert">
 &lt;svg class="bi flex-shrink-0 me-2" width="24" height="24" role="img" aria-label="Licensing:">&lt;use xlink:href="#warning-fill"/>&lt;/svg>
 &lt;div>
 &lt;b>Licensing:&amp;nbsp;&lt;/b>
 This step requires a valid &lt;strong>MeVisLab ApplicationBuilder&lt;/strong> license. It extends the &lt;strong>MeVisLab SDK&lt;/strong> so that you can generate an installer of your developed macro module.
Free evaluation licenses of the &lt;strong>MeVisLab ApplicationBuilder&lt;/strong>, time-limited to 3 months, can be requested at &lt;a href="mailto://sales@mevislab.de">sales(at)mevislab.de&lt;/a>.
 &lt;/div>
&lt;/div>
&lt;h2 id="steps-to-do">Steps to do&lt;/h2>
&lt;h3 id="install-tools-necessary-for-installer-generation">Install tools necessary for installer generation&lt;/h3>
&lt;p>The MeVisLab Project Wizard for Standalone Applications &lt;i>[
 
 File
 &amp;rarr; 
 Run Project Wizard...
 &amp;rarr; 
 Standalone Application
]&lt;/i> provides a check for all necessary tools you need to install before generating an installer.&lt;/p></description></item><item><title>Step 6: Refine - Update Application</title><link>https://mevislab.github.io/examples/pull/119/tutorials/summary/summary6/</link><pubDate>Fri, 20 Jan 2023 00:00:00 +0000</pubDate><guid>https://mevislab.github.io/examples/pull/119/tutorials/summary/summary6/</guid><description>&lt;h1 id="step-6-refine---update-application">Step 6: Refine - Update Application&lt;/h1>
&lt;div class="alert alert-secondary d-flex align-items-center" role="alert">
 &lt;div>
 &lt;img width="100px" src="https://mevislab.github.io/examples/pull/119/images/youtube.svg" />&amp;nbsp;&amp;nbsp;&lt;a href="https://www.youtube.com/watch?v=1v_UyGs8W1g" target="_blank">&lt;img width="100px" src="https://img.youtube.com/vi/1v_UyGs8W1g/0.jpg" />&lt;/a>&amp;nbsp;&amp;nbsp;&amp;nbsp;This example is also available on &lt;a href="https://www.youtube.com/watch?v=1v_UyGs8W1g" target="_blank">YouTube&lt;/a>.
 &lt;/div>
&lt;/div>
&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;p>In previous step you developed an application which can be installed on your customers systems for usage. In this step we are going to integrate simple feedback into our executable and re-create the installer.&lt;/p>
&lt;p>We want to show you how easy it is to update your application using MeVisLab.&lt;/p>
&lt;p>Your customer requests an additional requirement to define the transparency of your 2D overlay in addition to defining the color.&lt;/p></description></item><item><title>Step 7: Refine - Re-Build Installer</title><link>https://mevislab.github.io/examples/pull/119/tutorials/summary/summary7/</link><pubDate>Sat, 21 Jan 2023 00:00:00 +0000</pubDate><guid>https://mevislab.github.io/examples/pull/119/tutorials/summary/summary7/</guid><description>&lt;h1 id="step-7-refine---re-build-installer">Step 7: Refine - Re-Build Installer&lt;/h1>
&lt;div class="alert alert-secondary d-flex align-items-center" role="alert">
 &lt;div>
 &lt;img width="100px" src="https://mevislab.github.io/examples/pull/119/images/youtube.svg" />&amp;nbsp;&amp;nbsp;&lt;a href="https://www.youtube.com/watch?v=E0GnWPXT8Og" target="_blank">&lt;img width="100px" src="https://img.youtube.com/vi/E0GnWPXT8Og/0.jpg" />&lt;/a>&amp;nbsp;&amp;nbsp;&amp;nbsp;This example is also available on &lt;a href="https://www.youtube.com/watch?v=E0GnWPXT8Og" target="_blank">YouTube&lt;/a>.
 &lt;/div>
&lt;/div>
&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;p>In this step you are re-creating your application installer after changing the UI in previous &lt;a href="https://mevislab.github.io/examples/pull/119/tutorials/summary/summary6/">Step 6: Refine - Update Application&lt;/a>.&lt;/p>
&lt;h2 id="steps-to-do">Steps to do&lt;/h2>
&lt;h3 id="update-the-mlinstall-file">Update the *.mlinstall file&lt;/h3>
&lt;p>You do not need to use the Project Wizard now, because you already have a valid *.mlinstall file. The location should be in your package, under &lt;em>.\Configuration\Installers\TutorialSummary&lt;/em>. Open the file in any text editor and search for the &lt;em>$VERSION 0.5&lt;/em>. Change the version to something else, in our case we now have our first major release 1.0.&lt;/p></description></item><item><title>Extra: Run your application in Browser</title><link>https://mevislab.github.io/examples/pull/119/tutorials/summary/summary8/</link><pubDate>Fri, 24 Feb 2023 00:00:00 +0000</pubDate><guid>https://mevislab.github.io/examples/pull/119/tutorials/summary/summary8/</guid><description>&lt;h1 id="extra-run-your-application-in-browser">Extra: Run your application in Browser&lt;/h1>
&lt;div class="alert alert-secondary d-flex align-items-center" role="alert">
 &lt;div>
 &lt;img width="100px" src="https://mevislab.github.io/examples/pull/119/images/youtube.svg" />&amp;nbsp;&amp;nbsp;&lt;a href="https://www.youtube.com/watch?v=XgOyeu65f7Q" target="_blank">&lt;img width="100px" src="https://img.youtube.com/vi/XgOyeu65f7Q/0.jpg" />&lt;/a>&amp;nbsp;&amp;nbsp;&amp;nbsp;This example is also available on &lt;a href="https://www.youtube.com/watch?v=XgOyeu65f7Q" target="_blank">YouTube&lt;/a>.
 &lt;/div>
&lt;/div>
&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;p>This step explains how to run your developed application in a browser. The MeVisLab network remains the same, only some adaptations are necessary for running any macro module in a browser window.&lt;/p>

&lt;svg xmlns="http://www.w3.org/2000/svg" style="display: none;">
 &lt;symbol id="check-fill" fill="currentColor" viewBox="0 0 16 16">
 &lt;path d="M16 8A8 8 0 1 1 0 8a8 8 0 0 1 16 0zm-3.97-3.03a.75.75 0 0 0-1.08.022L7.477 9.417 5.384 7.323a.75.75 0 0 0-1.06 1.06L6.97 11.03a.75.75 0 0 0 1.079-.02l3.992-4.99a.75.75 0 0 0-.01-1.05z"/>
 &lt;/symbol>
 &lt;symbol id="info-fill" fill="currentColor" viewBox="0 0 16 16">
 &lt;path d="M8 16A8 8 0 1 0 8 0a8 8 0 0 0 0 16zm.93-9.412-1 4.705c-.07.34.029.533.304.533.194 0 .487-.07.686-.246l-.088.416c-.287.346-.92.598-1.465.598-.703 0-1.002-.422-.808-1.319l.738-3.468c.064-.293.006-.399-.287-.47l-.451-.081.082-.381 2.29-.287zM8 5.5a1 1 0 1 1 0-2 1 1 0 0 1 0 2z"/>
 &lt;/symbol>
 &lt;symbol id="warning-fill" fill="currentColor" viewBox="0 0 16 16">
 &lt;path d="M8.982 1.566a1.13 1.13 0 0 0-1.96 0L.165 13.233c-.457.778.091 1.767.98 1.767h13.713c.889 0 1.438-.99.98-1.767L8.982 1.566zM8 5c.535 0 .954.462.9.995l-.35 3.507a.552.552 0 0 1-1.1 0L7.1 5.995A.905.905 0 0 1 8 5zm.002 6a1 1 0 1 1 0 2 1 1 0 0 1 0-2z"/>
 &lt;/symbol>
 &lt;symbol id="danger-fill" fill="currentColor" viewBox="0 0 16 16">
 &lt;path d="M8.982 1.566a1.13 1.13 0 0 0-1.96 0L.165 13.233c-.457.778.091 1.767.98 1.767h13.713c.889 0 1.438-.99.98-1.767L8.982 1.566zM8 5c.535 0 .954.462.9.995l-.35 3.507a.552.552 0 0 1-1.1 0L7.1 5.995A.905.905 0 0 1 8 5zm.002 6a1 1 0 1 1 0 2 1 1 0 0 1 0-2z"/>
 &lt;/symbol>
&lt;/svg>

&lt;div class="alert alert-primary alert-warning d-flex align-items-center" role="alert">
 &lt;svg class="bi flex-shrink-0 me-2" width="24" height="24" role="img" aria-label="Licensing:">&lt;use xlink:href="#warning-fill"/>&lt;/svg>
 &lt;div>
 &lt;b>Licensing:&amp;nbsp;&lt;/b>
 This step requires a valid &lt;strong>MeVisLab Webtoolkit&lt;/strong> license. It extends the &lt;strong>MeVisLab SDK&lt;/strong> so that you can develop web macro modules.
Free evaluation licenses of the &lt;strong>MeVisLab Webtoolkit&lt;/strong>, time-limited to 3 months, can be requested at &lt;a href="mailto://sales@mevislab.de">sales(at)mevislab.de&lt;/a>.
 &lt;/div>
&lt;/div>
&lt;h2 id="steps-to-do">Steps to do&lt;/h2>
&lt;p>Make sure to have your macro module from previous &lt;a href="https://mevislab.github.io/examples/pull/119/tutorials/summary/summary2/">Step 2&lt;/a> available.&lt;/p></description></item><item><title>Chapter VIII: ThirdParty components</title><link>https://mevislab.github.io/examples/pull/119/tutorials/thirdparty/</link><pubDate>Wed, 15 Jun 2022 08:56:33 +0200</pubDate><guid>https://mevislab.github.io/examples/pull/119/tutorials/thirdparty/</guid><description>&lt;h1 id="TutorialChapter8">MeVisLab Tutorial Chapter VIII&lt;/h1>
&lt;h2 id="TutorialThirdParty">Using ThirdParty software integrated into MeVisLab&lt;/h2>
&lt;p>MeVisLab is equipped with a lot of useful software right out of the box, like the Insight Segmentation and Registration Toolkit (ITK) or the Visualization Toolkit (VTK). This chapter works as a guide on how to use some of the third party components integrated in MeVisLab for your projects via Python scripting.

&lt;svg xmlns="http://www.w3.org/2000/svg" style="display: none;">
 &lt;symbol id="check-fill" fill="currentColor" viewBox="0 0 16 16">
 &lt;path d="M16 8A8 8 0 1 1 0 8a8 8 0 0 1 16 0zm-3.97-3.03a.75.75 0 0 0-1.08.022L7.477 9.417 5.384 7.323a.75.75 0 0 0-1.06 1.06L6.97 11.03a.75.75 0 0 0 1.079-.02l3.992-4.99a.75.75 0 0 0-.01-1.05z"/>
 &lt;/symbol>
 &lt;symbol id="info-fill" fill="currentColor" viewBox="0 0 16 16">
 &lt;path d="M8 16A8 8 0 1 0 8 0a8 8 0 0 0 0 16zm.93-9.412-1 4.705c-.07.34.029.533.304.533.194 0 .487-.07.686-.246l-.088.416c-.287.346-.92.598-1.465.598-.703 0-1.002-.422-.808-1.319l.738-3.468c.064-.293.006-.399-.287-.47l-.451-.081.082-.381 2.29-.287zM8 5.5a1 1 0 1 1 0-2 1 1 0 0 1 0 2z"/>
 &lt;/symbol>
 &lt;symbol id="warning-fill" fill="currentColor" viewBox="0 0 16 16">
 &lt;path d="M8.982 1.566a1.13 1.13 0 0 0-1.96 0L.165 13.233c-.457.778.091 1.767.98 1.767h13.713c.889 0 1.438-.99.98-1.767L8.982 1.566zM8 5c.535 0 .954.462.9.995l-.35 3.507a.552.552 0 0 1-1.1 0L7.1 5.995A.905.905 0 0 1 8 5zm.002 6a1 1 0 1 1 0 2 1 1 0 0 1 0-2z"/>
 &lt;/symbol>
 &lt;symbol id="danger-fill" fill="currentColor" viewBox="0 0 16 16">
 &lt;path d="M8.982 1.566a1.13 1.13 0 0 0-1.96 0L.165 13.233c-.457.778.091 1.767.98 1.767h13.713c.889 0 1.438-.99.98-1.767L8.982 1.566zM8 5c.535 0 .954.462.9.995l-.35 3.507a.552.552 0 0 1-1.1 0L7.1 5.995A.905.905 0 0 1 8 5zm.002 6a1 1 0 1 1 0 2 1 1 0 0 1 0-2z"/>
 &lt;/symbol>
&lt;/svg>

&lt;div class="alert alert-primary alert-info d-flex align-items-center" role="alert">
 &lt;svg class="bi flex-shrink-0 me-2" width="24" height="24" role="img" aria-label="Additional Information:">&lt;use xlink:href="#info-fill"/>&lt;/svg>
 &lt;div>
 &lt;b>Additional Information:&amp;nbsp;&lt;/b>
 You will also find instructions to install and use any Python package (e.g. PyTorch) in MeVisLab using the &lt;code>PythonPip&lt;/code> module.
 &lt;/div>
&lt;/div>&lt;/p></description></item><item><title>OpenCV</title><link>https://mevislab.github.io/examples/pull/119/tutorials/thirdparty/opencv/</link><pubDate>Wed, 15 Jun 2022 08:56:33 +0200</pubDate><guid>https://mevislab.github.io/examples/pull/119/tutorials/thirdparty/opencv/</guid><description>&lt;h1 id="OpenCV">Open Source Computer Vision Library (OpenCV)&lt;/h1>
&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;p>&lt;a href="https://opencv.org/" title="OpenCV" target="_blank" rel="noopener">OpenCV&lt;/a> (Open Source Computer Vision Library) is an open source computer vision and machine learning software library.&lt;/p>
&lt;p>This chapter provides some examples how to use OpenCV in MeVisLab.&lt;/p>
&lt;h2 id="other-resources">Other resources&lt;/h2>
&lt;p>You can find a lot of OpenCV examples and tutorials on their &lt;a href="https://docs.opencv.org/4.x/d9/df8/tutorial_root.html" target="_blank" rel="noopener">website&lt;/a>.&lt;/p></description></item><item><title>Example 1: WebCam access with OpenCV</title><link>https://mevislab.github.io/examples/pull/119/tutorials/thirdparty/opencv/thirdpartyexample1/</link><pubDate>Wed, 15 Jun 2022 08:56:33 +0200</pubDate><guid>https://mevislab.github.io/examples/pull/119/tutorials/thirdparty/opencv/thirdpartyexample1/</guid><description>&lt;h1 id="example-1-webcam-access-with-opencv">Example 1: WebCam access with OpenCV&lt;/h1>
&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;p>In this example, we are using the &lt;code>PythonImage&lt;/code> module and access your WebCam to show the video in a &lt;code>View2D&lt;/code>.&lt;/p>
&lt;h2 id="steps-to-do">Steps to do&lt;/h2>
&lt;h3 id="creating-the-network-to-be-used-for-testing">Creating the network to be used for testing&lt;/h3>
&lt;p>Add the modules to your workspace and connect them as seen below.&lt;/p>
&lt;p>&lt;p class="page-image">
 &lt;a data-modal="bs-lightbox" href="https://mevislab.github.io/examples/pull/119/images/tutorials/thirdparty/network_example1.png" title="Example Network ">&lt;img id="Example Network " class="img-fluid rounded" src="https://mevislab.github.io/examples/pull/119/images/tutorials/thirdparty/network_example1.png" alt="Example Network " title="Example Network " />&lt;/a>
 &lt;figcaption class="figure-caption">Example Network &lt;/figcaption>
&lt;/p>
&lt;/p>
&lt;p>The viewer is empty because the image needs to be set via Python scripting.&lt;/p></description></item><item><title>Example 2: Face Detection with OpenCV</title><link>https://mevislab.github.io/examples/pull/119/tutorials/thirdparty/opencv/thirdpartyexample2/</link><pubDate>Wed, 15 Jun 2022 08:56:33 +0200</pubDate><guid>https://mevislab.github.io/examples/pull/119/tutorials/thirdparty/opencv/thirdpartyexample2/</guid><description>&lt;h1 id="example-2-face-detection-with-opencv">Example 2: Face Detection with OpenCV&lt;/h1>
&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;p>This example uses the OpenCV WebCam Python script and adds a basic face detection.&lt;/p>

&lt;svg xmlns="http://www.w3.org/2000/svg" style="display: none;">
 &lt;symbol id="check-fill" fill="currentColor" viewBox="0 0 16 16">
 &lt;path d="M16 8A8 8 0 1 1 0 8a8 8 0 0 1 16 0zm-3.97-3.03a.75.75 0 0 0-1.08.022L7.477 9.417 5.384 7.323a.75.75 0 0 0-1.06 1.06L6.97 11.03a.75.75 0 0 0 1.079-.02l3.992-4.99a.75.75 0 0 0-.01-1.05z"/>
 &lt;/symbol>
 &lt;symbol id="info-fill" fill="currentColor" viewBox="0 0 16 16">
 &lt;path d="M8 16A8 8 0 1 0 8 0a8 8 0 0 0 0 16zm.93-9.412-1 4.705c-.07.34.029.533.304.533.194 0 .487-.07.686-.246l-.088.416c-.287.346-.92.598-1.465.598-.703 0-1.002-.422-.808-1.319l.738-3.468c.064-.293.006-.399-.287-.47l-.451-.081.082-.381 2.29-.287zM8 5.5a1 1 0 1 1 0-2 1 1 0 0 1 0 2z"/>
 &lt;/symbol>
 &lt;symbol id="warning-fill" fill="currentColor" viewBox="0 0 16 16">
 &lt;path d="M8.982 1.566a1.13 1.13 0 0 0-1.96 0L.165 13.233c-.457.778.091 1.767.98 1.767h13.713c.889 0 1.438-.99.98-1.767L8.982 1.566zM8 5c.535 0 .954.462.9.995l-.35 3.507a.552.552 0 0 1-1.1 0L7.1 5.995A.905.905 0 0 1 8 5zm.002 6a1 1 0 1 1 0 2 1 1 0 0 1 0-2z"/>
 &lt;/symbol>
 &lt;symbol id="danger-fill" fill="currentColor" viewBox="0 0 16 16">
 &lt;path d="M8.982 1.566a1.13 1.13 0 0 0-1.96 0L.165 13.233c-.457.778.091 1.767.98 1.767h13.713c.889 0 1.438-.99.98-1.767L8.982 1.566zM8 5c.535 0 .954.462.9.995l-.35 3.507a.552.552 0 0 1-1.1 0L7.1 5.995A.905.905 0 0 1 8 5zm.002 6a1 1 0 1 1 0 2 1 1 0 0 1 0-2z"/>
 &lt;/symbol>
&lt;/svg>

&lt;div class="alert alert-primary alert-info d-flex align-items-center" role="alert">
 &lt;svg class="bi flex-shrink-0 me-2" width="24" height="24" role="img" aria-label="Info:">&lt;use xlink:href="#info-fill"/>&lt;/svg>
 &lt;div>
 &lt;b>Info:&amp;nbsp;&lt;/b>
 The Python code used in this example has been taken from &lt;a href="https://towardsdatascience.com/face-detection-in-2-minutes-using-opencv-python-90f89d7c0f81" target="_blank" rel="noopener">Towards Data Science&lt;/a>.
 &lt;/div>
&lt;/div>
&lt;h2 id="steps-to-do">Steps to do&lt;/h2>
&lt;h3 id="open-example-1">Open Example 1&lt;/h3>
&lt;p>Add the macro module developed in &lt;a href="https://mevislab.github.io/examples/pull/119/tutorials/thirdparty/opencv/thirdpartyexample1">Example 1&lt;/a> to your workspace.&lt;/p></description></item><item><title>PyTorch</title><link>https://mevislab.github.io/examples/pull/119/tutorials/thirdparty/pytorch/</link><pubDate>Tue, 16 May 2023 00:00:00 +0000</pubDate><guid>https://mevislab.github.io/examples/pull/119/tutorials/thirdparty/pytorch/</guid><description>&lt;h1 id="pytorch">PyTorch&lt;/h1>
&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;p>&lt;a href="http://www.pytorch.org" title="pytorch" target="_blank" rel="noopener">PyTorch&lt;/a> is a machine learning framework based on the Torch library, used for applications such as Computer Vision and Natural Language Processing, originally developed by Meta AI and now part of the Linux Foundation umbrella.&lt;/p>
&lt;p>A lot of AI frameworks can be used within MeVisLab. We currently do not provide a preintegrated AI framework though as we try to avoid compatibility issues, and AI frameworks are very fast-moving by nature.&lt;/p></description></item><item><title>Example 1: Installing PyTorch using the PythonPip module</title><link>https://mevislab.github.io/examples/pull/119/tutorials/thirdparty/pytorch/pytorchexample1/</link><pubDate>Tue, 16 May 2023 00:00:00 +0000</pubDate><guid>https://mevislab.github.io/examples/pull/119/tutorials/thirdparty/pytorch/pytorchexample1/</guid><description>&lt;h1 id="example-1-installing-pytorch-using-the-pythonpip-module">Example 1: Installing PyTorch using the PythonPip module&lt;/h1>
&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;p>The module &lt;code>PythonPip&lt;/code> allows you to install additional Python packages to be used in MeVisLab.&lt;/p>

&lt;svg xmlns="http://www.w3.org/2000/svg" style="display: none;">
 &lt;symbol id="check-fill" fill="currentColor" viewBox="0 0 16 16">
 &lt;path d="M16 8A8 8 0 1 1 0 8a8 8 0 0 1 16 0zm-3.97-3.03a.75.75 0 0 0-1.08.022L7.477 9.417 5.384 7.323a.75.75 0 0 0-1.06 1.06L6.97 11.03a.75.75 0 0 0 1.079-.02l3.992-4.99a.75.75 0 0 0-.01-1.05z"/>
 &lt;/symbol>
 &lt;symbol id="info-fill" fill="currentColor" viewBox="0 0 16 16">
 &lt;path d="M8 16A8 8 0 1 0 8 0a8 8 0 0 0 0 16zm.93-9.412-1 4.705c-.07.34.029.533.304.533.194 0 .487-.07.686-.246l-.088.416c-.287.346-.92.598-1.465.598-.703 0-1.002-.422-.808-1.319l.738-3.468c.064-.293.006-.399-.287-.47l-.451-.081.082-.381 2.29-.287zM8 5.5a1 1 0 1 1 0-2 1 1 0 0 1 0 2z"/>
 &lt;/symbol>
 &lt;symbol id="warning-fill" fill="currentColor" viewBox="0 0 16 16">
 &lt;path d="M8.982 1.566a1.13 1.13 0 0 0-1.96 0L.165 13.233c-.457.778.091 1.767.98 1.767h13.713c.889 0 1.438-.99.98-1.767L8.982 1.566zM8 5c.535 0 .954.462.9.995l-.35 3.507a.552.552 0 0 1-1.1 0L7.1 5.995A.905.905 0 0 1 8 5zm.002 6a1 1 0 1 1 0 2 1 1 0 0 1 0-2z"/>
 &lt;/symbol>
 &lt;symbol id="danger-fill" fill="currentColor" viewBox="0 0 16 16">
 &lt;path d="M8.982 1.566a1.13 1.13 0 0 0-1.96 0L.165 13.233c-.457.778.091 1.767.98 1.767h13.713c.889 0 1.438-.99.98-1.767L8.982 1.566zM8 5c.535 0 .954.462.9.995l-.35 3.507a.552.552 0 0 1-1.1 0L7.1 5.995A.905.905 0 0 1 8 5zm.002 6a1 1 0 1 1 0 2 1 1 0 0 1 0-2z"/>
 &lt;/symbol>
&lt;/svg>

&lt;div class="alert alert-primary alert-warning d-flex align-items-center" role="alert">
 &lt;svg class="bi flex-shrink-0 me-2" width="24" height="24" role="img" aria-label="Warning:">&lt;use xlink:href="#warning-fill"/>&lt;/svg>
 &lt;div>
 &lt;b>Warning:&amp;nbsp;&lt;/b>
 You should not use the general Python &lt;em>pip&lt;/em> command from a locally installed Python, because MeVisLab will not know these packages and they cannot be used in MeVisLab directly.
 &lt;/div>
&lt;/div>
&lt;p>The module either allows to install packages into the global MeVisLab installation directory, or into your defined user package. We will use the user package directory, because then the installed packages remain available in your packages even if you uninstall or update MeVisLab. In addition to that, no administrative rights are necessary if you did install MeVisLab for all users.&lt;/p></description></item><item><title>Example 2: Brain Parcellation using PyTorch</title><link>https://mevislab.github.io/examples/pull/119/tutorials/thirdparty/pytorch/pytorchexample2/</link><pubDate>Fri, 30 Jun 2023 00:00:00 +0000</pubDate><guid>https://mevislab.github.io/examples/pull/119/tutorials/thirdparty/pytorch/pytorchexample2/</guid><description>&lt;h1 id="example-2-brain-parcellation-using-pytorch">Example 2: Brain Parcellation using PyTorch&lt;/h1>
&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;p>In this example, you are using a pre-trained PyTorch deep learning model (HighRes3DNet) to perform a full brain parcellation. HighRes3DNet is a 3D residual network presented by Li et al. in &lt;a href="https://link.springer.com/chapter/10.1007/978-3-319-59050-9_28" target="_blank" rel="noopener">On the Compactness, Efficiency, and Representation of 3D Convolutional Networks: Brain Parcellation as a Pretext Task&lt;/a>.&lt;/p>
&lt;h2 id="steps-to-do">Steps to do&lt;/h2>
&lt;p>Add a &lt;code>LocalImage&lt;/code> module to your workspace and select the file &lt;em>MRI_Head.dcm&lt;/em>. For PyTorch it is necessary to resample the data to a defined size. Add a &lt;code>Resample3D&lt;/code> module to the &lt;code>LocalImage&lt;/code> and open the panel. Change &lt;em>Keep Constant&lt;/em> to &lt;em>Voxel Size&lt;/em> and define &lt;em>Image Size&lt;/em> as 176, 217, 160.&lt;/p></description></item><item><title>Example 3: Segment persons in webcam videos</title><link>https://mevislab.github.io/examples/pull/119/tutorials/thirdparty/pytorch/pytorchexample3/</link><pubDate>Tue, 16 May 2023 00:00:00 +0000</pubDate><guid>https://mevislab.github.io/examples/pull/119/tutorials/thirdparty/pytorch/pytorchexample3/</guid><description>&lt;h1 id="example-3-segment-persons-in-webcam-videos">Example 3: Segment persons in webcam videos&lt;/h1>
&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;p>This tutorial is based on &lt;a href="https://mevislab.github.io/examples/pull/119/tutorials/thirdparty/opencv/thirdpartyexample2" title="Example 2: Face Detection with OpenCV">Example 2: Face Detection with OpenCV&lt;/a>. You can re-use some of the scripts already developed in the other tutorial.&lt;/p>
&lt;h2 id="steps-to-do">Steps to do&lt;/h2>
&lt;p>Add the macro module developed in the previous example to your workspace.&lt;/p>
&lt;p>&lt;p class="page-image">
 &lt;a data-modal="bs-lightbox" href="https://mevislab.github.io/examples/pull/119/images/tutorials/thirdparty/pytorch_example3_1.png" title="WebCamTest module">&lt;img id="WebCamTest module" class="img-fluid rounded" src="https://mevislab.github.io/examples/pull/119/images/tutorials/thirdparty/pytorch_example3_1.png" alt="WebCamTest module" title="WebCamTest module" />&lt;/a>
 &lt;figcaption class="figure-caption">WebCamTest module&lt;/figcaption>
&lt;/p>
&lt;/p>
&lt;p>Open the internal network of the module via middle mouse button 



&lt;img width="22px" src="https://mevislab.github.io/examples/pull/119/images/mmb.svg" alt="Middle Mouse Button / Mouse Wheel" />
 and right click 


&lt;img width="22px" src="https://mevislab.github.io/examples/pull/119/images/rmb.svg" alt="Right Mouse Button" />

 on the tab of the workspace showing the internal network. Select &lt;em>Show Enclosing Folder&lt;/em>.&lt;/p></description></item><item><title>Matplotlib</title><link>https://mevislab.github.io/examples/pull/119/tutorials/thirdparty/matplotlib/</link><pubDate>Thu, 25 May 2023 00:00:00 +0000</pubDate><guid>https://mevislab.github.io/examples/pull/119/tutorials/thirdparty/matplotlib/</guid><description>&lt;h1 id="matplotlib">Matplotlib&lt;/h1>
&lt;p>Matplotlib, introduced by John Hunter in 2002 and initially released in 2003, is a comprehensive data visualization library in Python. It is widely used among the scientific world as it is easy to grasp for beginners and provides high quality plots and images, that are widely customizable.&lt;/p>

&lt;svg xmlns="http://www.w3.org/2000/svg" style="display: none;">
 &lt;symbol id="check-fill" fill="currentColor" viewBox="0 0 16 16">
 &lt;path d="M16 8A8 8 0 1 1 0 8a8 8 0 0 1 16 0zm-3.97-3.03a.75.75 0 0 0-1.08.022L7.477 9.417 5.384 7.323a.75.75 0 0 0-1.06 1.06L6.97 11.03a.75.75 0 0 0 1.079-.02l3.992-4.99a.75.75 0 0 0-.01-1.05z"/>
 &lt;/symbol>
 &lt;symbol id="info-fill" fill="currentColor" viewBox="0 0 16 16">
 &lt;path d="M8 16A8 8 0 1 0 8 0a8 8 0 0 0 0 16zm.93-9.412-1 4.705c-.07.34.029.533.304.533.194 0 .487-.07.686-.246l-.088.416c-.287.346-.92.598-1.465.598-.703 0-1.002-.422-.808-1.319l.738-3.468c.064-.293.006-.399-.287-.47l-.451-.081.082-.381 2.29-.287zM8 5.5a1 1 0 1 1 0-2 1 1 0 0 1 0 2z"/>
 &lt;/symbol>
 &lt;symbol id="warning-fill" fill="currentColor" viewBox="0 0 16 16">
 &lt;path d="M8.982 1.566a1.13 1.13 0 0 0-1.96 0L.165 13.233c-.457.778.091 1.767.98 1.767h13.713c.889 0 1.438-.99.98-1.767L8.982 1.566zM8 5c.535 0 .954.462.9.995l-.35 3.507a.552.552 0 0 1-1.1 0L7.1 5.995A.905.905 0 0 1 8 5zm.002 6a1 1 0 1 1 0 2 1 1 0 0 1 0-2z"/>
 &lt;/symbol>
 &lt;symbol id="danger-fill" fill="currentColor" viewBox="0 0 16 16">
 &lt;path d="M8.982 1.566a1.13 1.13 0 0 0-1.96 0L.165 13.233c-.457.778.091 1.767.98 1.767h13.713c.889 0 1.438-.99.98-1.767L8.982 1.566zM8 5c.535 0 .954.462.9.995l-.35 3.507a.552.552 0 0 1-1.1 0L7.1 5.995A.905.905 0 0 1 8 5zm.002 6a1 1 0 1 1 0 2 1 1 0 0 1 0-2z"/>
 &lt;/symbol>
&lt;/svg>

&lt;div class="alert alert-primary alert-info d-flex align-items-center" role="alert">
 &lt;svg class="bi flex-shrink-0 me-2" width="24" height="24" role="img" aria-label="Info:">&lt;use xlink:href="#info-fill"/>&lt;/svg>
 &lt;div>
 &lt;b>Info:&amp;nbsp;&lt;/b>
 The documentation on Matplotlib along with general examples, cheat sheets and a starting guide can be found &lt;a href="https://matplotlib.org/" target="_blank" rel="noopener">here&lt;/a>.
 &lt;/div>
&lt;/div>
&lt;p>As MeVisLab supports the integration of Python scripts e. g. for test automation, Matplotlib can be used to visualize any data you might want to see. And as it is directly integrated into MeVisLab, you don&amp;rsquo;t have to install it (via &lt;code>PythonPip&lt;/code> module) first.&lt;/p></description></item><item><title>Example 2: 2D Plotting</title><link>https://mevislab.github.io/examples/pull/119/tutorials/thirdparty/matplotlib/2dplotting/</link><pubDate>Tue, 30 May 2023 00:00:00 +0000</pubDate><guid>https://mevislab.github.io/examples/pull/119/tutorials/thirdparty/matplotlib/2dplotting/</guid><description>&lt;h1 id="example-2-2d-plotting">Example 2: 2D Plotting&lt;/h1>
&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;p>In this tutorial, we will equip the macro module we created in the &lt;a href="https://mevislab.github.io/examples/pull/119/tutorials/thirdparty/matplotlib/modulesetup">previous tutorial&lt;/a> with a responsive and interactable panel to plot grayscale distributions of single slices as well as defined sequences of slices in 2D.&lt;/p>
&lt;h2 id="steps-to-do">Steps to do&lt;/h2>
&lt;p>Open the module definition folder of your macro module and the related .script file in MATE. Then activate the Preview as shown below:&lt;/p>
&lt;p>&lt;p class="page-image">
 &lt;a data-modal="bs-lightbox" href="https://mevislab.github.io/examples/pull/119/images/tutorials/thirdparty/Matplotlib7.png" title="">&lt;img id="" class="img-fluid rounded" src="https://mevislab.github.io/examples/pull/119/images/tutorials/thirdparty/Matplotlib7.png" alt="MATE Preview" />&lt;/a>
 &lt;figcaption class="figure-caption">&lt;/figcaption>
&lt;/p></description></item><item><title>Example 4: 3D Plotting</title><link>https://mevislab.github.io/examples/pull/119/tutorials/thirdparty/matplotlib/3dplotting/</link><pubDate>Wed, 31 May 2023 00:00:00 +0000</pubDate><guid>https://mevislab.github.io/examples/pull/119/tutorials/thirdparty/matplotlib/3dplotting/</guid><description>&lt;h1 id="example-4-3d-plotting">Example 4: 3D Plotting&lt;/h1>
&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;p>In this tutorial, we will equip the macro module we created in the &lt;a href="https://mevislab.github.io/examples/pull/119/tutorials/thirdparty/matplotlib/modulesetup">Example 1: Module Setup&lt;/a> and later on adapted by enabling it to plot grayscale distributions of single slices and sequences in 2D in &lt;a href="https://mevislab.github.io/examples/pull/119/tutorials/thirdparty/matplotlib/2dplotting">Example 2: 2D Plotting&lt;/a> with a three dimensional plotting functionality.&lt;/p>
&lt;h2 id="steps-to-do">Steps to do&lt;/h2>
&lt;p>The fields and commands needed have already been prepared in the second tutorial. We will just have to modify our .py file a little to make them usable. Integrate the following code into your .py file and import numpy.&lt;/p></description></item></channel></rss>