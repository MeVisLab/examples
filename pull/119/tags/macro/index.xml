<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Macro on MeVisLab Examples</title><link>https://mevislab.github.io/examples/pull/119/tags/macro/</link><description>Recent content in Macro on MeVisLab Examples</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Mon, 19 May 2025 00:00:00 +0000</lastBuildDate><atom:link href="https://mevislab.github.io/examples/pull/119/tags/macro/index.xml" rel="self" type="application/rss+xml"/><item><title>Chapter I: Basic Mechanisms of MeVisLab</title><link>https://mevislab.github.io/examples/pull/119/tutorials/basicmechanisms/</link><pubDate>Wed, 15 Jun 2022 08:54:53 +0200</pubDate><guid>https://mevislab.github.io/examples/pull/119/tutorials/basicmechanisms/</guid><description>&lt;h2 id="TutorialBasicMechanics">Basic Mechanics of MeVisLab (Example: Building a Contour Filter)&lt;/h2>
&lt;p>In this chapter you will learn the basic mechanisms of the MeVisLab IDE. You will learn how to re-use existing modules to load and view data and you will build your first processing pipeline.&lt;/p>
&lt;div class="alert alert-secondary d-flex align-items-center" role="alert">
 &lt;div>
 &lt;img width="100px" src="https://mevislab.github.io/examples/pull/119/images/youtube.svg" />&amp;nbsp;&amp;nbsp;&lt;a href="https://www.youtube.com/watch?v=hRspMChITE4" target="_blank">&lt;img width="100px" src="https://img.youtube.com/vi/hRspMChITE4/0.jpg" />&lt;/a>&amp;nbsp;&amp;nbsp;&amp;nbsp;This example is also available on &lt;a href="https://www.youtube.com/watch?v=hRspMChITE4" target="_blank">YouTube&lt;/a>.
 &lt;/div>
&lt;/div>

&lt;svg xmlns="http://www.w3.org/2000/svg" style="display: none;">
 &lt;symbol id="check-fill" fill="currentColor" viewBox="0 0 16 16">
 &lt;path d="M16 8A8 8 0 1 1 0 8a8 8 0 0 1 16 0zm-3.97-3.03a.75.75 0 0 0-1.08.022L7.477 9.417 5.384 7.323a.75.75 0 0 0-1.06 1.06L6.97 11.03a.75.75 0 0 0 1.079-.02l3.992-4.99a.75.75 0 0 0-.01-1.05z"/>
 &lt;/symbol>
 &lt;symbol id="info-fill" fill="currentColor" viewBox="0 0 16 16">
 &lt;path d="M8 16A8 8 0 1 0 8 0a8 8 0 0 0 0 16zm.93-9.412-1 4.705c-.07.34.029.533.304.533.194 0 .487-.07.686-.246l-.088.416c-.287.346-.92.598-1.465.598-.703 0-1.002-.422-.808-1.319l.738-3.468c.064-.293.006-.399-.287-.47l-.451-.081.082-.381 2.29-.287zM8 5.5a1 1 0 1 1 0-2 1 1 0 0 1 0 2z"/>
 &lt;/symbol>
 &lt;symbol id="warning-fill" fill="currentColor" viewBox="0 0 16 16">
 &lt;path d="M8.982 1.566a1.13 1.13 0 0 0-1.96 0L.165 13.233c-.457.778.091 1.767.98 1.767h13.713c.889 0 1.438-.99.98-1.767L8.982 1.566zM8 5c.535 0 .954.462.9.995l-.35 3.507a.552.552 0 0 1-1.1 0L7.1 5.995A.905.905 0 0 1 8 5zm.002 6a1 1 0 1 1 0 2 1 1 0 0 1 0-2z"/>
 &lt;/symbol>
 &lt;symbol id="danger-fill" fill="currentColor" viewBox="0 0 16 16">
 &lt;path d="M8.982 1.566a1.13 1.13 0 0 0-1.96 0L.165 13.233c-.457.778.091 1.767.98 1.767h13.713c.889 0 1.438-.99.98-1.767L8.982 1.566zM8 5c.535 0 .954.462.9.995l-.35 3.507a.552.552 0 0 1-1.1 0L7.1 5.995A.905.905 0 0 1 8 5zm.002 6a1 1 0 1 1 0 2 1 1 0 0 1 0-2z"/>
 &lt;/symbol>
&lt;/svg>

&lt;div class="alert alert-primary alert-info d-flex align-items-center" role="alert">
 &lt;svg class="bi flex-shrink-0 me-2" width="24" height="24" role="img" aria-label="Extra Infos:">&lt;use xlink:href="#info-fill"/>&lt;/svg>
 &lt;div>
 &lt;b>Extra Infos:&amp;nbsp;&lt;/b>
 Additional information on the basics of MeVisLab are explained
&lt;a href="https://mevislabdownloads.mevis.de/docs/current/MeVisLab/Resources/Documentation/Publish/SDK/GettingStarted/index.html" target="_blank">here&lt;/a>
 &lt;/div>
&lt;/div>
&lt;h3 id="TutorialLoadingData">Loading Data&lt;/h3>
&lt;p>First, we need to load the data we would like to work on, e.g. a CT scan. In MeVisLab, modules are used to perform their associated specific task, they are the basic entities you will be working with. Each module has a different functionality for processing, visualization and interaction. Connecting modules enables the development of complex processing pipelines. You will get to know different types of modules throughout the course of this tutorial.&lt;/p></description></item><item><title>Example 2: Macro modules and Module Interaction</title><link>https://mevislab.github.io/examples/pull/119/tutorials/basicmechanisms/macromodules/</link><pubDate>Mon, 19 May 2025 00:00:00 +0000</pubDate><guid>https://mevislab.github.io/examples/pull/119/tutorials/basicmechanisms/macromodules/</guid><description>&lt;h1 id="TutorialChapter6">Example 2: Macro modules&lt;/h1>
&lt;h2 id="what-is-a-macro-module">What is a Macro Module?&lt;/h2>
&lt;p>A macro module can be used to develop your own functionality in MeVisLab.&lt;/p>
&lt;p>Like all other standard MeVisLab modules, macro modules have a defined interface with inputs, outputs, and parameters (fields). This interface allows it to interact with other modules in a larger network. They hide the complexity of the internal network or Python code, presenting a more simplified and manageable unit to the user.&lt;/p></description></item><item><title>Example 2.2: Creation of global macro modules</title><link>https://mevislab.github.io/examples/pull/119/tutorials/basicmechanisms/macromodules/globalmacromodules/</link><pubDate>Wed, 15 Jun 2022 08:58:44 +0200</pubDate><guid>https://mevislab.github.io/examples/pull/119/tutorials/basicmechanisms/macromodules/globalmacromodules/</guid><description>&lt;h1 id="example-22-global-macro-modules">Example 2.2: Global macro modules&lt;/h1>
&lt;div class="alert alert-secondary d-flex align-items-center" role="alert">
 &lt;div>
 &lt;img width="100px" src="https://mevislab.github.io/examples/pull/119/images/youtube.svg" />&amp;nbsp;&amp;nbsp;&lt;a href="https://www.youtube.com/watch?v=M4HnA0d1V5k" target="_blank">&lt;img width="100px" src="https://img.youtube.com/vi/M4HnA0d1V5k/0.jpg" />&lt;/a>&amp;nbsp;&amp;nbsp;&amp;nbsp;This example is also available on &lt;a href="https://www.youtube.com/watch?v=M4HnA0d1V5k" target="_blank">YouTube&lt;/a>.
 &lt;/div>
&lt;/div>
&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;p>In this chapter you will learn how to create global macro modules. There are many ways to do this. You can convert local macros into global macro modules or you can directly create global macro modules using the &lt;em>Project Wizard&lt;/em>. In contrast to local macro modules, global macro modules are commonly available throughout projects and can be found via module search and under &lt;i>[
 
 Modules
]&lt;/i>.&lt;/p></description></item><item><title>Example 2.3: Creation of module help</title><link>https://mevislab.github.io/examples/pull/119/tutorials/basicmechanisms/macromodules/helpfiles/</link><pubDate>Wed, 15 Jun 2022 08:58:44 +0200</pubDate><guid>https://mevislab.github.io/examples/pull/119/tutorials/basicmechanisms/macromodules/helpfiles/</guid><description>&lt;h1 id="example-23-creation-of-module-help">Example 2.3: Creation of module help&lt;/h1>
&lt;p>Generating help of a macro module is part of the video about macro modules from &lt;a href="https://mevislab.github.io/examples/pull/119/tutorials/basicmechanisms/macromodules/globalmacromodules">Example 2: Creation of global macro modules&lt;/a>
&lt;div class="alert alert-secondary d-flex align-items-center" role="alert">
 &lt;div>
 &lt;img width="100px" src="https://mevislab.github.io/examples/pull/119/images/youtube.svg" />&amp;nbsp;&amp;nbsp;&lt;a href="https://www.youtube.com/watch?v=M4HnA0d1V5k" target="_blank">&lt;img width="100px" src="https://img.youtube.com/vi/M4HnA0d1V5k/0.jpg" />&lt;/a>&amp;nbsp;&amp;nbsp;&amp;nbsp;This example is also available on &lt;a href="https://www.youtube.com/watch?v=M4HnA0d1V5k" target="_blank">YouTube&lt;/a>.
 &lt;/div>
&lt;/div>&lt;/p>
&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;p>In this chapter, you will learn how to create a help page and an example network. For hands-on training, we will use the macro module &lt;code>Filter&lt;/code>, which was created in the &lt;a href="https://mevislab.github.io/examples/pull/119/tutorials/basicmechanisms/macromodules/globalmacromodules">previous chapter&lt;/a>.&lt;/p></description></item><item><title>Example 2.4: GUI development</title><link>https://mevislab.github.io/examples/pull/119/tutorials/basicmechanisms/macromodules/guidesign/</link><pubDate>Wed, 15 Jun 2022 08:58:44 +0200</pubDate><guid>https://mevislab.github.io/examples/pull/119/tutorials/basicmechanisms/macromodules/guidesign/</guid><description>&lt;h1 id="example-24-building-a-panel-layout-interactions-with-macro-modules">Example 2.4: Building a Panel Layout: Interactions with macro modules&lt;/h1>
&lt;div class="alert alert-secondary d-flex align-items-center" role="alert">
 &lt;div>
 &lt;img width="100px" src="https://mevislab.github.io/examples/pull/119/images/youtube.svg" />&amp;nbsp;&amp;nbsp;&lt;a href="https://www.youtube.com/watch?v=tdQUkkROWBg" target="_blank">&lt;img width="100px" src="https://img.youtube.com/vi/tdQUkkROWBg/0.jpg" />&lt;/a>&amp;nbsp;&amp;nbsp;&amp;nbsp;This example is also available on &lt;a href="https://www.youtube.com/watch?v=tdQUkkROWBg" target="_blank">YouTube&lt;/a>.
 &lt;/div>
&lt;/div>
&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;p>This chapter will give you an introduction into the creation of module panels and user
interfaces. For the implementation you will need to
use the 
&lt;a href="https://mevislabdownloads.mevis.de/docs/current/MeVisLab/Resources/Documentation/Publish/SDK/MDLReference/index.html" target="_blank">MeVisLab Definition Language (MDL)&lt;/a>

.&lt;/p>

&lt;svg xmlns="http://www.w3.org/2000/svg" style="display: none;">
 &lt;symbol id="check-fill" fill="currentColor" viewBox="0 0 16 16">
 &lt;path d="M16 8A8 8 0 1 1 0 8a8 8 0 0 1 16 0zm-3.97-3.03a.75.75 0 0 0-1.08.022L7.477 9.417 5.384 7.323a.75.75 0 0 0-1.06 1.06L6.97 11.03a.75.75 0 0 0 1.079-.02l3.992-4.99a.75.75 0 0 0-.01-1.05z"/>
 &lt;/symbol>
 &lt;symbol id="info-fill" fill="currentColor" viewBox="0 0 16 16">
 &lt;path d="M8 16A8 8 0 1 0 8 0a8 8 0 0 0 0 16zm.93-9.412-1 4.705c-.07.34.029.533.304.533.194 0 .487-.07.686-.246l-.088.416c-.287.346-.92.598-1.465.598-.703 0-1.002-.422-.808-1.319l.738-3.468c.064-.293.006-.399-.287-.47l-.451-.081.082-.381 2.29-.287zM8 5.5a1 1 0 1 1 0-2 1 1 0 0 1 0 2z"/>
 &lt;/symbol>
 &lt;symbol id="warning-fill" fill="currentColor" viewBox="0 0 16 16">
 &lt;path d="M8.982 1.566a1.13 1.13 0 0 0-1.96 0L.165 13.233c-.457.778.091 1.767.98 1.767h13.713c.889 0 1.438-.99.98-1.767L8.982 1.566zM8 5c.535 0 .954.462.9.995l-.35 3.507a.552.552 0 0 1-1.1 0L7.1 5.995A.905.905 0 0 1 8 5zm.002 6a1 1 0 1 1 0 2 1 1 0 0 1 0-2z"/>
 &lt;/symbol>
 &lt;symbol id="danger-fill" fill="currentColor" viewBox="0 0 16 16">
 &lt;path d="M8.982 1.566a1.13 1.13 0 0 0-1.96 0L.165 13.233c-.457.778.091 1.767.98 1.767h13.713c.889 0 1.438-.99.98-1.767L8.982 1.566zM8 5c.535 0 .954.462.9.995l-.35 3.507a.552.552 0 0 1-1.1 0L7.1 5.995A.905.905 0 0 1 8 5zm.002 6a1 1 0 1 1 0 2 1 1 0 0 1 0-2z"/>
 &lt;/symbol>
&lt;/svg>

&lt;div class="alert alert-primary alert-info d-flex align-items-center" role="alert">
 &lt;svg class="bi flex-shrink-0 me-2" width="24" height="24" role="img" aria-label="Extra Infos:">&lt;use xlink:href="#info-fill"/>&lt;/svg>
 &lt;div>
 &lt;b>Extra Infos:&amp;nbsp;&lt;/b>
 More information about GUI design in MeVisLab can be found
&lt;a href="https://mevislabdownloads.mevis.de/docs/current/MeVisLab/Resources/Documentation/Publish/SDK/GettingStarted/ch11.html" target="_blank">here&lt;/a>
 &lt;/div>
&lt;/div>
&lt;h2 id="Example_Paneldesign">Creating a panel for the macro module flilter&lt;/h2>
&lt;h3 id="creation-of-a-module-panel">Creation of a module panel&lt;/h3>
&lt;p>In &lt;a href="https://mevislab.github.io/examples/pull/119/tutorials/basicmechanisms/macromodules/globalmacromodules">Example 2.2&lt;/a> we created the global macro module &lt;code>Filter&lt;/code>. By now, this module does not have a proper panel. When double-clicking 

&lt;img width="22px" src="https://mevislab.github.io/examples/pull/119/images/lmb.svg" alt="Left Mouse Button" />


 the module, the &lt;em>Automatic Panel&lt;/em> is shown.&lt;/p></description></item><item><title>Example 2.5: Interactions via Python scripting</title><link>https://mevislab.github.io/examples/pull/119/tutorials/basicmechanisms/macromodules/pythonscripting/</link><pubDate>Wed, 15 Jun 2022 08:58:44 +0200</pubDate><guid>https://mevislab.github.io/examples/pull/119/tutorials/basicmechanisms/macromodules/pythonscripting/</guid><description>&lt;h1 id="TutorialPythonScripting">Example 2.5: Module Interactions Using Python Scripting&lt;/h1>
&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;p>This chapter will give you an overview over Python scripting in MeVisLab. Here, no introduction into Python will be given. However, basic knowledge in Python is helpful. Instead, we will show how to integrate and use Python in the MeVisLab SDK.&lt;/p>
&lt;p>In fact, nearly everything in MeVisLab can be done via Python scripting: You can add modules to your network, or remove modules, you can dynamically establish and remove connections and so on. But, much more important: You can access module inputs and outputs, as well as module fields to process their parameters and data. You can equip user interfaces and panel with custom functionalities. Python can be used to implement module interactions. When you open a panel or you press a button in a panel, the executed actions are implemented via Python scripting.&lt;/p></description></item><item><title>Example 2.5.2: Module interactions via Python scripting</title><link>https://mevislab.github.io/examples/pull/119/tutorials/basicmechanisms/macromodules/scriptingexample2/</link><pubDate>Wed, 15 Jun 2022 08:58:44 +0200</pubDate><guid>https://mevislab.github.io/examples/pull/119/tutorials/basicmechanisms/macromodules/scriptingexample2/</guid><description>&lt;h1 id="example-252-module-interactions-via-python-scripting">Example 2.5.2: Module interactions via Python scripting&lt;/h1>
&lt;div class="alert alert-secondary d-flex align-items-center" role="alert">
 &lt;div>
 &lt;img width="100px" src="https://mevislab.github.io/examples/pull/119/images/youtube.svg" />&amp;nbsp;&amp;nbsp;&lt;a href="https://www.youtube.com/watch?v=hGq6vA7Ll9Q" target="_blank">&lt;img width="100px" src="https://img.youtube.com/vi/hGq6vA7Ll9Q/0.jpg" />&lt;/a>&amp;nbsp;&amp;nbsp;&amp;nbsp;This example is also available on &lt;a href="https://www.youtube.com/watch?v=hGq6vA7Ll9Q" target="_blank">YouTube&lt;/a>.
 &lt;/div>
&lt;/div>
&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;p>In this example, you will learn how to add Python scripting to your User Interface. The network used in &lt;a href="tutorials/dataobjects/contours/contourexample5/">Chapter V&lt;/a> will be used for creating the macro module.&lt;/p>
&lt;h2 id="steps-to-do">Steps to do&lt;/h2>
&lt;h3 id="creating-the-macro-module">Creating the macro module&lt;/h3>
&lt;p>First, we condense the example network into a macro module and then we create a panel for that module. To create a macro module use the
Project Wizard, which you find under &lt;i>[
 
 File
 &amp;rarr; 
 Run Project Wizard
]&lt;/i>. Select
&lt;em>Macro module&lt;/em> and press &lt;em>Run&lt;/em>.&lt;/p></description></item><item><title>Example 3: Creating a simple application</title><link>https://mevislab.github.io/examples/pull/119/tutorials/basicmechanisms/macromodules/viewerexample/</link><pubDate>Wed, 15 Jun 2022 08:58:44 +0200</pubDate><guid>https://mevislab.github.io/examples/pull/119/tutorials/basicmechanisms/macromodules/viewerexample/</guid><description>&lt;h1 id="example-3-creating-a-simple-application">Example 3: Creating a simple application&lt;/h1>
&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;p>In the previous examples, you already learned how to create macro modules, user interfaces and how to interact with your UI via Python scripting.&lt;/p>
&lt;p>In this example, you will learn how to create a simple Prototype application in MeVisLab including a User Interface with 2D and 3D viewer. You will learn how to implement field listeners and react on events.&lt;/p>
&lt;h2 id="steps-to-do">Steps to do&lt;/h2>
&lt;h3 id="create-your-network">Create your network&lt;/h3>
&lt;p>Start with an empty network and add the Module &lt;code>ImageLoad&lt;/code> to your workspace. Then add a &lt;code>View2D&lt;/code> and &lt;code>View3D&lt;/code> to your workspace and connect the modules as seen below.&lt;/p></description></item><item><title>Example 1: WebCam access with OpenCV</title><link>https://mevislab.github.io/examples/pull/119/tutorials/thirdparty/opencv/thirdpartyexample1/</link><pubDate>Wed, 15 Jun 2022 08:56:33 +0200</pubDate><guid>https://mevislab.github.io/examples/pull/119/tutorials/thirdparty/opencv/thirdpartyexample1/</guid><description>&lt;h1 id="example-1-webcam-access-with-opencv">Example 1: WebCam access with OpenCV&lt;/h1>
&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;p>In this example, we are using the &lt;code>PythonImage&lt;/code> module and access your WebCam to show the video in a &lt;code>View2D&lt;/code>.&lt;/p>
&lt;h2 id="steps-to-do">Steps to do&lt;/h2>
&lt;h3 id="creating-the-network-to-be-used-for-testing">Creating the network to be used for testing&lt;/h3>
&lt;p>Add the modules to your workspace and connect them as seen below.&lt;/p>
&lt;p>&lt;p class="page-image">
 &lt;a data-modal="bs-lightbox" href="https://mevislab.github.io/examples/pull/119/images/tutorials/thirdparty/network_example1.png" title="Example Network ">&lt;img id="Example Network " class="img-fluid rounded" src="https://mevislab.github.io/examples/pull/119/images/tutorials/thirdparty/network_example1.png" alt="Example Network " title="Example Network " />&lt;/a>
 &lt;figcaption class="figure-caption">Example Network &lt;/figcaption>
&lt;/p>
&lt;/p>
&lt;p>The viewer is empty because the image needs to be set via Python scripting.&lt;/p></description></item></channel></rss>