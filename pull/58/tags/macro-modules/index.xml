<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Macro modules on MeVisLab Examples</title><link>https://mevislab.github.io/examples/pull/58/tags/macro-modules/</link><description>Recent content in Macro modules on MeVisLab Examples</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Mon, 16 Jan 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://mevislab.github.io/examples/pull/58/tags/macro-modules/index.xml" rel="self" type="application/rss+xml"/><item><title>Chapter I: Basic Mechanisms of MeVisLab</title><link>https://mevislab.github.io/examples/pull/58/tutorials/basicmechanisms/</link><pubDate>Wed, 15 Jun 2022 08:54:53 +0200</pubDate><guid>https://mevislab.github.io/examples/pull/58/tutorials/basicmechanisms/</guid><description>Basic Mechanics of MeVisLab (Example: Building a Contour Filter) In this chapter you will learn the basic mechanisms of the MeVisLab IDE. You will learn how to re-use existing modules to load and view data and you will build your first processing pipeline.
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;This example is also available on YouTube. Extra Infos:&amp;nbsp; Additional information on the basics of MeVisLab are explained here Loading Data First, we need to load the data we would like to work on, e.</description></item><item><title>Example 2: Macro modules and Module Interaction</title><link>https://mevislab.github.io/examples/pull/58/tutorials/basicmechanisms/macromodules/</link><pubDate>Wed, 15 Jun 2022 08:58:44 +0200</pubDate><guid>https://mevislab.github.io/examples/pull/58/tutorials/basicmechanisms/macromodules/</guid><description>Example 2: Macro modules Macro modules and Module Interactions via User Interface and Python Scripting MeVisLab provides different types of modules, which can be distinguished by their color. The brown modules are called Macro modules. Macro modules condense a whole network into one module. You can open the internal network by pressing the middle mouse button or via right mouse click and select [ Help &amp;rarr; Show Internal Network ]. Macro modules provide the possibility to create customized user interfaces and Python interactions.</description></item><item><title>Example 2.2: Creation of Global Macro modules</title><link>https://mevislab.github.io/examples/pull/58/tutorials/basicmechanisms/macromodules/globalmacromodules/</link><pubDate>Wed, 15 Jun 2022 08:58:44 +0200</pubDate><guid>https://mevislab.github.io/examples/pull/58/tutorials/basicmechanisms/macromodules/globalmacromodules/</guid><description>Example 2.2: Global Macro modules &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;This example is also available on YouTube. Introduction In this chapter you will learn how to create global macro modules. There are many ways to do this. You can convert local macros into global macro modules or you can directly create global macro modules using the Project Wizard. In contrast to local macro modules, global macro modules are commonly available throughout projects and can be found via module search and under [ Modules ].</description></item><item><title>Example 2.3: Creation of module help</title><link>https://mevislab.github.io/examples/pull/58/tutorials/basicmechanisms/macromodules/helpfiles/</link><pubDate>Wed, 15 Jun 2022 08:58:44 +0200</pubDate><guid>https://mevislab.github.io/examples/pull/58/tutorials/basicmechanisms/macromodules/helpfiles/</guid><description>Example 2.3: Creation of module help Generating help of a Macro module is part of the video about Macro modules from Example 2: Creation of Global Macro modules &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;This example is also available on YouTube. Introduction In this chapter, you will learn how to create a help page and an example network. For hands-on training, we will use the macro module Filter, which was created in the previous chapter.
Depending on the way the macro module was created the default help page and example network might or might not exist.</description></item><item><title>Example 2.4: GUI development</title><link>https://mevislab.github.io/examples/pull/58/tutorials/basicmechanisms/macromodules/guidesign/</link><pubDate>Wed, 15 Jun 2022 08:58:44 +0200</pubDate><guid>https://mevislab.github.io/examples/pull/58/tutorials/basicmechanisms/macromodules/guidesign/</guid><description>Example 2.4: Building a Panel Layout: Interactions with Macro modules &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;This example is also available on YouTube. Introduction This chapter will give you an introduction into the creation of module panels and user interfaces. For the implementation you will need to use the MeVisLab Definition Language (MDL) .
Extra Infos:&amp;nbsp; More information about GUI design in MeVisLab can be found here Creating a panel for the macro module flilter Creation of a module panel In Example 2.</description></item><item><title>Example 2.5: Interactions via Python scripting</title><link>https://mevislab.github.io/examples/pull/58/tutorials/basicmechanisms/macromodules/pythonscripting/</link><pubDate>Wed, 15 Jun 2022 08:58:44 +0200</pubDate><guid>https://mevislab.github.io/examples/pull/58/tutorials/basicmechanisms/macromodules/pythonscripting/</guid><description>Example 2.5: Module Interactions Using Python Scripting Introduction This chapter will give you an overview over Python scripting in MeVisLab. Here, no introduction into Python will be given. However, basic knowledge in Python is helpful. Instead, we will show how to integrate and use Python in the MeVisLab SDK.
In fact, nearly everything in MeVisLab can be done via Python scripting: You can add modules to your network, or remove modules, you can dynamically establish and remove connections and so on.</description></item><item><title>Example 2.5.2: Module interactions via Python scripting</title><link>https://mevislab.github.io/examples/pull/58/tutorials/basicmechanisms/macromodules/scriptingexample2/</link><pubDate>Wed, 15 Jun 2022 08:58:44 +0200</pubDate><guid>https://mevislab.github.io/examples/pull/58/tutorials/basicmechanisms/macromodules/scriptingexample2/</guid><description>Example 2.5.2: Module interactions via Python scripting &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;This example is also available on YouTube. Introduction In this example, you will learn how to add Python scripting to your User Interface. The network used in Chapter V will be used for creating the Macro module.
Steps to do Creating the macro module First, we condense the example network into a macro module and then we create a panel for that module. To create a macro module use the Project Wizard, which you find under [ File &amp;rarr; Run Project Wizard ].</description></item><item><title>Example 3: Creating a simple application</title><link>https://mevislab.github.io/examples/pull/58/tutorials/basicmechanisms/macromodules/viewerexample/</link><pubDate>Wed, 15 Jun 2022 08:58:44 +0200</pubDate><guid>https://mevislab.github.io/examples/pull/58/tutorials/basicmechanisms/macromodules/viewerexample/</guid><description>Example 3: Creating a simple application Introduction In the previous examples, you already learned how to create Macro modules, user interfaces and how to interact with your UI via Python scripting.
In this example, you will learn how to create a simple Prototype application in MeVisLab including a User Interface with 2D and 3D viewer. You will learn how to implement field listeners and react on events.
Steps to do Create your network Start with an empty network and add the Module ImageLoad to your workspace.</description></item><item><title>Step 2: Prototyping - Create a Macro module</title><link>https://mevislab.github.io/examples/pull/58/tutorials/summary/summary2/</link><pubDate>Mon, 16 Jan 2023 00:00:00 +0000</pubDate><guid>https://mevislab.github.io/examples/pull/58/tutorials/summary/summary2/</guid><description>Step 2: Prototyping - Create a Macro module Introduction In this example, we encapsulate the previously developed prototype network into a Macro module for future application development and automated testing.
Steps to do Make sure to have your *.mlab file from previous Step 1 available.
Package creation Packages are described in detail in Example 2.1: Package creation. If you already have your own package, you can skip this part and continue creating a Macro module.</description></item><item><title>Example 1: WebCam access with OpenCV</title><link>https://mevislab.github.io/examples/pull/58/tutorials/thirdparty/opencv/thirdpartyexample1/</link><pubDate>Wed, 15 Jun 2022 08:56:33 +0200</pubDate><guid>https://mevislab.github.io/examples/pull/58/tutorials/thirdparty/opencv/thirdpartyexample1/</guid><description>Example 1: WebCam access with OpenCV Introduction In this example, we are using the PythonImage module and access your WebCam to show the video in a View2D.
Steps to do Creating the network to be used for testing Add the modules to your workspace and connect them as seen below.
Example Network The viewer is empty because the image needs to be set via Python scripting.
Info:&amp;nbsp; More information about the PythonImage module can be found here Create a macro module Now you need to create a macro module from your network.</description></item></channel></rss>