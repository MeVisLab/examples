<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>2D on MeVisLab Examples</title><link>https://mevislab.github.io/examples/pull/118/tags/2d/</link><description>Recent content in 2D on MeVisLab Examples</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Thu, 01 Aug 2024 00:00:00 +0000</lastBuildDate><atom:link href="https://mevislab.github.io/examples/pull/118/tags/2d/index.xml" rel="self" type="application/rss+xml"/><item><title>Chapter III: Visualization</title><link>https://mevislab.github.io/examples/pull/118/tutorials/visualization/</link><pubDate>Wed, 15 Jun 2022 08:56:33 +0200</pubDate><guid>https://mevislab.github.io/examples/pull/118/tutorials/visualization/</guid><description>&lt;h1 id="TutorialVisualization">Visualization in MeVisLab&lt;/h1>
&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;p>Images and data objects can be rendered in 2D and 3D and interacted with in several ways using a set of tools available through MeVisLab.
In this chapter in particular, we will focus on simple image interaction with two- and three-dimensional visualizations.&lt;/p>

&lt;svg xmlns="http://www.w3.org/2000/svg" style="display: none;">
 &lt;symbol id="check-fill" fill="currentColor" viewBox="0 0 16 16">
 &lt;path d="M16 8A8 8 0 1 1 0 8a8 8 0 0 1 16 0zm-3.97-3.03a.75.75 0 0 0-1.08.022L7.477 9.417 5.384 7.323a.75.75 0 0 0-1.06 1.06L6.97 11.03a.75.75 0 0 0 1.079-.02l3.992-4.99a.75.75 0 0 0-.01-1.05z"/>
 &lt;/symbol>
 &lt;symbol id="info-fill" fill="currentColor" viewBox="0 0 16 16">
 &lt;path d="M8 16A8 8 0 1 0 8 0a8 8 0 0 0 0 16zm.93-9.412-1 4.705c-.07.34.029.533.304.533.194 0 .487-.07.686-.246l-.088.416c-.287.346-.92.598-1.465.598-.703 0-1.002-.422-.808-1.319l.738-3.468c.064-.293.006-.399-.287-.47l-.451-.081.082-.381 2.29-.287zM8 5.5a1 1 0 1 1 0-2 1 1 0 0 1 0 2z"/>
 &lt;/symbol>
 &lt;symbol id="warning-fill" fill="currentColor" viewBox="0 0 16 16">
 &lt;path d="M8.982 1.566a1.13 1.13 0 0 0-1.96 0L.165 13.233c-.457.778.091 1.767.98 1.767h13.713c.889 0 1.438-.99.98-1.767L8.982 1.566zM8 5c.535 0 .954.462.9.995l-.35 3.507a.552.552 0 0 1-1.1 0L7.1 5.995A.905.905 0 0 1 8 5zm.002 6a1 1 0 1 1 0 2 1 1 0 0 1 0-2z"/>
 &lt;/symbol>
 &lt;symbol id="danger-fill" fill="currentColor" viewBox="0 0 16 16">
 &lt;path d="M8.982 1.566a1.13 1.13 0 0 0-1.96 0L.165 13.233c-.457.778.091 1.767.98 1.767h13.713c.889 0 1.438-.99.98-1.767L8.982 1.566zM8 5c.535 0 .954.462.9.995l-.35 3.507a.552.552 0 0 1-1.1 0L7.1 5.995A.905.905 0 0 1 8 5zm.002 6a1 1 0 1 1 0 2 1 1 0 0 1 0-2z"/>
 &lt;/symbol>
&lt;/svg>

&lt;div class="alert alert-primary alert-info d-flex align-items-center" role="alert">
 &lt;svg class="bi flex-shrink-0 me-2" width="24" height="24" role="img" aria-label="Info:">&lt;use xlink:href="#info-fill"/>&lt;/svg>
 &lt;div>
 &lt;b>Info:&amp;nbsp;&lt;/b>
 Not only pixel- and voxel-based data, but also scene objects and 3D scenes can be visualized. See our tutorial on &lt;a href="https://mevislab.github.io/examples/pull/118/tutorials/openinventor#TutorialOpenInventorModules">OpenInventorModules&lt;/a> for further information.
 &lt;/div>
&lt;/div>
&lt;h2 id="view2d-and-view3d">View2D and View3D&lt;/h2>
&lt;p>An easy way to display data and images in 2D and 3D is by using the Modules &lt;code>View2D&lt;/code> and &lt;code>View3D&lt;/code>. What can be done with these viewers?&lt;/p></description></item><item><title>Example 1: Synchronous view of two images</title><link>https://mevislab.github.io/examples/pull/118/tutorials/visualization/visualizationexample1/</link><pubDate>Wed, 15 Jun 2022 08:56:33 +0200</pubDate><guid>https://mevislab.github.io/examples/pull/118/tutorials/visualization/visualizationexample1/</guid><description>&lt;h1 id="VisualizationExample1">Example 1: Synchronous view of two images&lt;/h1>
&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;p>In this example we like to use the module &lt;code>SynchroView2D&lt;/code> to be able to inspect two different images simultaneously.&lt;/p>
&lt;p>The module &lt;code>SynchroView2D&lt;/code> provides two 2D viewers that are synchronized.&lt;/p>
&lt;p>As in Tutorial &lt;a href="https://mevislab.github.io/examples/pull/118/tutorials/basicmechanisms/#TutorialParameterConnection">Chapter 1 - Basic Mechanics of MeVisLab&lt;/a>, the processed and the unprocessed image can be displayed simultaneously. Scrolling through one image automatically changes the slices of both viewers, so slices with the same slice number are shown in both images.&lt;/p></description></item><item><title>Example 2: Creating a magnifier</title><link>https://mevislab.github.io/examples/pull/118/tutorials/visualization/visualizationexample2/</link><pubDate>Wed, 15 Jun 2022 08:56:33 +0200</pubDate><guid>https://mevislab.github.io/examples/pull/118/tutorials/visualization/visualizationexample2/</guid><description>&lt;h1 id="TutorialVisualizationExample2">Example 2: Creating a magnifier&lt;/h1>
&lt;div class="alert alert-secondary d-flex align-items-center" role="alert">
 &lt;div>
 &lt;img width="100px" src="https://mevislab.github.io/examples/pull/118/images/youtube.svg" />&amp;nbsp;&amp;nbsp;&lt;a href="https://www.youtube.com/watch?v=lfq_TkWOuCo" target="_blank">&lt;img width="100px" src="https://img.youtube.com/vi/lfq_TkWOuCo/0.jpg" />&lt;/a>&amp;nbsp;&amp;nbsp;&amp;nbsp;This example is also available on &lt;a href="https://www.youtube.com/watch?v=lfq_TkWOuCo" target="_blank">YouTube&lt;/a>.
 &lt;/div>
&lt;/div>
&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;p>Medical images are typically displayed in three different viewing directions (see image): coronal, axial and sagittal.&lt;/p>
&lt;p>Using the Viewer &lt;code>OrthoView2D&lt;/code> you are able to decide, which viewing direction you like to use. In addition to that, you have the opportunity to display all three orthogonal viewing directions simultaneously. Here, we like to display an image of the head in all three viewing directions and mark positions in the image.&lt;/p></description></item><item><title>Example 3: Image Overlays</title><link>https://mevislab.github.io/examples/pull/118/tutorials/visualization/visualizationexample3/</link><pubDate>Wed, 15 Jun 2022 08:56:33 +0200</pubDate><guid>https://mevislab.github.io/examples/pull/118/tutorials/visualization/visualizationexample3/</guid><description>&lt;h1 id="TutorialVisualizationExample3">Example 3: How to blend images over each other&lt;/h1>
&lt;div class="alert alert-secondary d-flex align-items-center" role="alert">
 &lt;div>
 &lt;img width="100px" src="https://mevislab.github.io/examples/pull/118/images/youtube.svg" />&amp;nbsp;&amp;nbsp;&lt;a href="https://www.youtube.com/watch?v=e8iFGp-St0c" target="_blank">&lt;img width="100px" src="https://img.youtube.com/vi/e8iFGp-St0c/0.jpg" />&lt;/a>&amp;nbsp;&amp;nbsp;&amp;nbsp;This example is also available on &lt;a href="https://www.youtube.com/watch?v=e8iFGp-St0c" target="_blank">YouTube&lt;/a>.
 &lt;/div>
&lt;/div>
&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;p>In this example we will show you how to blend a 2D image over another one. With the help of the module &lt;code>SoView2DOverlay&lt;/code> we will create an overlay, which allows us to highlight all bones in the scan.&lt;/p>
&lt;h2 id="steps-to-do">Steps to do&lt;/h2>
&lt;h3 id="develop-your-network">Develop your network&lt;/h3>
&lt;p>Start this example by adding the shown modules, connecting the modules to form a network and loading the example image &lt;em>Bone.tiff&lt;/em>.&lt;/p></description></item><item><title>Example 4: Display 2D images in Open Inventor SoRenderArea</title><link>https://mevislab.github.io/examples/pull/118/tutorials/visualization/visualizationexample4/</link><pubDate>Wed, 15 Jun 2022 08:56:33 +0200</pubDate><guid>https://mevislab.github.io/examples/pull/118/tutorials/visualization/visualizationexample4/</guid><description>&lt;h1 id="TutorialVisualizationExample4">Example 4: Display images converted to Open Inventor scene objects&lt;/h1>
&lt;div class="alert alert-secondary d-flex align-items-center" role="alert">
 &lt;div>
 &lt;img width="100px" src="https://mevislab.github.io/examples/pull/118/images/youtube.svg" />&amp;nbsp;&amp;nbsp;&lt;a href="https://www.youtube.com/watch?v=WaD6zuvVNek" target="_blank">&lt;img width="100px" src="https://img.youtube.com/vi/WaD6zuvVNek/0.jpg" />&lt;/a>&amp;nbsp;&amp;nbsp;&amp;nbsp;This example is also available on &lt;a href="https://www.youtube.com/watch?v=WaD6zuvVNek" target="_blank">YouTube&lt;/a>.
 &lt;/div>
&lt;/div>
&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;p>In the previous example you learned how to use the module &lt;code>SoView2DOverlay&lt;/code> together with a &lt;code>View2D&lt;/code>. MeVisLab provides a whole family of &lt;code>SoView2D*&lt;/code> modules (&lt;code>SoView2DOverlay&lt;/code>, &lt;code>SoView2DRectangle&lt;/code>, &lt;code>SoView2DGrid&lt;/code>, &amp;hellip;). All these modules create or interact with scene objects and are based on the module &lt;code>SoView2D&lt;/code>, which can convert a voxel-image into a scene object. In this example, you will get to know some members of the &lt;code>SoView2D&lt;/code>-family.&lt;/p></description></item><item><title>Chapter V: Data Objects</title><link>https://mevislab.github.io/examples/pull/118/tutorials/dataobjects/</link><pubDate>Wed, 15 Jun 2022 08:56:33 +0200</pubDate><guid>https://mevislab.github.io/examples/pull/118/tutorials/dataobjects/</guid><description>&lt;h2 id="TutorialDataObjects">Data Objects in MeVisLab&lt;/h2>
&lt;p>MeVisLab provides pre-defined data objects, e. g.&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://mevislab.github.io/examples/pull/118/tutorials/dataobjects/contourobjects">Contour Segmented Objects (CSOs)&lt;/a> &lt;br>
which are three-dimensional objects encapsulating formerly defined contours within images.&lt;/li>
&lt;li>&lt;a href="https://mevislab.github.io/examples/pull/118/tutorials/dataobjects/surfaceobjects">Surface Objects (Winged Edge Meshes or WEMs)&lt;/a> &lt;br>
represent the surface of geometrical figures and allow the user to manipulate them.&lt;/li>
&lt;li>&lt;a href="https://mevislab.github.io/examples/pull/118/tutorials/dataobjects/markerobjects">Markers&lt;/a> &lt;br>
are used to mark specific locations or aspects of an image and allow to process those later on.&lt;/li>
&lt;li>&lt;a href="tutorials/dataobjects/curves">Curves&lt;/a> &lt;br>
can print the results of a function as two-dimensional mathematical graphs into a diagram.&lt;/li>
&lt;/ul>
&lt;p>Usage, advantages and disadvantages of each above mentioned data object type will be covered in the following specified chapters, where you will be building example networks for some of the most common use cases.&lt;/p></description></item><item><title>Contour Objects (CSO)</title><link>https://mevislab.github.io/examples/pull/118/tutorials/dataobjects/contourobjects/</link><pubDate>Wed, 15 Jun 2022 08:56:33 +0200</pubDate><guid>https://mevislab.github.io/examples/pull/118/tutorials/dataobjects/contourobjects/</guid><description>&lt;h1 id="CSO">Contour Segmented Objects (CSOs) in MeVisLab&lt;/h1>
&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;h3 id="structure-of-csos">Structure of CSOs&lt;/h3>
&lt;p>MeVisLab provides modules to create contours in images. 3D objects which encapsulate these contours are called Contour Segmented Objects (CSOs).&lt;/p>
&lt;p>In the next image, you can see a rectangular shaped CSO. The pink circles you can see are called &lt;em>Seed Points&lt;/em>.&lt;/p>
&lt;p>&lt;em>Seed Points&lt;/em> define the shape of the CSO. In case of a rectangle, you need four &lt;em>Seed Points&lt;/em> forming the corners, to define the whole rectangle.&lt;/p></description></item><item><title>Contour Example 1: Creation of Contours</title><link>https://mevislab.github.io/examples/pull/118/tutorials/dataobjects/contours/contourexample1/</link><pubDate>Wed, 15 Jun 2022 08:56:33 +0200</pubDate><guid>https://mevislab.github.io/examples/pull/118/tutorials/dataobjects/contours/contourexample1/</guid><description>&lt;h1 id="TutorialContoursExample1">Contour Example 1: Creation of Contours&lt;/h1>
&lt;div class="alert alert-secondary d-flex align-items-center" role="alert">
 &lt;div>
 &lt;img width="100px" src="https://mevislab.github.io/examples/pull/118/images/youtube.svg" />&amp;nbsp;&amp;nbsp;&lt;a href="https://www.youtube.com/watch?v=ygYJMmQ95v8" target="_blank">&lt;img width="100px" src="https://img.youtube.com/vi/ygYJMmQ95v8/0.jpg" />&lt;/a>&amp;nbsp;&amp;nbsp;&amp;nbsp;This example is also available on &lt;a href="https://www.youtube.com/watch?v=ygYJMmQ95v8" target="_blank">YouTube&lt;/a>.
 &lt;/div>
&lt;/div>
&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;p>We like to start with the creation of CSOs. To create CSOs, you need a &lt;code>SoCSO*&lt;/code>-Editor. There are several different editors, which can be used to create CSOs (see &lt;a href="tutorials/dataobjects/contourobjects#CSOEditors">here&lt;/a>). Some of them are introduced in this example.&lt;/p>
&lt;h2 id="steps-to-do">Steps to do&lt;/h2>
&lt;h3 id="develop-your-network">Develop your network&lt;/h3>
&lt;p>For this example, we need the following modules. Add the modules to your workspace, connect them as shown below and load the example image &lt;em>$(DemoDataPath)/BrainMultiModal/ProbandT1.tif&lt;/em>.&lt;/p></description></item><item><title>Contour Example 2: Contour Interpolation</title><link>https://mevislab.github.io/examples/pull/118/tutorials/dataobjects/contours/contourexample2/</link><pubDate>Wed, 15 Jun 2022 08:56:33 +0200</pubDate><guid>https://mevislab.github.io/examples/pull/118/tutorials/dataobjects/contours/contourexample2/</guid><description>&lt;h1 id="TutorialContoursExample2">Contour Example 2: Creating Contours using Live Wire and Interpolation&lt;/h1>
&lt;div class="alert alert-secondary d-flex align-items-center" role="alert">
 &lt;div>
 &lt;img width="100px" src="https://mevislab.github.io/examples/pull/118/images/youtube.svg" />&amp;nbsp;&amp;nbsp;&lt;a href="https://www.youtube.com/watch?v=l2ih_maKfSw" target="_blank">&lt;img width="100px" src="https://img.youtube.com/vi/l2ih_maKfSw/0.jpg" />&lt;/a>&amp;nbsp;&amp;nbsp;&amp;nbsp;This example is also available on &lt;a href="https://www.youtube.com/watch?v=l2ih_maKfSw" target="_blank">YouTube&lt;/a>.
 &lt;/div>
&lt;/div>
&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;p>In this example, we like to create CSOs using the &lt;strong>Live Wire
Algorithm&lt;/strong>, which allows semi-automatic CSO creation. The algorithm
uses edge detection to support the user creating CSOs.&lt;/p>
&lt;p>We also like to interpolate CSOs over slices. That means additional CSOs are
generated between manual segmentations based on a linear interpolation.&lt;/p></description></item><item><title>Contour Example 3: 2D and 3D Visualization of Contours</title><link>https://mevislab.github.io/examples/pull/118/tutorials/dataobjects/contours/contourexample3/</link><pubDate>Wed, 15 Jun 2022 08:56:33 +0200</pubDate><guid>https://mevislab.github.io/examples/pull/118/tutorials/dataobjects/contours/contourexample3/</guid><description>&lt;h1 id="TutorialContoursExample3">Contour Example 3: Overlay Creation and 3D Visualization of Contours&lt;/h1>
&lt;div class="alert alert-secondary d-flex align-items-center" role="alert">
 &lt;div>
 &lt;img width="100px" src="https://mevislab.github.io/examples/pull/118/images/youtube.svg" />&amp;nbsp;&amp;nbsp;&lt;a href="https://www.youtube.com/watch?v=6NmKQagTDKg" target="_blank">&lt;img width="100px" src="https://img.youtube.com/vi/6NmKQagTDKg/0.jpg" />&lt;/a>&amp;nbsp;&amp;nbsp;&amp;nbsp;This example is also available on &lt;a href="https://www.youtube.com/watch?v=6NmKQagTDKg" target="_blank">YouTube&lt;/a>.
 &lt;/div>
&lt;/div>
&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;p>In this example, we&amp;rsquo;d like to use the created CSOs to display an overlay.
This allows us to mark one of two lungs. In addition to
that, we will display the whole segmented lobe of the lung in a 3D
image.&lt;/p>
&lt;h2 id="steps-to-do">Steps to do&lt;/h2>
&lt;h3 id="develop-your-network">Develop your network&lt;/h3>
&lt;p>Use the network from the &lt;a href="https://mevislab.github.io/examples/pull/118/tutorials/dataobjects/contours/contourexample2">contour example 2&lt;/a> and add the modules &lt;code>VoxelizeCSO&lt;/code>,
&lt;code>SoView2DOverlay&lt;/code> and &lt;code>View2D&lt;/code> to your workspace. Connect the module as
shown. The module &lt;code>VoxelizeCSO&lt;/code> allows to convert CSOs into voxel images.&lt;/p></description></item><item><title>Contour Example 4: Annotation of Images</title><link>https://mevislab.github.io/examples/pull/118/tutorials/dataobjects/contours/contourexample4/</link><pubDate>Wed, 15 Jun 2022 08:56:33 +0200</pubDate><guid>https://mevislab.github.io/examples/pull/118/tutorials/dataobjects/contours/contourexample4/</guid><description>&lt;h1 id="TutorialContoursExample4">Contour Example 4: Annotation of Images&lt;/h1>
&lt;div class="alert alert-secondary d-flex align-items-center" role="alert">
 &lt;div>
 &lt;img width="100px" src="https://mevislab.github.io/examples/pull/118/images/youtube.svg" />&amp;nbsp;&amp;nbsp;&lt;a href="https://www.youtube.com/watch?v=bT2ZprYcuOU" target="_blank">&lt;img width="100px" src="https://img.youtube.com/vi/bT2ZprYcuOU/0.jpg" />&lt;/a>&amp;nbsp;&amp;nbsp;&amp;nbsp;This example is also available on &lt;a href="https://www.youtube.com/watch?v=bT2ZprYcuOU" target="_blank">YouTube&lt;/a>.
 &lt;/div>
&lt;/div>
&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;p>In this example we like to calculate the volume of our object, in this
case the part of the lung we have segmented.&lt;/p>
&lt;h2 id="steps-to-do">Steps to do&lt;/h2>
&lt;h3 id="develop-your-network-and-calculate-the-lung-volume">Develop your network and calculate the lung volume&lt;/h3>
&lt;p>Add the module &lt;code>CalculateVolume&lt;/code> and &lt;code>SoView2DAnnotation&lt;/code> to your workspace
and connect both modules as shown. Update the module &lt;code>CalculateVolume&lt;/code>,
which directly shows the volume of our object.&lt;/p></description></item><item><title>Contour Example 5: Contours and Ghosting</title><link>https://mevislab.github.io/examples/pull/118/tutorials/dataobjects/contours/contourexample5/</link><pubDate>Wed, 15 Jun 2022 08:56:33 +0200</pubDate><guid>https://mevislab.github.io/examples/pull/118/tutorials/dataobjects/contours/contourexample5/</guid><description>&lt;h1 id="TutorialContoursExample5">Contour Example 5: Visualizing Contours and Images&lt;/h1>
&lt;div class="alert alert-secondary d-flex align-items-center" role="alert">
 &lt;div>
 &lt;img width="100px" src="https://mevislab.github.io/examples/pull/118/images/youtube.svg" />&amp;nbsp;&amp;nbsp;&lt;a href="https://www.youtube.com/watch?v=6fHmy57P3yQ" target="_blank">&lt;img width="100px" src="https://img.youtube.com/vi/6fHmy57P3yQ/0.jpg" />&lt;/a>&amp;nbsp;&amp;nbsp;&amp;nbsp;This example is also available on &lt;a href="https://www.youtube.com/watch?v=6fHmy57P3yQ" target="_blank">YouTube&lt;/a>.
 &lt;/div>
&lt;/div>
&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;p>In this example, we like to automatically create CSOs based on a predefined iso value.&lt;/p>
&lt;h2 id="steps-to-do">Steps to do&lt;/h2>
&lt;h3 id="develop-your-network">Develop your network&lt;/h3>
&lt;p>Add the following modules to your workspace and connect them as shown.
Load the example image &lt;em>Bone.tiff&lt;/em>.&lt;/p>
&lt;h3 id="automatic-creation-of-csos-based-on-the-iso-value">Automatic creation of CSOs based on the iso value&lt;/h3>
&lt;p>Now, open the panel of &lt;code>CSOIsoGenerator&lt;/code> to set the &lt;em>Iso Value&lt;/em> to 1200. If you press &lt;em>Update&lt;/em> in
the panel, you can see the creation of CSOs on every slide, when opening
the module &lt;code>View2D&lt;/code>. In addition to that the number of CSOs is displayed in the &lt;code>CSOManager&lt;/code>. The module
&lt;code>CSOIsoGenerator&lt;/code> generates iso-contours for each slice at a fixed iso
value. This means that closed CSOs are formed based on the detection of the
voxel value of 1200 on every slice.&lt;/p></description></item><item><title>Contour Example 6: Adding Labels to Contours</title><link>https://mevislab.github.io/examples/pull/118/tutorials/dataobjects/contours/contourexample6/</link><pubDate>Mon, 11 Mar 2024 00:00:00 +0000</pubDate><guid>https://mevislab.github.io/examples/pull/118/tutorials/dataobjects/contours/contourexample6/</guid><description>&lt;h1 id="TutorialContoursExample6">Contour Example 6: Adding Labels to Contours&lt;/h1>
&lt;div class="alert alert-secondary d-flex align-items-center" role="alert">
 &lt;div>
 &lt;img width="100px" src="https://mevislab.github.io/examples/pull/118/images/youtube.svg" />&amp;nbsp;&amp;nbsp;&lt;a href="https://www.youtube.com/watch?v=-ACAoeK2Fm8" target="_blank">&lt;img width="100px" src="https://img.youtube.com/vi/-ACAoeK2Fm8/0.jpg" />&lt;/a>&amp;nbsp;&amp;nbsp;&amp;nbsp;This example is also available on &lt;a href="https://www.youtube.com/watch?v=-ACAoeK2Fm8" target="_blank">YouTube&lt;/a>.
 &lt;/div>
&lt;/div>
&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;p>In this example, we are adding a label to a contour. The label provides information about measurements and about the contour itself. The label remains connected to the contour and can be moved via mouse interactions.&lt;/p>
&lt;h2 id="steps-to-do">Steps to do&lt;/h2>
&lt;h3 id="develop-your-network">Develop your network&lt;/h3>
&lt;p>Add a &lt;code>LocalImage&lt;/code> and a &lt;code>View2D&lt;/code> module to your workspace and connect them as shown below. Load the file &lt;em>ProbandT1.dcm&lt;/em> from MeVisLab demo data. In order to create contours (CSOs), we need a &lt;code>SoView2DCSOExtensibleEditor&lt;/code> module. It manages attached CSO editors, renderers and offers an optional default renderer for all types of CSOs.&lt;/p></description></item><item><title>Contour Example 7: Using the CSOListContainer</title><link>https://mevislab.github.io/examples/pull/118/tutorials/dataobjects/contours/contourexample7/</link><pubDate>Thu, 01 Aug 2024 00:00:00 +0000</pubDate><guid>https://mevislab.github.io/examples/pull/118/tutorials/dataobjects/contours/contourexample7/</guid><description>&lt;h1 id="TutorialContoursExample7">Contour Example 7: Using the CSOListContainer&lt;/h1>
&lt;div class="alert alert-secondary d-flex align-items-center" role="alert">
 &lt;div>
 &lt;img width="100px" src="https://mevislab.github.io/examples/pull/118/images/youtube.svg" />&amp;nbsp;&amp;nbsp;&lt;a href="https://www.youtube.com/watch?v=4quJcvvt-GQ" target="_blank">&lt;img width="100px" src="https://img.youtube.com/vi/4quJcvvt-GQ/0.jpg" />&lt;/a>&amp;nbsp;&amp;nbsp;&amp;nbsp;This example is also available on &lt;a href="https://www.youtube.com/watch?v=4quJcvvt-GQ" target="_blank">YouTube&lt;/a>.
 &lt;/div>
&lt;/div>
&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;p>In this example, we are using the module &lt;code>CSOListContainer&lt;/code> instead of the &lt;code>CSOManager&lt;/code>. The &lt;code>CSOManager&lt;/code> is a heavy weight, UI driven module. You can use it to see all of your CSOs, CSOLists and CSOGroups in the module panel. The &lt;code>CSOListContainer&lt;/code> is a light weight module with focus on Python scripting. We recommend to use this module for final application development, because Python provides much more flexibility in handling CSO objects.&lt;/p></description></item><item><title>Marker Objects</title><link>https://mevislab.github.io/examples/pull/118/tutorials/dataobjects/markerobjects/</link><pubDate>Wed, 15 Jun 2022 08:56:33 +0200</pubDate><guid>https://mevislab.github.io/examples/pull/118/tutorials/dataobjects/markerobjects/</guid><description>&lt;h1 id="MarkersInMeVisLab">Markers in MeVisLab&lt;/h1>
&lt;p>In MeVisLab you can equip images and other data objects with markers. In this example you will see how to create, process and use markers.&lt;/p>
&lt;h2 id="creation-and-rendering">Creation and Rendering&lt;/h2>
&lt;p>To create markers, you can use a marker editor, for example the &lt;code>SoView2DMarkerEditor&lt;/code>. Connect this editor to a viewer as shown below. Now you can interactively create new markers. Connect the module &lt;code>XMarkerListContainer&lt;/code> to your marker editor to store markers in a list.&lt;/p></description></item><item><title>Example 1: Distance between Markers</title><link>https://mevislab.github.io/examples/pull/118/tutorials/dataobjects/markers/markerexample1/</link><pubDate>Wed, 15 Jun 2022 08:56:33 +0200</pubDate><guid>https://mevislab.github.io/examples/pull/118/tutorials/dataobjects/markers/markerexample1/</guid><description>&lt;h1 id="example-1-calculating-the-distance-between-markers">Example 1: Calculating the distance between markers&lt;/h1>
&lt;div class="alert alert-secondary d-flex align-items-center" role="alert">
 &lt;div>
 &lt;img width="100px" src="https://mevislab.github.io/examples/pull/118/images/youtube.svg" />&amp;nbsp;&amp;nbsp;&lt;a href="https://www.youtube.com/watch?v=xYR5Qkze0lE" target="_blank">&lt;img width="100px" src="https://img.youtube.com/vi/xYR5Qkze0lE/0.jpg" />&lt;/a>&amp;nbsp;&amp;nbsp;&amp;nbsp;This example is also available on &lt;a href="https://www.youtube.com/watch?v=xYR5Qkze0lE" target="_blank">YouTube&lt;/a>.
 &lt;/div>
&lt;/div>
&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;p>In this example, we will measure the distance between one position in an image to a list of markers.&lt;/p>
&lt;h2 id="steps-to-do">Steps to do&lt;/h2>
&lt;h3 id="develop-your-network">Develop your network&lt;/h3>
&lt;p>Add the following modules and connect them as shown.&lt;/p>
&lt;p>We changed the names of the modules &lt;code>SoView2DMarkerEditor&lt;/code> and &lt;code>XMarkerLIstContainer&lt;/code>, to distinguish these modules from two similar modules we will add later on. Open the panel of &lt;code>SoView2DMarkerEditor&lt;/code> and select the tab &lt;em>Drawing&lt;/em>. Now chose the &lt;em>Color&lt;/em> &lt;em>red&lt;/em>.&lt;/p></description></item><item><title>Curves</title><link>https://mevislab.github.io/examples/pull/118/tutorials/dataobjects/curves/</link><pubDate>Wed, 15 Jun 2022 08:56:33 +0200</pubDate><guid>https://mevislab.github.io/examples/pull/118/tutorials/dataobjects/curves/</guid><description>&lt;h1 id="CurvesInMeVisLab">Curves in MeVisLab&lt;/h1>
&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;p>Curves can be used in MeVisLab to print the results of a function as two-dimensional mathematical curves into a diagram.&lt;/p>
&lt;p>&lt;p class="page-image">
 &lt;a data-modal="bs-lightbox" href="https://mevislab.github.io/examples/pull/118/images/tutorials/dataobjects/curves/Curves.png" title="Curves in MeVisLab">&lt;img id="Curves in MeVisLab" class="img-fluid rounded" src="https://mevislab.github.io/examples/pull/118/images/tutorials/dataobjects/curves/Curves.png" alt="Curves in MeVisLab" title="Curves in MeVisLab" />&lt;/a>
 &lt;figcaption class="figure-caption">Curves in MeVisLab&lt;/figcaption>
&lt;/p>
&lt;/p>
&lt;p>In the given example, only modules available in commercial &lt;strong>MeVisLab Professional SDK&lt;/strong> have been used. The non-commercial &lt;strong>MeVisLab Standard SDK&lt;/strong> provides more modules for curves.&lt;/p></description></item><item><title>Example 1: Drawing curves</title><link>https://mevislab.github.io/examples/pull/118/tutorials/dataobjects/curves/curvesexample1/</link><pubDate>Wed, 15 Jun 2022 08:56:33 +0200</pubDate><guid>https://mevislab.github.io/examples/pull/118/tutorials/dataobjects/curves/curvesexample1/</guid><description>&lt;h1 id="example-1-drawing-curves">Example 1: Drawing curves&lt;/h1>
&lt;div class="alert alert-secondary d-flex align-items-center" role="alert">
 &lt;div>
 &lt;img width="100px" src="https://mevislab.github.io/examples/pull/118/images/youtube.svg" />&amp;nbsp;&amp;nbsp;&lt;a href="https://www.youtube.com/watch?v=sj6muyInkRc" target="_blank">&lt;img width="100px" src="https://img.youtube.com/vi/sj6muyInkRc/0.jpg" />&lt;/a>&amp;nbsp;&amp;nbsp;&amp;nbsp;This example is also available on &lt;a href="https://www.youtube.com/watch?v=sj6muyInkRc" target="_blank">YouTube&lt;/a>.
 &lt;/div>
&lt;/div>
&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;p>In this example, you will draw one or more curves into a diagram and define different styles for the curves.&lt;/p>
&lt;h2 id="steps-to-do">Steps to do&lt;/h2>
&lt;h3 id="develop-your-network">Develop your network&lt;/h3>
&lt;p>A curve requires x- and y-coordinates to be printed. You can use the &lt;code>CurveCreator&lt;/code> module as input for these coordinates. The &lt;code>SoDiagram2D&lt;/code> draws the curves into a &lt;code>SoRenderArea&lt;/code>. You can also define the style of the curves by using the &lt;code>StylePalette&lt;/code> module.&lt;/p></description></item></channel></rss>