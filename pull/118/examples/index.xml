<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Examples on MeVisLab Examples</title><link>https://mevislab.github.io/examples/pull/118/examples/</link><description>Recent content in Examples on MeVisLab Examples</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Wed, 15 Jun 2022 08:56:33 +0200</lastBuildDate><atom:link href="https://mevislab.github.io/examples/pull/118/examples/index.xml" rel="self" type="application/rss+xml"/><item><title>Basic Mechanisms</title><link>https://mevislab.github.io/examples/pull/118/examples/basic_mechanisms/</link><pubDate>Wed, 15 Jun 2022 08:56:33 +0200</pubDate><guid>https://mevislab.github.io/examples/pull/118/examples/basic_mechanisms/</guid><description>&lt;h2 id="basic-mechanism-examples">Basic Mechanism Examples:&lt;/h2>
&lt;p>&lt;b>The following examples are available:&lt;/b>&lt;/p>



 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 
 [1] &lt;a href="https://mevislab.github.io/examples/pull/118/examples/basic_mechanisms/contour_filter/">Contour Filter&lt;/a>&lt;br/>
 
 

 

 

 

 
 [2] &lt;a href="https://mevislab.github.io/examples/pull/118/examples/basic_mechanisms/viewer_application/">Creating a simple application&lt;/a>&lt;br/>
 
 

 

 

 

 

 

 

 

 

 

 

 
 [3] &lt;a href="https://mevislab.github.io/examples/pull/118/examples/basic_mechanisms/macro_modules_and_module_interaction/example1/">Panel for the contour filter&lt;/a>&lt;br/>
 
 

 

 
 [4] &lt;a href="https://mevislab.github.io/examples/pull/118/examples/basic_mechanisms/macro_modules_and_module_interaction/example2/">Python scripting&lt;/a>&lt;br/></description></item><item><title>Data Objects</title><link>https://mevislab.github.io/examples/pull/118/examples/data_objects/</link><pubDate>Wed, 15 Jun 2022 08:56:33 +0200</pubDate><guid>https://mevislab.github.io/examples/pull/118/examples/data_objects/</guid><description>&lt;h2 id="data-object-examples">Data Object Examples:&lt;/h2>
&lt;p>&lt;b>The following examples are available:&lt;/b>&lt;/p>



 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 
 [1] &lt;a href="https://mevislab.github.io/examples/pull/118/examples/data_objects/contours/example3/">2D and 3D visualization of contours&lt;/a>&lt;br/>
 
 

 
 [2] &lt;a href="https://mevislab.github.io/examples/pull/118/examples/data_objects/contours/example4/">Annotation of images&lt;/a>&lt;br/>
 
 

 
 [3] &lt;a href="https://mevislab.github.io/examples/pull/118/examples/data_objects/surface_objects/example3/">Apply transformations on a 3D WEM object via mouse interactions&lt;/a>&lt;br/>
 
 

 

 

 

 

 

 

 
 [4] &lt;a href="https://mevislab.github.io/examples/pull/118/examples/data_objects/contours/example2/">Contour interpolation&lt;/a>&lt;br/>
 
 

 
 [5] &lt;a href="https://mevislab.github.io/examples/pull/118/examples/data_objects/contours/example5/">Contours and ghosting&lt;/a>&lt;br/>
 
 

 

 

 
 [6] &lt;a href="https://mevislab.github.io/examples/pull/118/examples/data_objects/contours/example1/">Creation of Contours&lt;/a>&lt;br/>
 
 

 
 [7] &lt;a href="https://mevislab.github.io/examples/pull/118/examples/data_objects/surface_objects/example1/">Creation of WEMs&lt;/a>&lt;br/>
 
 

 

 
 [8] &lt;a href="https://mevislab.github.io/examples/pull/118/examples/data_objects/markers/example1/">Distance between markers&lt;/a>&lt;br/>
 
 

 
 [9] &lt;a href="https://mevislab.github.io/examples/pull/118/examples/data_objects/curves/example1/">Drawing curves&lt;/a>&lt;br/>
 
 

 

 
 [10] &lt;a href="https://mevislab.github.io/examples/pull/118/examples/data_objects/surface_objects/example4/">Interactively moving WEM&lt;/a>&lt;br/>
 
 

 

 

 

 

 
 [11] &lt;a href="https://mevislab.github.io/examples/pull/118/examples/data_objects/surface_objects/example2/">Processing and modification of WEMs&lt;/a>&lt;br/>
 
 

 

 

 

 

 

 

 
 [12] &lt;a href="https://mevislab.github.io/examples/pull/118/examples/data_objects/surface_objects/example5/">WEM - Primitive Value Lists&lt;/a>&lt;br/></description></item><item><title>Face detection in OpenCV</title><link>https://mevislab.github.io/examples/pull/118/examples/thirdparty/example2/</link><pubDate>Wed, 15 Jun 2022 08:56:33 +0200</pubDate><guid>https://mevislab.github.io/examples/pull/118/examples/thirdparty/example2/</guid><description>&lt;h1 id="thirdparty-example-2-face-detection-in-opencv">ThirdParty Example 2: Face detection in OpenCV&lt;/h1>
&lt;p>This Python file shows how to access the webcam and detect faces in the video stream via OpenCV.&lt;/p>
&lt;h1 id="download">Download&lt;/h1>
&lt;p>You can download the Python files &lt;a href="https://mevislab.github.io/examples/pull/118/examples/thirdparty/example2/FaceDetection.py">here&lt;/a>&lt;/p></description></item><item><title>Image Processing</title><link>https://mevislab.github.io/examples/pull/118/examples/image_processing/</link><pubDate>Wed, 15 Jun 2022 08:56:33 +0200</pubDate><guid>https://mevislab.github.io/examples/pull/118/examples/image_processing/</guid><description>&lt;h2 id="image-processing-examples">Image Processing Examples:&lt;/h2>
&lt;p>&lt;b>The following examples are available:&lt;/b>&lt;/p>



 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 
 [1] &lt;a href="https://mevislab.github.io/examples/pull/118/examples/image_processing/example1/">Arithmetic operations on two images&lt;/a>&lt;br/>
 
 

 

 

 

 
 [2] &lt;a href="https://mevislab.github.io/examples/pull/118/examples/image_processing/example5/">Clip Planes&lt;/a>&lt;br/>
 
 

 

 

 

 

 

 

 

 

 

 

 

 

 
 [3] &lt;a href="https://mevislab.github.io/examples/pull/118/examples/image_processing/example2/">Masking images&lt;/a>&lt;br/>
 
 

 

 

 

 

 

 
 [4] &lt;a href="https://mevislab.github.io/examples/pull/118/examples/image_processing/example3/">Region Growing (Segmentation)&lt;/a>&lt;br/>
 
 

 
 [5] &lt;a href="https://mevislab.github.io/examples/pull/118/examples/image_processing/example4/">Subtract 3D objects&lt;/a>&lt;br/></description></item><item><title>Iterative tests in MeVisLab with Screenshots</title><link>https://mevislab.github.io/examples/pull/118/examples/testing/example3/</link><pubDate>Wed, 15 Jun 2022 08:56:33 +0200</pubDate><guid>https://mevislab.github.io/examples/pull/118/examples/testing/example3/</guid><description>&lt;h1 id="testing-example-3-iterative-tests-in-mevislab-with-screenshots">Testing Example 3: Iterative tests in MeVisLab with Screenshots&lt;/h1>
&lt;p>In this example you will learn how to write iterative tests in MeVisLab. In addition to that, we create a screenshot of a viewer and add the image to the test report.&lt;/p>
&lt;h1 id="download">Download&lt;/h1>
&lt;p>n.a.&lt;/p></description></item><item><title>Open Inventor</title><link>https://mevislab.github.io/examples/pull/118/examples/open_inventor/</link><pubDate>Wed, 15 Jun 2022 08:56:33 +0200</pubDate><guid>https://mevislab.github.io/examples/pull/118/examples/open_inventor/</guid><description>&lt;h2 id="open-inventor-examples">Open Inventor Examples:&lt;/h2>
&lt;p>&lt;b>The following examples are available:&lt;/b>&lt;/p>



 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 
 [1] &lt;a href="https://mevislab.github.io/examples/pull/118/examples/open_inventor/example4/">Camera interaction with collision detection&lt;/a>&lt;br/>
 
 

 
 [2] &lt;a href="https://mevislab.github.io/examples/pull/118/examples/open_inventor/example3/">Camera Interactions in Open Inventor&lt;/a>&lt;br/>
 
 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 
 [3] &lt;a href="https://mevislab.github.io/examples/pull/118/examples/open_inventor/example2/">Mouse interactions in an Open Inventor scene&lt;/a>&lt;br/>
 
 

 
 [4] &lt;a href="https://mevislab.github.io/examples/pull/118/examples/open_inventor/example1/">Open Inventor objects&lt;/a>&lt;br/></description></item><item><title>OpenCV Webcam access</title><link>https://mevislab.github.io/examples/pull/118/examples/thirdparty/example1/</link><pubDate>Wed, 15 Jun 2022 08:56:33 +0200</pubDate><guid>https://mevislab.github.io/examples/pull/118/examples/thirdparty/example1/</guid><description>&lt;h1 id="thirdparty-example-1-opencv-webcam-access">ThirdParty Example 1: OpenCV Webcam access&lt;/h1>
&lt;p>This Python file shows how to access the webcam via OpenCV and use the video via &lt;code>PythonImage&lt;/code> module in MeVisLab.&lt;/p>
&lt;h1 id="download">Download&lt;/h1>
&lt;p>You can download the Python files &lt;a href="https://mevislab.github.io/examples/pull/118/examples/thirdparty/example1/OpenCVExample.zip">here&lt;/a>&lt;/p></description></item><item><title>Profiling in MeVisLab</title><link>https://mevislab.github.io/examples/pull/118/examples/testing/example2/</link><pubDate>Wed, 15 Jun 2022 08:56:33 +0200</pubDate><guid>https://mevislab.github.io/examples/pull/118/examples/testing/example2/</guid><description>&lt;h1 id="testing-example-2-profiling-in-mevislab">Testing Example 2: Profiling in MeVisLab&lt;/h1>
&lt;p>This example shows how to use the Profiling View in MeVisLab.&lt;/p>
&lt;h1 id="download">Download&lt;/h1>
&lt;p>n.a.&lt;/p></description></item><item><title>PyTorch segmentation</title><link>https://mevislab.github.io/examples/pull/118/examples/thirdparty/pytorch1/</link><pubDate>Wed, 15 Jun 2022 08:56:33 +0200</pubDate><guid>https://mevislab.github.io/examples/pull/118/examples/thirdparty/pytorch1/</guid><description>&lt;h1 id="thirdparty-example-5-segmentation-in-webcam-stream-by-using-pytorch">ThirdParty Example 5: Segmentation in webcam stream by using PyTorch&lt;/h1>
&lt;p>This macro module segments a person shown in a webcam stream by using a pre-trained network from PyTorch (torchvision).&lt;/p>
&lt;p>&lt;p class="page-image">
 &lt;a data-modal="bs-lightbox" href="https://mevislab.github.io/examples/pull/118/images/tutorials/thirdparty/pytorch_example3_10.png" title="">&lt;img id="" class="img-fluid rounded" src="https://mevislab.github.io/examples/pull/118/images/tutorials/thirdparty/pytorch_example3_10.png" alt="Screenshot" />&lt;/a>
 &lt;figcaption class="figure-caption">&lt;/figcaption>
&lt;/p>
&lt;/p>
&lt;h1 id="download">Download&lt;/h1>
&lt;p>You can download the Python files &lt;a href="https://mevislab.github.io/examples/pull/118/examples/thirdparty/pytorch1/PyTorchSegmentationExample.zip">here&lt;/a>&lt;/p></description></item><item><title>Testing Examples</title><link>https://mevislab.github.io/examples/pull/118/examples/testing/</link><pubDate>Wed, 15 Jun 2022 08:56:33 +0200</pubDate><guid>https://mevislab.github.io/examples/pull/118/examples/testing/</guid><description>&lt;h2 id="testing-examples">Testing Examples:&lt;/h2>
&lt;p>&lt;b>The following examples are available:&lt;/b>&lt;/p>



 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 
 [1] &lt;a href="https://mevislab.github.io/examples/pull/118/examples/testing/example3/">Iterative tests in MeVisLab with Screenshots&lt;/a>&lt;br/>
 
 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 
 [2] &lt;a href="https://mevislab.github.io/examples/pull/118/examples/testing/example2/">Profiling in MeVisLab&lt;/a>&lt;br/>
 
 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 
 [3] &lt;a href="https://mevislab.github.io/examples/pull/118/examples/testing/example1/">Writing a simple test case in MeVisLab&lt;/a>&lt;br/></description></item><item><title>ThirdParty Examples</title><link>https://mevislab.github.io/examples/pull/118/examples/thirdparty/</link><pubDate>Wed, 15 Jun 2022 08:56:33 +0200</pubDate><guid>https://mevislab.github.io/examples/pull/118/examples/thirdparty/</guid><description>&lt;h2 id="thirdparty-examples">ThirdParty Examples:&lt;/h2>
&lt;p>&lt;b>The following examples are available:&lt;/b>&lt;/p>



 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 
 [1] &lt;a href="https://mevislab.github.io/examples/pull/118/examples/thirdparty/example2/">Face detection in OpenCV&lt;/a>&lt;br/>
 
 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 
 [2] &lt;a href="https://mevislab.github.io/examples/pull/118/examples/thirdparty/example1/">OpenCV Webcam access&lt;/a>&lt;br/>
 
 

 

 

 

 

 

 
 [3] &lt;a href="https://mevislab.github.io/examples/pull/118/examples/thirdparty/pytorch1/">PyTorch segmentation&lt;/a>&lt;br/></description></item><item><title>Using provided examples</title><link>https://mevislab.github.io/examples/pull/118/examples/howto/</link><pubDate>Wed, 15 Jun 2022 08:56:33 +0200</pubDate><guid>https://mevislab.github.io/examples/pull/118/examples/howto/</guid><description>&lt;h3 id="structure">Structure&lt;/h3>
&lt;p>Each tutorial chapter was used as an umbrella theme to structure related examples, that are linked in a list.
After clicking any of the linked examples, you will be forwarded to a short description of the feature and have the option to download the resource that produces your desired effect.&lt;/p>
&lt;p>The provided files are usually either *.mlab files or *.zip archives. You will find a short tutorial on how to add those files into your MeVisLab application, to work with them, below.&lt;/p></description></item><item><title>Visualization Examples</title><link>https://mevislab.github.io/examples/pull/118/examples/visualization/</link><pubDate>Wed, 15 Jun 2022 08:56:33 +0200</pubDate><guid>https://mevislab.github.io/examples/pull/118/examples/visualization/</guid><description>&lt;h2 id="visualization-examples">Visualization Examples:&lt;/h2>
&lt;p>&lt;b>The following examples are available:&lt;/b>&lt;/p>



 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 
 [1] &lt;a href="https://mevislab.github.io/examples/pull/118/examples/visualization/example2/">Creating a magnifier&lt;/a>&lt;br/>
 
 

 

 

 

 
 [2] &lt;a href="https://mevislab.github.io/examples/pull/118/examples/visualization/example4/">Display images converted to Open Inventor scene objects&lt;/a>&lt;br/>
 
 

 

 

 
 [3] &lt;a href="https://mevislab.github.io/examples/pull/118/examples/visualization/example3/">Image overlays&lt;/a>&lt;br/>
 
 

 

 

 

 

 

 

 

 

 

 
 [4] &lt;a href="https://mevislab.github.io/examples/pull/118/examples/visualization/example1/">Synchronous view of two images&lt;/a>&lt;br/>
 
 

 
 [5] &lt;a href="https://mevislab.github.io/examples/pull/118/examples/visualization/example5/">Volume rendering and interactions&lt;/a>&lt;br/>
 
 

 
 [6] &lt;a href="https://mevislab.github.io/examples/pull/118/examples/visualization/example6/">Volume Rendering vs. Path Tracing&lt;/a>&lt;br/></description></item><item><title>Writing a simple test case in MeVisLab</title><link>https://mevislab.github.io/examples/pull/118/examples/testing/example1/</link><pubDate>Wed, 15 Jun 2022 08:56:33 +0200</pubDate><guid>https://mevislab.github.io/examples/pull/118/examples/testing/example1/</guid><description>&lt;h1 id="testing-example-1-writing-a-simple-test-case-in-mevislab">Testing Example 1: Writing a simple test case in MeVisLab&lt;/h1>
&lt;p>This example shows how to write and execute test cases in MeVisLab. The Python files can be downloaded below.&lt;/p>
&lt;h1 id="download">Download&lt;/h1>
&lt;p>You can download the Python files &lt;a href="https://mevislab.github.io/examples/pull/118/examples/testing/example1/TestCases.zip">here&lt;/a>&lt;/p></description></item><item><title>2D and 3D visualization of contours</title><link>https://mevislab.github.io/examples/pull/118/examples/data_objects/contours/example3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://mevislab.github.io/examples/pull/118/examples/data_objects/contours/example3/</guid><description>&lt;h1 id="contour-example-3-2d-and-3d-visualization-of-contours">Contour Example 3: 2D and 3D visualization of contours&lt;/h1>
&lt;p>This example shows how to display CSOs in 2D as an overlay and additionally how the CSOs are displayed in 3D.&lt;/p>
&lt;h2 id="summary">Summary&lt;/h2>
&lt;p>Images are loaded by using a &lt;code>LocalImage&lt;/code> module and displayed in a 2D viewer. A &lt;code>SoCSOLiveWireEditor&lt;/code> is added to draw contours on the images. The &lt;code>CSOSliceInterpolator&lt;/code> generates additional contours between the manual CSOs by using linear interpolation.&lt;/p>
&lt;p>The module &lt;code>VoxelizeCSO&lt;/code> is used to create a three-dimensional voxel mask of the contours which can be used as an overlay on the images in a &lt;code>View2D&lt;/code> panel. The &lt;code>SoView2DOverlay&lt;/code> module defines the color and opacity of the overlay.&lt;/p></description></item><item><title>Annotation of images</title><link>https://mevislab.github.io/examples/pull/118/examples/data_objects/contours/example4/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://mevislab.github.io/examples/pull/118/examples/data_objects/contours/example4/</guid><description>&lt;h1 id="contour-example-4-annotation-of-images">Contour Example 4: Annotation of images&lt;/h1>
&lt;p>This example shows how to add annotations to an image.&lt;/p>
&lt;h2 id="summary">Summary&lt;/h2>
&lt;p>In this example, the network of &lt;strong>Contour Example 3&lt;/strong> is extended so that the volume of the 3D mask generated by the &lt;code>VoxelizeCSO&lt;/code> module is calculated. The &lt;code>CalculateVolume&lt;/code> module counts the number of voxels in the given mask and returns the correct volume in ml. The calculated volume will be used for a custom &lt;code>SoView2DAnnotation&lt;/code> displayed in the &lt;code>View2D&lt;/code>.&lt;/p></description></item><item><title>Apply transformations on a 3D WEM object via mouse interactions</title><link>https://mevislab.github.io/examples/pull/118/examples/data_objects/surface_objects/example3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://mevislab.github.io/examples/pull/118/examples/data_objects/surface_objects/example3/</guid><description>&lt;h1 id="surface-example-3-interactions-with-wem">Surface Example 3: Interactions with WEM&lt;/h1>
&lt;h2 id="scale-rotate-and-move-a-wem-in-a-scene">Scale, rotate and move a WEM in a scene&lt;/h2>
&lt;p>In this example, we are using a &lt;code>SoTransformerDragger&lt;/code> module to apply transformations on a 3D WEM object via mouse interactions.
&lt;p class="page-image">
 &lt;a data-modal="bs-lightbox" href="https://mevislab.github.io/examples/pull/118/examples/data_objects/surface_objects/example3/image.png" title="">&lt;img id="" class="img-fluid rounded" src="https://mevislab.github.io/examples/pull/118/examples/data_objects/surface_objects/example3/image.png" alt="Screenshot" />&lt;/a>
 &lt;figcaption class="figure-caption">&lt;/figcaption>
&lt;/p>
&lt;/p>
&lt;h3 id="download">Download&lt;/h3>
&lt;p>You can download the example network &lt;a href="https://mevislab.github.io/examples/pull/118/examples/data_objects/surface_objects/example3/SurfaceExample3.mlab">here&lt;/a>&lt;/p>
&lt;h2 id="interactively-modify-wems">Interactively modify WEMs&lt;/h2>
&lt;p>In this example, we are using a &lt;code>SoWEMBulgeEditor&lt;/code> module to modify a WEM using the mouse.
&lt;p class="page-image">
 &lt;a data-modal="bs-lightbox" href="https://mevislab.github.io/examples/pull/118/examples/data_objects/surface_objects/example3/image2.png" title="">&lt;img id="" class="img-fluid rounded" src="https://mevislab.github.io/examples/pull/118/examples/data_objects/surface_objects/example3/image2.png" alt="Screenshot" />&lt;/a>
 &lt;figcaption class="figure-caption">&lt;/figcaption>
&lt;/p>
&lt;/p>
&lt;h3 id="download-1">Download&lt;/h3>
&lt;p>You can download the example network &lt;a href="https://mevislab.github.io/examples/pull/118/examples/data_objects/surface_objects/example3/WEMExample3b.mlab">here&lt;/a>&lt;/p></description></item><item><title>Arithmetic operations on two images</title><link>https://mevislab.github.io/examples/pull/118/examples/image_processing/example1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://mevislab.github.io/examples/pull/118/examples/image_processing/example1/</guid><description>&lt;h1 id="image-processing-example-1-arithmetic-operations-on-two-images">Image Processing Example 1: Arithmetic operations on two images&lt;/h1>
&lt;p>In this example, we apply scalar functions on two images like Add, Multiply, Subtract, etc.&lt;/p>
&lt;h2 id="summary">Summary&lt;/h2>
&lt;p>We are loading two images by using the &lt;code>LocalImage&lt;/code> module and show them in a &lt;code>SynchroView2D&lt;/code>. In addition to that, both images are used for arithmetic processing in the module &lt;code>Arithmetic2&lt;/code>.&lt;/p>
&lt;p>&lt;p class="page-image">
 &lt;a data-modal="bs-lightbox" href="https://mevislab.github.io/examples/pull/118/examples/image_processing/example1/image.png" title="">&lt;img id="" class="img-fluid rounded" src="https://mevislab.github.io/examples/pull/118/examples/image_processing/example1/image.png" alt="Screenshot" />&lt;/a>
 &lt;figcaption class="figure-caption">&lt;/figcaption>
&lt;/p>
&lt;/p>
&lt;h1 id="download">Download&lt;/h1>
&lt;p>You can download the example network &lt;a href="https://mevislab.github.io/examples/pull/118/examples/image_processing/example1/BasicFilter.mlab">here&lt;/a>&lt;/p></description></item><item><title>Camera interaction with collision detection</title><link>https://mevislab.github.io/examples/pull/118/examples/open_inventor/example4/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://mevislab.github.io/examples/pull/118/examples/open_inventor/example4/</guid><description>&lt;h1 id="open-inventor-example-4-camera-interaction-with-collision-detection">Open Inventor Example 4: Camera interaction with collision detection&lt;/h1>
&lt;p>This example shows how to implement a camera flight using keyboard shortcuts. Collisions with anatomical structures are detected and the flight stops. In addition to that, the camera object and direction is rendered in another viewer.&lt;/p>
&lt;p>This example has been taken from the &lt;a href="https://forum.mevislab.de/index.php?topic=3947.0" target="_blank" rel="noopener">MeVisLab forum&lt;/a>.&lt;/p>
&lt;h2 id="summary">Summary&lt;/h2>
&lt;p>A local macro &lt;code>flightControl&lt;/code> allows you to navigate with the camera through the scene.&lt;/p>
&lt;p>&lt;p class="page-image">
 &lt;a data-modal="bs-lightbox" href="https://mevislab.github.io/examples/pull/118/examples/open_inventor/example4/image.png" title="">&lt;img id="" class="img-fluid rounded" src="https://mevislab.github.io/examples/pull/118/examples/open_inventor/example4/image.png" alt="Screenshot" />&lt;/a>
 &lt;figcaption class="figure-caption">&lt;/figcaption>
&lt;/p></description></item><item><title>Camera Interactions in Open Inventor</title><link>https://mevislab.github.io/examples/pull/118/examples/open_inventor/example3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://mevislab.github.io/examples/pull/118/examples/open_inventor/example3/</guid><description>&lt;h1 id="open-inventor-example-3-camera-interactions-in-open-inventor">Open Inventor Example 3: Camera Interactions in Open Inventor&lt;/h1>
&lt;p>This example shows different options for using a camera and different viewers in Open Inventor.&lt;/p>
&lt;h2 id="summary">Summary&lt;/h2>
&lt;p>We will show the difference between a &lt;code>SoRenderArea&lt;/code> and a &lt;code>SoExaminerViewer&lt;/code> and use different modules of the &lt;code>SoCamera*&lt;/code> group.&lt;/p>
&lt;p>&lt;p class="page-image">
 &lt;a data-modal="bs-lightbox" href="https://mevislab.github.io/examples/pull/118/examples/open_inventor/example3/image.png" title="">&lt;img id="" class="img-fluid rounded" src="https://mevislab.github.io/examples/pull/118/examples/open_inventor/example3/image.png" alt="Screenshot" />&lt;/a>
 &lt;figcaption class="figure-caption">&lt;/figcaption>
&lt;/p>
&lt;/p>
&lt;h1 id="download">Download&lt;/h1>
&lt;p>You can download the example network &lt;a href="https://mevislab.github.io/examples/pull/118/examples/open_inventor/example3/CameraInteractions.mlab">here&lt;/a>&lt;/p></description></item><item><title>Clip Planes</title><link>https://mevislab.github.io/examples/pull/118/examples/image_processing/example5/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://mevislab.github.io/examples/pull/118/examples/image_processing/example5/</guid><description>&lt;h1 id="image-processing-example-5-clip-planes">Image Processing Example 5: Clip Planes&lt;/h1>
&lt;p>In this example, we are using the currently visible slice from a 2D view as a clip plane in 3D.&lt;/p>
&lt;h2 id="summary">Summary&lt;/h2>
&lt;p>We are loading images by using the &lt;code>LocalImage&lt;/code> module and render them as a 2-dimensional image stack &lt;code>SoRenderArea&lt;/code>. The displayed slice is used to create a 3D plane/clip plane in a &lt;code>SoExaminerViewer&lt;/code>.&lt;/p>
&lt;p>&lt;p class="page-image">
 &lt;a data-modal="bs-lightbox" href="https://mevislab.github.io/examples/pull/118/examples/image_processing/example5/image.png" title="">&lt;img id="" class="img-fluid rounded" src="https://mevislab.github.io/examples/pull/118/examples/image_processing/example5/image.png" alt="Screenshot" />&lt;/a>
 &lt;figcaption class="figure-caption">&lt;/figcaption>
&lt;/p>
&lt;/p>
&lt;h1 id="download">Download&lt;/h1>
&lt;p>You can download the example network &lt;a href="https://mevislab.github.io/examples/pull/118/examples/image_processing/example4/ImageProcessingExample5.mlab">here&lt;/a>&lt;/p></description></item><item><title>Contour Filter</title><link>https://mevislab.github.io/examples/pull/118/examples/basic_mechanisms/contour_filter/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://mevislab.github.io/examples/pull/118/examples/basic_mechanisms/contour_filter/</guid><description>&lt;h1 id="example-1-contour-filter">Example 1: Contour Filter&lt;/h1>
&lt;p>This example shows how to create a contour filter.&lt;/p>
&lt;h1 id="summary">Summary&lt;/h1>
&lt;p>Images are loaded via &lt;code>ImageLoad&lt;/code> module and visualized unchanged in a &lt;code>View2D&lt;/code> module &lt;em>View2D1&lt;/em>.
Additionally the images are modified by a local macro module &lt;code>Filter&lt;/code> and shown in another &lt;code>View2D&lt;/code> viewer &lt;em>View2D&lt;/em>.&lt;/p>
&lt;p>In order to display the same slice (unchanged and changed), the module &lt;code>SyncFloat&lt;/code> is used to synchronize the field value &lt;em>startSlice&lt;/em> in both viewers. The &lt;code>SyncFloat&lt;/code> module duplicates the value &lt;em>Float1&lt;/em> to the field &lt;em>Float2&lt;/em>.&lt;/p></description></item><item><title>Contour interpolation</title><link>https://mevislab.github.io/examples/pull/118/examples/data_objects/contours/example2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://mevislab.github.io/examples/pull/118/examples/data_objects/contours/example2/</guid><description>&lt;h1 id="contour-example-2-contour-interpolation">Contour Example 2: Contour interpolation&lt;/h1>
&lt;p>This example shows how to interpolate CSOs across slices.&lt;/p>
&lt;h2 id="summary">Summary&lt;/h2>
&lt;p>In this example, semi-automatic countours are created using the &lt;code>SoCSOLiveWireEditor&lt;/code> module and their depiction is modified using the &lt;code>SoCSOVisualizationSettings&lt;/code> module.&lt;/p>
&lt;p>Additional contours between the manually created ones are generated by the &lt;code>CSOSliceInterpolator&lt;/code> and added to the &lt;code>CSOManager&lt;/code>. Different groups of contours are created for the left and right lobe of the lung and colored respectively.&lt;/p></description></item><item><title>Contours and ghosting</title><link>https://mevislab.github.io/examples/pull/118/examples/data_objects/contours/example5/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://mevislab.github.io/examples/pull/118/examples/data_objects/contours/example5/</guid><description>&lt;h1 id="contour-example-5-contours-and-ghosting">Contour Example 5: Contours and ghosting&lt;/h1>
&lt;p>This image shows how to automatically create CSOs based on ISO values. In addition the visualization of CSOs of previous and subsequent slices is shown.&lt;/p>
&lt;h2 id="summary">Summary&lt;/h2>
&lt;p>In this example, the &lt;code>CSOIsoGenerator&lt;/code> is used to generate contours based on a given ISO value of the image. Contours are generated in the image where the given ISO value is close to the one configured. These contours are stored in the &lt;code>CSOManager&lt;/code> and ghosting is activated in the &lt;code>SoCSOVisualizationSettings&lt;/code>.&lt;/p></description></item><item><title>Creating a magnifier</title><link>https://mevislab.github.io/examples/pull/118/examples/visualization/example2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://mevislab.github.io/examples/pull/118/examples/visualization/example2/</guid><description>&lt;h1 id="visualization-example-2-creating-a-magnifier">Visualization Example 2: Creating a magnifier&lt;/h1>
&lt;p>This example shows how to create a magnifier. Using the module &lt;code>SubImage&lt;/code> a fraction of the original image can be extracted and enlarged.
&lt;p class="page-image">
 &lt;a data-modal="bs-lightbox" href="https://mevislab.github.io/examples/pull/118/examples/visualization/example2/image.png" title="">&lt;img id="" class="img-fluid rounded" src="https://mevislab.github.io/examples/pull/118/examples/visualization/example2/image.png" alt="Screenshot" />&lt;/a>
 &lt;figcaption class="figure-caption">&lt;/figcaption>
&lt;/p>
&lt;/p>
&lt;h1 id="download">Download&lt;/h1>
&lt;p>You can download the example network &lt;a href="https://mevislab.github.io/examples/pull/118/examples/visualization/example2/VisualizationExample2.mlab">here&lt;/a>&lt;/p></description></item><item><title>Creating a simple application</title><link>https://mevislab.github.io/examples/pull/118/examples/basic_mechanisms/viewer_application/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://mevislab.github.io/examples/pull/118/examples/basic_mechanisms/viewer_application/</guid><description>&lt;h1 id="example-3-creating-a-simple-application">Example 3: Creating a simple application&lt;/h1>
&lt;p>In this example, you will learn how to create a simple prototype application in MeVisLab including a user interface (UI) with 2D and 3D viewers.&lt;/p>
&lt;p>&lt;p class="page-image">
 &lt;a data-modal="bs-lightbox" href="https://mevislab.github.io/examples/pull/118/examples/basic_mechanisms/viewer_application/image.png" title="">&lt;img id="" class="img-fluid rounded" src="https://mevislab.github.io/examples/pull/118/examples/basic_mechanisms/viewer_application/image.png" alt="Screenshot" />&lt;/a>
 &lt;figcaption class="figure-caption">&lt;/figcaption>
&lt;/p>
&lt;/p>
&lt;h1 id="download">Download&lt;/h1>
&lt;p>You can download the example network &lt;a href="https://mevislab.github.io/examples/pull/118/examples/basic_mechanisms/viewer_application/viewerexample.mlab">here&lt;/a>&lt;/p></description></item><item><title>Creation of Contours</title><link>https://mevislab.github.io/examples/pull/118/examples/data_objects/contours/example1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://mevislab.github.io/examples/pull/118/examples/data_objects/contours/example1/</guid><description>&lt;h1 id="contour-example-1-creation-of-contours">Contour Example 1: Creation of contours&lt;/h1>
&lt;p>Contours are stored as Contour Segmented Objects (CSOs) in MeVisLab.
This example highlights ways of creating CSOs using modules of the &lt;code>SoCSOEditor&lt;/code> group.&lt;/p>

&lt;svg xmlns="http://www.w3.org/2000/svg" style="display: none;">
 &lt;symbol id="check-fill" fill="currentColor" viewBox="0 0 16 16">
 &lt;path d="M16 8A8 8 0 1 1 0 8a8 8 0 0 1 16 0zm-3.97-3.03a.75.75 0 0 0-1.08.022L7.477 9.417 5.384 7.323a.75.75 0 0 0-1.06 1.06L6.97 11.03a.75.75 0 0 0 1.079-.02l3.992-4.99a.75.75 0 0 0-.01-1.05z"/>
 &lt;/symbol>
 &lt;symbol id="info-fill" fill="currentColor" viewBox="0 0 16 16">
 &lt;path d="M8 16A8 8 0 1 0 8 0a8 8 0 0 0 0 16zm.93-9.412-1 4.705c-.07.34.029.533.304.533.194 0 .487-.07.686-.246l-.088.416c-.287.346-.92.598-1.465.598-.703 0-1.002-.422-.808-1.319l.738-3.468c.064-.293.006-.399-.287-.47l-.451-.081.082-.381 2.29-.287zM8 5.5a1 1 0 1 1 0-2 1 1 0 0 1 0 2z"/>
 &lt;/symbol>
 &lt;symbol id="warning-fill" fill="currentColor" viewBox="0 0 16 16">
 &lt;path d="M8.982 1.566a1.13 1.13 0 0 0-1.96 0L.165 13.233c-.457.778.091 1.767.98 1.767h13.713c.889 0 1.438-.99.98-1.767L8.982 1.566zM8 5c.535 0 .954.462.9.995l-.35 3.507a.552.552 0 0 1-1.1 0L7.1 5.995A.905.905 0 0 1 8 5zm.002 6a1 1 0 1 1 0 2 1 1 0 0 1 0-2z"/>
 &lt;/symbol>
 &lt;symbol id="danger-fill" fill="currentColor" viewBox="0 0 16 16">
 &lt;path d="M8.982 1.566a1.13 1.13 0 0 0-1.96 0L.165 13.233c-.457.778.091 1.767.98 1.767h13.713c.889 0 1.438-.99.98-1.767L8.982 1.566zM8 5c.535 0 .954.462.9.995l-.35 3.507a.552.552 0 0 1-1.1 0L7.1 5.995A.905.905 0 0 1 8 5zm.002 6a1 1 0 1 1 0 2 1 1 0 0 1 0-2z"/>
 &lt;/symbol>
&lt;/svg>

&lt;div class="alert alert-primary alert-info d-flex align-items-center" role="alert">
 &lt;svg class="bi flex-shrink-0 me-2" width="24" height="24" role="img" aria-label="Info:">&lt;use xlink:href="#info-fill"/>&lt;/svg>
 &lt;div>
 &lt;b>Info:&amp;nbsp;&lt;/b>
 You may want to look at the glossary entry on &lt;a href="https://mevislab.github.io/examples/pull/118/glossary/#contour-segmented-objects">&lt;em>CSOs&lt;/em>&lt;/a>.
 &lt;/div>
&lt;/div>
&lt;p>The &lt;code>SoCSOEditor&lt;/code> module group contains several modules, some of which are listed right below:&lt;/p></description></item><item><title>Creation of WEMs</title><link>https://mevislab.github.io/examples/pull/118/examples/data_objects/surface_objects/example1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://mevislab.github.io/examples/pull/118/examples/data_objects/surface_objects/example1/</guid><description>&lt;h1 id="surface-example-1-creation-of-wems">Surface Example 1: Creation of WEMs&lt;/h1>
&lt;p>This example shows how to create WEMs out of voxel images and CSOs.
&lt;p class="page-image">
 &lt;a data-modal="bs-lightbox" href="https://mevislab.github.io/examples/pull/118/examples/data_objects/surface_objects/example1/image.png" title="">&lt;img id="" class="img-fluid rounded" src="https://mevislab.github.io/examples/pull/118/examples/data_objects/surface_objects/example1/image.png" alt="Screenshot" />&lt;/a>
 &lt;figcaption class="figure-caption">&lt;/figcaption>
&lt;/p>
&lt;/p>
&lt;h1 id="download">Download&lt;/h1>
&lt;p>You can download the example network &lt;a href="https://mevislab.github.io/examples/pull/118/examples/data_objects/surface_objects/example1/SurfaceExample1.mlab">here&lt;/a>&lt;/p></description></item><item><title>Display images converted to Open Inventor scene objects</title><link>https://mevislab.github.io/examples/pull/118/examples/visualization/example4/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://mevislab.github.io/examples/pull/118/examples/visualization/example4/</guid><description>&lt;h1 id="visualization-example-4-display-images-converted-to-open-inventor-scene-objects">Visualization Example 4: Display images converted to Open Inventor scene objects&lt;/h1>
&lt;p>This example shows how to convert images to Open Inventor scene objects using the module &lt;code>SoView2D&lt;/code> and modules based on &lt;code>SoView2D&lt;/code>.
&lt;p class="page-image">
 &lt;a data-modal="bs-lightbox" href="https://mevislab.github.io/examples/pull/118/examples/visualization/example4/image.png" title="">&lt;img id="" class="img-fluid rounded" src="https://mevislab.github.io/examples/pull/118/examples/visualization/example4/image.png" alt="Screenshot" />&lt;/a>
 &lt;figcaption class="figure-caption">&lt;/figcaption>
&lt;/p>
&lt;/p>
&lt;h1 id="download">Download&lt;/h1>
&lt;p>You can download the example network &lt;a href="https://mevislab.github.io/examples/pull/118/examples/visualization/example4/VisualizationExample4.mlab">here&lt;/a>&lt;/p></description></item><item><title>Distance between markers</title><link>https://mevislab.github.io/examples/pull/118/examples/data_objects/markers/example1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://mevislab.github.io/examples/pull/118/examples/data_objects/markers/example1/</guid><description>&lt;h1 id="marker-example-1-distance-between-markers">Marker Example 1: Distance between markers&lt;/h1>
&lt;p>This examples shows how to create markers in a viewer and measure their distance.
&lt;p class="page-image">
 &lt;a data-modal="bs-lightbox" href="https://mevislab.github.io/examples/pull/118/examples/data_objects/markers/example1/image.png" title="">&lt;img id="" class="img-fluid rounded" src="https://mevislab.github.io/examples/pull/118/examples/data_objects/markers/example1/image.png" alt="Screenshot" />&lt;/a>
 &lt;figcaption class="figure-caption">&lt;/figcaption>
&lt;/p>
&lt;/p>
&lt;h1 id="download">Download&lt;/h1>
&lt;p>You can download the example network &lt;a href="https://mevislab.github.io/examples/pull/118/examples/data_objects/markers/example1/Marker_Example1.mlab">here&lt;/a>&lt;/p></description></item><item><title>Drawing curves</title><link>https://mevislab.github.io/examples/pull/118/examples/data_objects/curves/example1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://mevislab.github.io/examples/pull/118/examples/data_objects/curves/example1/</guid><description>&lt;h1 id="curves-example-drawing-curves">Curves Example: Drawing curves&lt;/h1>
&lt;p>This examples shows how to create and render curves.
&lt;p class="page-image">
 &lt;a data-modal="bs-lightbox" href="https://mevislab.github.io/examples/pull/118/examples/data_objects/curves/example1/image.png" title="">&lt;img id="" class="img-fluid rounded" src="https://mevislab.github.io/examples/pull/118/examples/data_objects/curves/example1/image.png" alt="Screenshot" />&lt;/a>
 &lt;figcaption class="figure-caption">&lt;/figcaption>
&lt;/p>
&lt;/p>
&lt;h1 id="download">Download&lt;/h1>
&lt;p>You can download the example network &lt;a href="https://mevislab.github.io/examples/pull/118/examples/data_objects/curves/example1/Curves.mlab">here&lt;/a>&lt;/p></description></item><item><title>Image overlays</title><link>https://mevislab.github.io/examples/pull/118/examples/visualization/example3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://mevislab.github.io/examples/pull/118/examples/visualization/example3/</guid><description>&lt;h1 id="visualization-example-3-image-overlays">Visualization Example 3: Image overlays&lt;/h1>
&lt;p>This example shows the creation of an overlay. Using the module &lt;code>SoView2DOverlay&lt;/code>, an overlay can be blended over a 2D image.
&lt;p class="page-image">
 &lt;a data-modal="bs-lightbox" href="https://mevislab.github.io/examples/pull/118/examples/visualization/example3/image.png" title="">&lt;img id="" class="img-fluid rounded" src="https://mevislab.github.io/examples/pull/118/examples/visualization/example3/image.png" alt="Screenshot" />&lt;/a>
 &lt;figcaption class="figure-caption">&lt;/figcaption>
&lt;/p>
&lt;/p>
&lt;h1 id="download">Download&lt;/h1>
&lt;p>You can download the example network &lt;a href="https://mevislab.github.io/examples/pull/118/examples/visualization/example3/VisualizationExample3.mlab">here&lt;/a>&lt;/p></description></item><item><title>Interactively moving WEM</title><link>https://mevislab.github.io/examples/pull/118/examples/data_objects/surface_objects/example4/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://mevislab.github.io/examples/pull/118/examples/data_objects/surface_objects/example4/</guid><description>&lt;h1 id="surface-example-4-interactively-moving-wem">Surface Example 4: Interactively moving WEM&lt;/h1>
&lt;p>This example shows how to use dragger modules, to modify objects in a 3D viewer.
&lt;p class="page-image">
 &lt;a data-modal="bs-lightbox" href="https://mevislab.github.io/examples/pull/118/examples/data_objects/surface_objects/example4/image.png" title="">&lt;img id="" class="img-fluid rounded" src="https://mevislab.github.io/examples/pull/118/examples/data_objects/surface_objects/example4/image.png" alt="Screenshot" />&lt;/a>
 &lt;figcaption class="figure-caption">&lt;/figcaption>
&lt;/p>
&lt;/p>
&lt;h1 id="download">Download&lt;/h1>
&lt;p>You can download the example network &lt;a href="https://mevislab.github.io/examples/pull/118/examples/data_objects/surface_objects/example4/SurfaceExample4.zip">here&lt;/a>&lt;/p></description></item><item><title>Masking images</title><link>https://mevislab.github.io/examples/pull/118/examples/image_processing/example2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://mevislab.github.io/examples/pull/118/examples/image_processing/example2/</guid><description>&lt;h1 id="image-processing-example-2-masking-images">Image Processing Example 2: Masking images&lt;/h1>
&lt;p>In this example, we create a simple mask on an image, so that background pixels are not affected by changes of the window/level values.&lt;/p>
&lt;h2 id="summary">Summary&lt;/h2>
&lt;p>We are loading images by using the &lt;code>LocalImage&lt;/code> module and show them in a &lt;code>SynchroView2D&lt;/code>. The same image is shown in the right viewer of the &lt;code>SynchroView2D&lt;/code> but with a &lt;code>Threshold&lt;/code> based &lt;code>Mask&lt;/code>.&lt;/p>
&lt;p>&lt;p class="page-image">
 &lt;a data-modal="bs-lightbox" href="https://mevislab.github.io/examples/pull/118/examples/image_processing/example2/image.png" title="">&lt;img id="" class="img-fluid rounded" src="https://mevislab.github.io/examples/pull/118/examples/image_processing/example2/image.png" alt="Screenshot" />&lt;/a>
 &lt;figcaption class="figure-caption">&lt;/figcaption>
&lt;/p>
&lt;/p>
&lt;h1 id="download">Download&lt;/h1>
&lt;p>You can download the example network &lt;a href="https://mevislab.github.io/examples/pull/118/examples/image_processing/example2/ImageMask.mlab">here&lt;/a>&lt;/p></description></item><item><title>Mouse interactions in an Open Inventor scene</title><link>https://mevislab.github.io/examples/pull/118/examples/open_inventor/example2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://mevislab.github.io/examples/pull/118/examples/open_inventor/example2/</guid><description>&lt;h1 id="open-inventor-example-2-mouse-interactions-in-an-open-inventor-scene">Open Inventor Example 2: Mouse interactions in an Open Inventor scene&lt;/h1>
&lt;p>This example shows how to implement object interactions.&lt;/p>
&lt;h2 id="summary">Summary&lt;/h2>
&lt;p>A &lt;code>SoExaminerViewer&lt;/code> is used to render a &lt;code>SoCube&lt;/code> object. The &lt;code>SoMouseGrabber&lt;/code> is used to identify mouse interactions in the viewer and to resize the cube.&lt;/p>
&lt;p>&lt;p class="page-image">
 &lt;a data-modal="bs-lightbox" href="https://mevislab.github.io/examples/pull/118/examples/open_inventor/example2/image.png" title="">&lt;img id="" class="img-fluid rounded" src="https://mevislab.github.io/examples/pull/118/examples/open_inventor/example2/image.png" alt="Screenshot" />&lt;/a>
 &lt;figcaption class="figure-caption">&lt;/figcaption>
&lt;/p>
&lt;/p>
&lt;h1 id="download">Download&lt;/h1>
&lt;p>You can download the example network &lt;a href="https://mevislab.github.io/examples/pull/118/examples/open_inventor/example2/OpenInventorExample2.mlab">here&lt;/a>&lt;/p></description></item><item><title>Open Inventor objects</title><link>https://mevislab.github.io/examples/pull/118/examples/open_inventor/example1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://mevislab.github.io/examples/pull/118/examples/open_inventor/example1/</guid><description>&lt;h1 id="open-inventor-example-1-open-inventor-objects">Open Inventor Example 1: Open Inventor objects&lt;/h1>
&lt;p>In this example a simple Open Inventor scene is created. The Open Inventor scene shows three objects of different color and shape.&lt;/p>
&lt;h2 id="summary">Summary&lt;/h2>
&lt;p>A &lt;code>SoExaminerViewer&lt;/code> is used to render open inventor scenes in 3D. The &lt;code>SoBackground&lt;/code> module defines the background of the whole scene.&lt;/p>
&lt;p>Three 3D objects are created (&lt;code>SoCone&lt;/code>, &lt;code>SoSphere&lt;/code> and &lt;code>SoCube&lt;/code>) having a defined &lt;code>SoMaterial&lt;/code> module for setting the &lt;em>DiffuseColor&lt;/em> of the object. The cube and the cone are also transformed by a &lt;code>SoTransform&lt;/code> module so that they are located next to the centered sphere.&lt;/p></description></item><item><title>Panel for the contour filter</title><link>https://mevislab.github.io/examples/pull/118/examples/basic_mechanisms/macro_modules_and_module_interaction/example1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://mevislab.github.io/examples/pull/118/examples/basic_mechanisms/macro_modules_and_module_interaction/example1/</guid><description>&lt;h1 id="example-1-panel-for-the-contour-filter">Example 1: Panel for the contour filter&lt;/h1>
&lt;p>This example contains a whole package structure. Inside you can find the example contour filter for which a panel was created.&lt;/p>
&lt;h2 id="summary">Summary&lt;/h2>
&lt;p>A new macro module &lt;code>Filter&lt;/code> has been created. Initially macro modules do not provide an own panel containing user interface elements such as buttons. The &lt;em>Automatic Panel&lt;/em> is shown on double-clicking the module providing the name of the module.&lt;/p>
&lt;p>In this example we update the &lt;em>*.script&lt;/em> file of the &lt;code>Filter&lt;/code> module to display the kernel selection field of the &lt;code>Convolution&lt;/code> module within its network.&lt;/p></description></item><item><title>Processing and modification of WEMs</title><link>https://mevislab.github.io/examples/pull/118/examples/data_objects/surface_objects/example2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://mevislab.github.io/examples/pull/118/examples/data_objects/surface_objects/example2/</guid><description>&lt;h1 id="surface-example-2-processing-and-modification-of-wems">Surface Example 2: Processing and modification of WEMs&lt;/h1>
&lt;p>This example shows how to process and modify WEMs using the modules &lt;code>WEMModify&lt;/code>, &lt;code>WEMSmooth&lt;/code> and &lt;code>WEMSurfaceDistance&lt;/code>.
&lt;p class="page-image">
 &lt;a data-modal="bs-lightbox" href="https://mevislab.github.io/examples/pull/118/examples/data_objects/surface_objects/example2/DO7_03.png" title="">&lt;img id="" class="img-fluid rounded" src="https://mevislab.github.io/examples/pull/118/examples/data_objects/surface_objects/example2/DO7_03.png" alt="Screenshot" />&lt;/a>
 &lt;figcaption class="figure-caption">&lt;/figcaption>
&lt;/p>
&lt;/p>
&lt;h1 id="download">Download&lt;/h1>
&lt;p>You can download the example network &lt;a href="https://mevislab.github.io/examples/pull/118/examples/data_objects/surface_objects/example2/SurfaceExample2.mlab">here&lt;/a>&lt;/p></description></item><item><title>Python scripting</title><link>https://mevislab.github.io/examples/pull/118/examples/basic_mechanisms/macro_modules_and_module_interaction/example2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://mevislab.github.io/examples/pull/118/examples/basic_mechanisms/macro_modules_and_module_interaction/example2/</guid><description>&lt;h1 id="example-2-python-scripting">Example 2: Python scripting&lt;/h1>
&lt;p>This example shows how to create module interactions via Python scripting.&lt;/p>
&lt;h2 id="summary">Summary&lt;/h2>
&lt;p>A new macro module &lt;code>IsoCSOs&lt;/code> is created providing two viewers in its internal network, &lt;code>View2D&lt;/code> and &lt;code>SoExaminerViewer&lt;/code>. Both viewers are included in the panel of the module.&lt;/p>
&lt;p>To showcase how Python functions can be implemented in MeVisLab and called from within a module, additional buttons to browse directories and create contours via the &lt;code>CSOIsoGenerator&lt;/code> are added. Lastly a field listener is implemented reacting to field changes by colorizing contours when the user hovers over them with the mouse.&lt;/p></description></item><item><title>Region Growing (Segmentation)</title><link>https://mevislab.github.io/examples/pull/118/examples/image_processing/example3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://mevislab.github.io/examples/pull/118/examples/image_processing/example3/</guid><description>&lt;h1 id="image-processing-example-3-region-growing-segmentation">Image Processing Example 3: Region Growing (Segmentation)&lt;/h1>
&lt;p>In this example, we create a simple mask on an image by using the &lt;code>RegionGrowing&lt;/code> module.&lt;/p>
&lt;h2 id="summary">Summary&lt;/h2>
&lt;p>We are loading images by using the &lt;code>LocalImage&lt;/code> module and show them in a &lt;code>SynchroView2D&lt;/code>. The same image is used as input for the &lt;code>RegionGrowing&lt;/code> module. The starting point for the algorithm is a list of markers created by the &lt;code>SoView2DMarkerEditor&lt;/code>. As the &lt;code>RegionGrowing&lt;/code> may leave gaps, an additional &lt;code>CloseGap&lt;/code> module is added. The resulting segmentation mask is shown as an overlay on the original image via &lt;code>SoView2DOverlay&lt;/code>.&lt;/p></description></item><item><title>Subtract 3D objects</title><link>https://mevislab.github.io/examples/pull/118/examples/image_processing/example4/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://mevislab.github.io/examples/pull/118/examples/image_processing/example4/</guid><description>&lt;h1 id="image-processing-example-4-subtract-3d-objects">Image Processing Example 4: Subtract 3D objects&lt;/h1>
&lt;p>In this example, we subtract a sphere from another WEM.&lt;/p>
&lt;h2 id="summary">Summary&lt;/h2>
&lt;p>We are loading images by using the &lt;code>LocalImage&lt;/code> module and render them as a 3D scene in a &lt;code>SoExaminerViewer&lt;/code>. We also add a sphere which is then subtracted from the original image.&lt;/p>
&lt;p>&lt;p class="page-image">
 &lt;a data-modal="bs-lightbox" href="https://mevislab.github.io/examples/pull/118/examples/image_processing/example4/image.png" title="">&lt;img id="" class="img-fluid rounded" src="https://mevislab.github.io/examples/pull/118/examples/image_processing/example4/image.png" alt="Screenshot" />&lt;/a>
 &lt;figcaption class="figure-caption">&lt;/figcaption>
&lt;/p>
&lt;/p>
&lt;h1 id="download">Download&lt;/h1>
&lt;p>You can download the example network &lt;a href="https://mevislab.github.io/examples/pull/118/examples/image_processing/example4/Subtract3DObjects.mlab">here&lt;/a>&lt;/p></description></item><item><title>Synchronous view of two images</title><link>https://mevislab.github.io/examples/pull/118/examples/visualization/example1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://mevislab.github.io/examples/pull/118/examples/visualization/example1/</guid><description>&lt;h1 id="visualization-example-1-synchronous-view-of-two-images">Visualization Example 1: Synchronous view of two images&lt;/h1>
&lt;p>This very simple example shows how to load an image and apply a basic &lt;code>Convolution&lt;/code> filter to the image. The image with and without filter is shown in a Viewer and scrolling is synchronized so that the same slice is shown for both images.&lt;/p>
&lt;p>&lt;p class="page-image">
 &lt;a data-modal="bs-lightbox" href="https://mevislab.github.io/examples/pull/118/examples/visualization/example1/image.png" title="">&lt;img id="" class="img-fluid rounded" src="https://mevislab.github.io/examples/pull/118/examples/visualization/example1/image.png" alt="Screenshot" />&lt;/a>
 &lt;figcaption class="figure-caption">&lt;/figcaption>
&lt;/p>
&lt;/p>
&lt;h1 id="download">Download&lt;/h1>
&lt;p>You can download the example network &lt;a href="https://mevislab.github.io/examples/pull/118/examples/visualization/example1/VisualizationExample1.mlab">here&lt;/a>&lt;/p></description></item><item><title>Volume rendering and interactions</title><link>https://mevislab.github.io/examples/pull/118/examples/visualization/example5/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://mevislab.github.io/examples/pull/118/examples/visualization/example5/</guid><description>&lt;h1 id="visualization-example-5-volume-rendering-and-interactions">Visualization Example 5: Volume rendering and interactions&lt;/h1>
&lt;p>This example shows the volume rendering of a scan. The texture of the volume is edited and animations are implemented.
&lt;p class="page-image">
 &lt;a data-modal="bs-lightbox" href="https://mevislab.github.io/examples/pull/118/examples/visualization/example5/image.png" title="">&lt;img id="" class="img-fluid rounded" src="https://mevislab.github.io/examples/pull/118/examples/visualization/example5/image.png" alt="Screenshot" />&lt;/a>
 &lt;figcaption class="figure-caption">&lt;/figcaption>
&lt;/p>
&lt;/p>
&lt;h1 id="download">Download&lt;/h1>
&lt;p>You can download the example network &lt;a href="https://mevislab.github.io/examples/pull/118/examples/visualization/example5/VisualizationExample5.mlab">here&lt;/a>&lt;/p></description></item><item><title>Volume Rendering vs. Path Tracing</title><link>https://mevislab.github.io/examples/pull/118/examples/visualization/example6/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://mevislab.github.io/examples/pull/118/examples/visualization/example6/</guid><description>&lt;h1 id="visualization-example-61-volume-rendering-vs-path-tracing">Visualization Example 6.1: Volume Rendering vs. Path Tracing&lt;/h1>
&lt;p>This example shows a comparison between Volume Rendering and Path Tracing. The same scene is rendered and the camera interactions in both viewers are synchronized.
&lt;p class="page-image">
 &lt;a data-modal="bs-lightbox" href="https://mevislab.github.io/examples/pull/118/examples/visualization/example6/image.png" title="">&lt;img id="" class="img-fluid rounded" src="https://mevislab.github.io/examples/pull/118/examples/visualization/example6/image.png" alt="Screenshot" />&lt;/a>
 &lt;figcaption class="figure-caption">&lt;/figcaption>
&lt;/p>
&lt;/p>
&lt;h1 id="download">Download&lt;/h1>
&lt;p>You can download the example network &lt;a href="https://mevislab.github.io/examples/pull/118/examples/visualization/example6/pathtracer1.mlab">here&lt;/a>&lt;/p></description></item><item><title>WEM - Primitive Value Lists</title><link>https://mevislab.github.io/examples/pull/118/examples/data_objects/surface_objects/example5/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://mevislab.github.io/examples/pull/118/examples/data_objects/surface_objects/example5/</guid><description>&lt;h1 id="surface-example-5-wem---primitive-value-lists">Surface Example 5: WEM - Primitive Value Lists&lt;/h1>
&lt;p>This example shows how to use Primitive Value Lists (PVLs). With the help of PVLs the distance between the surfaces of WEMs is color coded.
&lt;p class="page-image">
 &lt;a data-modal="bs-lightbox" href="https://mevislab.github.io/examples/pull/118/examples/data_objects/surface_objects/example5/image.png" title="">&lt;img id="" class="img-fluid rounded" src="https://mevislab.github.io/examples/pull/118/examples/data_objects/surface_objects/example5/image.png" alt="Screenshot" />&lt;/a>
 &lt;figcaption class="figure-caption">&lt;/figcaption>
&lt;/p>
&lt;/p>
&lt;h1 id="download">Download&lt;/h1>
&lt;p>You can download the example network &lt;a href="https://mevislab.github.io/examples/pull/118/examples/data_objects/surface_objects/example5/SurfaceExample5.mlab">here&lt;/a>&lt;/p></description></item></channel></rss>