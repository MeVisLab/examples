<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Beginner on MeVisLab Examples</title><link>https://mevislab.github.io/examples/pull/47/tags/beginner/</link><description>Recent content in Beginner on MeVisLab Examples</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Wed, 22 Mar 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://mevislab.github.io/examples/pull/47/tags/beginner/index.xml" rel="self" type="application/rss+xml"/><item><title>Chapter I: Basic Mechanisms of MeVisLab</title><link>https://mevislab.github.io/examples/pull/47/tutorials/basicmechanisms/</link><pubDate>Wed, 15 Jun 2022 08:54:53 +0200</pubDate><guid>https://mevislab.github.io/examples/pull/47/tutorials/basicmechanisms/</guid><description>Basic Mechanics of MeVisLab (Example: Building a Contour Filter) In this chapter you will learn the basic mechanisms of the MeVisLab IDE. You will learn how to re-use existing modules to load and view data and you will build your first processing pipeline.
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;This example is also available on YouTube. Extra Infos:&amp;nbsp; Additional information on the basics of MeVisLab are explained here Loading Data First, we need to load the data we would like to work on, e.</description></item><item><title>Example 1: Data import in MeVisLab</title><link>https://mevislab.github.io/examples/pull/47/tutorials/basicmechanisms/dataimport/</link><pubDate>Wed, 15 Jun 2022 08:54:53 +0200</pubDate><guid>https://mevislab.github.io/examples/pull/47/tutorials/basicmechanisms/dataimport/</guid><description>Example 1: Data Import in MeVisLab MeVisLab provides several pre-defined modules to import data for processing in your networks.
This chapter explains the basic data formats and modules to use in your network:
Images DICOM Data Segmentations / 2D Contours 3D Data / Meshes Extra Infos:&amp;nbsp; More detailed explanations for loading images in MeVisLab can be found here Images A very simple module for loading images is the ImageLoad module. ImageLoad Module The ImageLoad module can import the following formats:</description></item><item><title>Example 1.1: MeVisLab Coordinate Systems</title><link>https://mevislab.github.io/examples/pull/47/tutorials/basicmechanisms/coordinatesystems/coordinatesystems/</link><pubDate>Wed, 15 Jun 2022 08:58:44 +0200</pubDate><guid>https://mevislab.github.io/examples/pull/47/tutorials/basicmechanisms/coordinatesystems/coordinatesystems/</guid><description>Example 1.1: MeVisLab Coordinate Systems Three coordinate systems exist next to each other:
World coordinates Voxel coordinates Device coordinates World coordinate systems in MeVisLab are always right handed.
The blue rectangle shows the same region in the three coordinate systems.
Coordinate Systems in MeVisLab World coordinates World coordinates are:
Global: Combine several objects in a view Isotropic: All directions are equivalent Orthogonal: Coordinate axes are orthogonal to each other The origin of the world coordinate system can be anywhere and is not clearly defined.</description></item><item><title>Example 1.2: DICOM Coordinate Systems</title><link>https://mevislab.github.io/examples/pull/47/tutorials/basicmechanisms/coordinatesystems/coordinatesystems2/</link><pubDate>Wed, 15 Jun 2022 08:58:44 +0200</pubDate><guid>https://mevislab.github.io/examples/pull/47/tutorials/basicmechanisms/coordinatesystems/coordinatesystems2/</guid><description>Example 1.2: DICOM Coordinate Systems General Coordinate systems in DICOM are basically the same as world coordinates in MeVisLab (except for the 0.5 voxel offset). World coordinates also refer to the patient axes. They are:
Based on the patient&amp;rsquo;s main body axes (transverse, coronal, sagittal) Measured as 1 coordinate unit = 1 millimeter Right-handed Not standardized regarding their origin World Coordinates in Context of the Human Body The DICOM (Digital Imaging and Communications in Medicine) standard defines a data format that groups information into data sets.</description></item><item><title>Example 2: Macro modules and Module Interaction</title><link>https://mevislab.github.io/examples/pull/47/tutorials/basicmechanisms/macromodules/</link><pubDate>Wed, 15 Jun 2022 08:58:44 +0200</pubDate><guid>https://mevislab.github.io/examples/pull/47/tutorials/basicmechanisms/macromodules/</guid><description>Example 2: Macro modules Macro modules and Module Interactions via User Interface and Python Scripting MeVisLab provides different types of modules, which can be distinguished by their color. The brown modules are called Macro modules. Macro modules condense a whole network into one module. You can open the internal network by pressing the middle mouse button or via right mouse click and select [ Help &amp;rarr; Show Internal Network ]. Macro modules provide the possibility to create customized user interfaces and Python interactions.</description></item><item><title>Example 2.1: Package Creation</title><link>https://mevislab.github.io/examples/pull/47/tutorials/basicmechanisms/macromodules/package/</link><pubDate>Wed, 15 Jun 2022 08:58:44 +0200</pubDate><guid>https://mevislab.github.io/examples/pull/47/tutorials/basicmechanisms/macromodules/package/</guid><description>Example 2.1: Package creation &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;This example is also available on YouTube. Introduction Packages are the way MeVisLab organizes different development projects.
Macro modules and projects are stored in packages. If you like to create a global macro module, you need a package in which this macro module can be stored in. In this chapter, we will create our own package. We start our package creation by creating a package group, because every package needs to be stored in a package group.</description></item><item><title>Example 2.2: Creation of Global Macro modules</title><link>https://mevislab.github.io/examples/pull/47/tutorials/basicmechanisms/macromodules/globalmacromodules/</link><pubDate>Wed, 15 Jun 2022 08:58:44 +0200</pubDate><guid>https://mevislab.github.io/examples/pull/47/tutorials/basicmechanisms/macromodules/globalmacromodules/</guid><description>Example 2.2: Global Macro modules &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;This example is also available on YouTube. Introduction In this chapter you will learn how to create global macro modules. There are many ways to do this. You can convert local macros into global macro modules or you can directly create global macro modules using the Project Wizard. In contrast to local macro modules, global macro modules are commonly available throughout projects and can be found via module search and under [ Modules ].</description></item><item><title>Example 2.3: Creation of module help</title><link>https://mevislab.github.io/examples/pull/47/tutorials/basicmechanisms/macromodules/helpfiles/</link><pubDate>Wed, 15 Jun 2022 08:58:44 +0200</pubDate><guid>https://mevislab.github.io/examples/pull/47/tutorials/basicmechanisms/macromodules/helpfiles/</guid><description>Example 2.3: Creation of module help Generating help of a Macro module is part of the video about Macro modules from Example 2: Creation of Global Macro modules &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;This example is also available on YouTube. Introduction In this chapter, you will learn how to create a help page and an example network. For hands-on training, we will use the macro module Filter, which was created in the previous chapter.
Depending on the way the macro module was created the default help page and example network might or might not exist.</description></item><item><title>Example 2.4: GUI development</title><link>https://mevislab.github.io/examples/pull/47/tutorials/basicmechanisms/macromodules/guidesign/</link><pubDate>Wed, 15 Jun 2022 08:58:44 +0200</pubDate><guid>https://mevislab.github.io/examples/pull/47/tutorials/basicmechanisms/macromodules/guidesign/</guid><description>Example 2.4: Building a Panel Layout: Interactions with Macro modules &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;This example is also available on YouTube. Introduction This chapter will give you an introduction into the creation of module panels and user interfaces. For the implementation you will need to use the MeVisLab Definition Language (MDL) .
Extra Infos:&amp;nbsp; More information about GUI design in MeVisLab can be found here Creating a panel for the macro module flilter Creation of a module panel In Example 2.</description></item><item><title>Example 2.5: Interactions via Python scripting</title><link>https://mevislab.github.io/examples/pull/47/tutorials/basicmechanisms/macromodules/pythonscripting/</link><pubDate>Wed, 15 Jun 2022 08:58:44 +0200</pubDate><guid>https://mevislab.github.io/examples/pull/47/tutorials/basicmechanisms/macromodules/pythonscripting/</guid><description>Example 2.5: Module Interactions Using Python Scripting Introduction This chapter will give you an overview over Python scripting in MeVisLab. Here, no introduction into Python will be given. However, basic knowledge in Python is helpful. Instead, we will show how to integrate and use Python in the MeVisLab SDK.
In fact, nearly everything in MeVisLab can be done via Python scripting: You can add modules to your network, or remove modules, you can dynamically establish and remove connections and so on.</description></item><item><title>Example 2.5.1: The module RunPythonScript</title><link>https://mevislab.github.io/examples/pull/47/tutorials/basicmechanisms/macromodules/scriptingexample1/</link><pubDate>Wed, 15 Jun 2022 08:58:44 +0200</pubDate><guid>https://mevislab.github.io/examples/pull/47/tutorials/basicmechanisms/macromodules/scriptingexample1/</guid><description>Example 2.5.1: The module RunPythonScript &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;This example is also available on YouTube. Introduction The module RunPythonScript allows to execute Python scripts from within a MeVisLab network. You can draw parameter connection from modules to RunPythonScript and back, to process parameter fields using Python scripting.
Steps to do Develop your network In this example, we like to dynamically change the color of a cube in an Open Inventor scene. For that, add and connect the following modules as shown.</description></item><item><title>Chapter II: Open Inventor</title><link>https://mevislab.github.io/examples/pull/47/tutorials/openinventor/</link><pubDate>Wed, 15 Jun 2022 08:56:33 +0200</pubDate><guid>https://mevislab.github.io/examples/pull/47/tutorials/openinventor/</guid><description>Open Inventor modules Introduction Besides blue modules (ML modules) and brown Macro modules, there is a third type of modules, called Open Inventor modules. These modules are green and start with the letters So\* (for Scene Objects). Open Inventor modules process and render 3D scene objects and enable image interactions. Scene objects are transmitted via round input and output connectors. With the help of these modules, Open Inventor scenes can be implemented.</description></item><item><title>Example 1: Open Inventor Objects</title><link>https://mevislab.github.io/examples/pull/47/tutorials/openinventor/openinventorobjects/</link><pubDate>Wed, 15 Jun 2022 08:56:33 +0200</pubDate><guid>https://mevislab.github.io/examples/pull/47/tutorials/openinventor/openinventorobjects/</guid><description>Example 1: Open Inventor Objects &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;This example is also available on YouTube. Introduction In this example we like to construct an Open Inventor scene in which we display three 3D objects of different color and shape.
Steps to do Generating Open Inventor Objects First, add the modules SoExaminerViewer and SoCone to the workspace and connect both modules as shown. The module SoCone creates a cone shaped object, which can be displayed in the Viewer SoExaminerViewer.</description></item><item><title>Example 2: Mouse interactions in Open Inventor</title><link>https://mevislab.github.io/examples/pull/47/tutorials/openinventor/mouseinteractions/</link><pubDate>Wed, 15 Jun 2022 08:56:33 +0200</pubDate><guid>https://mevislab.github.io/examples/pull/47/tutorials/openinventor/mouseinteractions/</guid><description>Example 2: Mouse interactions in Open Inventor &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;This example is also available on YouTube. Introduction In this example, we implement some image or object interactions. We will create a 3D scene, in which we display a cube and change its size using the mouse. We also get to know another viewer, the module SoExaminerViewer. This viewer is important. It enables the rendering of Open Inventor scenes and allows interactions with the Open Inventor scenes.</description></item><item><title>Example 3: Camera Interactions in Open Inventor</title><link>https://mevislab.github.io/examples/pull/47/tutorials/openinventor/camerainteraction/</link><pubDate>Wed, 22 Mar 2023 00:00:00 +0000</pubDate><guid>https://mevislab.github.io/examples/pull/47/tutorials/openinventor/camerainteraction/</guid><description>Example 3: Camera Interactions in Open Inventor Introduction In this example, we are learning the basic principles of camera interactions in Open Inventor. We will show the difference between a SoRenderArea and a SoExaminerViewer and use different modules of the SoCamera* group.
The SoRenderArea module The module SoRenderArea is a simple renderer for Open Inventor scenes. It offers functionality to record movies and to create snapshots, but does not include an own camera or light.</description></item><item><title>Chapter III: Visualization</title><link>https://mevislab.github.io/examples/pull/47/tutorials/visualization/</link><pubDate>Wed, 15 Jun 2022 08:56:33 +0200</pubDate><guid>https://mevislab.github.io/examples/pull/47/tutorials/visualization/</guid><description>Visualization in MeVisLab Introduction MeVisLab contains a whole toolkit to visualize data and images. 2D, 3D and 4D rendering is possible as well as the interaction with images and data objects.
In this chapter, we focus on 2D and 3D visualization and simple image interactions. Not only pixel- and voxel-based data can be visualized, but also scene objects and 3D scenes (see here).
View2D and View3D An easy way to display data and images in 2D and 3D is by using the Modules View2D and View3D.</description></item><item><title>Example 1: Synchronous view of two images</title><link>https://mevislab.github.io/examples/pull/47/tutorials/visualization/visualizationexample1/</link><pubDate>Wed, 15 Jun 2022 08:56:33 +0200</pubDate><guid>https://mevislab.github.io/examples/pull/47/tutorials/visualization/visualizationexample1/</guid><description>Example 1: Synchronous view of two images Introduction In this example we like to use the module SynchroView2D to be able to inspect two different images simultaneously.
The module SynchroView2D provides two 2D viewers that are synchronized.
As in Tutorial Chapter 1 - Basic Mechanics of MeVisLab, the processed and the unprocessed image can be displayed simultaneously. Scrolling through one image automatically changes the slices of both viewers, so slices with the same slice number are shown in both images.</description></item><item><title>Example 2: Creating a magnifier</title><link>https://mevislab.github.io/examples/pull/47/tutorials/visualization/visualizationexample2/</link><pubDate>Wed, 15 Jun 2022 08:56:33 +0200</pubDate><guid>https://mevislab.github.io/examples/pull/47/tutorials/visualization/visualizationexample2/</guid><description>Example 2: Creating a magnifier &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;This example is also available on YouTube. Introduction Medical images are typically displayed in three different viewing directions (see image): coronal, axial and sagittal.
Using the Viewer OrthoView2D you are able to decide, which viewing direction you like to use. In addition to that, you have the opportunity to display all three orthogonal viewing directions simultaneously. Here, we like to display an image of the head in all three viewing directions and mark positions in the image.</description></item><item><title>Example 3: Image Overlays</title><link>https://mevislab.github.io/examples/pull/47/tutorials/visualization/visualizationexample3/</link><pubDate>Wed, 15 Jun 2022 08:56:33 +0200</pubDate><guid>https://mevislab.github.io/examples/pull/47/tutorials/visualization/visualizationexample3/</guid><description>Example 3: How to blend images over each other &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;This example is also available on YouTube. Introduction In this example we will show you how to blend a 2D image over another one. With the help of the module SoView2DOverlay we will create an overlay, which allows us to highlight all bones in the scan.
Steps to do Develop your network Start this example by adding the shown modules, connecting the modules to form a network and loading the example image Bone.</description></item><item><title>Example 4: Display 2D images in Open Inventor SoRenderArea</title><link>https://mevislab.github.io/examples/pull/47/tutorials/visualization/visualizationexample4/</link><pubDate>Wed, 15 Jun 2022 08:56:33 +0200</pubDate><guid>https://mevislab.github.io/examples/pull/47/tutorials/visualization/visualizationexample4/</guid><description>Example 4: Display images converted to Open Inventor scene objects &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;This example is also available on YouTube. Introduction In the previous example you learned how to use the module SoView2DOverlay together with a View2D. MeVisLab provides a whole family of SoView2D* modules (SoView2DOverlay, SoView2DRectangle, SoView2DGrid, &amp;hellip;). All these modules create or interact with scene objects and are based on the module SoView2D, which can convert a voxel-image into a scene object.</description></item><item><title>Example 5: Volume rendering and interactions</title><link>https://mevislab.github.io/examples/pull/47/tutorials/visualization/visualizationexample5/</link><pubDate>Wed, 15 Jun 2022 08:56:33 +0200</pubDate><guid>https://mevislab.github.io/examples/pull/47/tutorials/visualization/visualizationexample5/</guid><description>Example 5: Volume rendering and interactions &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;This example is also available on YouTube. Introduction In this example we like to convert a scan of a head into a 3D scene-object. The scene-object allows to add some textures, interactions and animations.
Steps to do Develop your network Implement the following network and open the image $(DemoDataPath)/BrainMultiModal/ProbandT1.tif.
SoGVRVolumeRenderer The module SoGVRVolumeRenderer allows volume rendering of 3D and 4D images.
Extra Infos:&amp;nbsp; Additional information about Volume Rendering can be found here: Giga Voxel Renderer Change LUT We like to add a surface color to the head.</description></item><item><title>Chapter IV: Image Processing</title><link>https://mevislab.github.io/examples/pull/47/tutorials/image_processing/</link><pubDate>Wed, 15 Jun 2022 08:56:33 +0200</pubDate><guid>https://mevislab.github.io/examples/pull/47/tutorials/image_processing/</guid><description>Image Processing in MeVisLab Digital image processing is the use of a digital computer to process digital images through an algorithm (see Wikipedia).
MeVisLab provides multiple modules for image processing tasks, such as:
Filters Masks Transformations Arithmetics Statistics For details about Image Processing in MeVisLab, see the MeVisLab Documentation In this chapter, you will find some examples for different types of image processing in MeVisLab.</description></item><item><title>Example 1: Arithmetic operations on two images</title><link>https://mevislab.github.io/examples/pull/47/tutorials/image_processing/image_processing1/</link><pubDate>Wed, 15 Jun 2022 08:56:33 +0200</pubDate><guid>https://mevislab.github.io/examples/pull/47/tutorials/image_processing/image_processing1/</guid><description>Example 1: Arithmetic operations on two images &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;This example is also available on YouTube. Introduction We are using the Arithmetic2 module to apply basic scalar functions on two images. The module provides 2 inputs for images and 1 output image for the result.
Steps to do Develop your network Add two LocalImage modules to your workspace for the input images. Select $(DemoDataPath)/BrainMultiModal/ProbandT1.dcm and $(DemoDataPath)/BrainMultiModal/ProbandT2.dcm from MeVisLab demo data and add a SynchroView2D to your network.</description></item><item><title>Example 2: Masking images</title><link>https://mevislab.github.io/examples/pull/47/tutorials/image_processing/image_processing2/</link><pubDate>Wed, 15 Jun 2022 08:56:33 +0200</pubDate><guid>https://mevislab.github.io/examples/pull/47/tutorials/image_processing/image_processing2/</guid><description>Example 2: Masking images &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;This example is also available on YouTube. Introduction The background of medical images is black for most cases. In case an image is inverted or window/level values are adapted, these black pixels outside clinical relevant pixels might become very bright or even white.
Being in a dark room using a large screen, the user might be blended by these large white regions.
Image masking is a very good way to select a defined region where image processing shall be applied.</description></item><item><title>Example 3: Region Growing</title><link>https://mevislab.github.io/examples/pull/47/tutorials/image_processing/image_processing3/</link><pubDate>Wed, 15 Jun 2022 08:56:33 +0200</pubDate><guid>https://mevislab.github.io/examples/pull/47/tutorials/image_processing/image_processing3/</guid><description>Example 3: Region Growing &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;This example is also available on YouTube. Introduction A very simple approach to segment parts of an image is the region growing method. A general explanation can be found here.
In this example, you will segment the brain of an image and show the segmentation results as an overlay on the original image.
Steps to do Develop your network Add a LocalImage module to your workspace and select load $(DemoDataPath)/BrainMultiModal/ProbandT1.</description></item><item><title>Chapter V: Data Objects</title><link>https://mevislab.github.io/examples/pull/47/tutorials/dataobjects/</link><pubDate>Wed, 15 Jun 2022 08:56:33 +0200</pubDate><guid>https://mevislab.github.io/examples/pull/47/tutorials/dataobjects/</guid><description>Data Objects in MeVisLab MeVisLab provides pre-defined data objects, e. g.
Contour Segmented Objects (CSOs) which are three-dimensional objects encapsulating formerly defined contours within images. Surface Objects (Winged Edge Meshes or WEMs) represent the surface of geometrical figures and allow the user to manipulate them. Markers used to mark specific locations or aspects of an image and allow to process those later on. Curves can print the results of a function as two-dimensional mathematical graphs into a a diagram.</description></item><item><title>Contour Objects (CSO)</title><link>https://mevislab.github.io/examples/pull/47/tutorials/dataobjects/contourobjects/</link><pubDate>Wed, 15 Jun 2022 08:56:33 +0200</pubDate><guid>https://mevislab.github.io/examples/pull/47/tutorials/dataobjects/contourobjects/</guid><description>Contour Segmented Objects (CSOs) in MeVisLab Introduction Structure of CSOs MeVisLab provides modules to create contours in images. 3D objects which encapsulate these contours are called Contour Segmented Objects (CSOs).
In the next image, you can see a rectangular shaped CSO. The pink circles you can see are called Seed Points.
Seed Points define the shape of the CSO. In case of a rectangle, you need four Seed Points forming the corners, to define the whole rectangle.</description></item><item><title>Contour Example 1: Creation of Contours</title><link>https://mevislab.github.io/examples/pull/47/tutorials/dataobjects/contours/contourexample1/</link><pubDate>Wed, 15 Jun 2022 08:56:33 +0200</pubDate><guid>https://mevislab.github.io/examples/pull/47/tutorials/dataobjects/contours/contourexample1/</guid><description>Contour Example 1: Creation of Contours Introduction We like to start with the creation of CSOs. To create CSOs, you need a SoCSO*-Editor. There are several different editors, which can be used to create CSOs (see here). Some of them are introduced in this example.
Steps to do Develop your network For this example, we need the following modules. Add the modules to your workspace, connect them as shown below and load the example image $(DemoDataPath)/BrainMultiModal/ProbandT1.</description></item><item><title>Contour Example 2: Contour Interpolation</title><link>https://mevislab.github.io/examples/pull/47/tutorials/dataobjects/contours/contourexample2/</link><pubDate>Wed, 15 Jun 2022 08:56:33 +0200</pubDate><guid>https://mevislab.github.io/examples/pull/47/tutorials/dataobjects/contours/contourexample2/</guid><description>Contour Example 2: Creating Contours using Live Wire and Interpolation Introduction In this example, we like to create CSOs using the Live Wire Algorithm, which allows semi-automatic CSO creation. The algorithm uses edge detection to support the user creating CSOs.
We also like to interpolate CSOs over slices. That means additional CSOs are generated between manual segmentations based on a linear interpolation.
As a last step, we will group together CSOs of the same anatomical unit.</description></item><item><title>Contour Example 3: 2D and 3D Visualization of Contours</title><link>https://mevislab.github.io/examples/pull/47/tutorials/dataobjects/contours/contourexample3/</link><pubDate>Wed, 15 Jun 2022 08:56:33 +0200</pubDate><guid>https://mevislab.github.io/examples/pull/47/tutorials/dataobjects/contours/contourexample3/</guid><description>Contour Example 3: Overlay Creation and 3D Visualization of Contours Introduction In this example, we like to use the created CSOs to display an overlay. This allows us to mark one of two lungs. In addition to that, we will display the whole segmented lobe of the lung in a 3D image.
Steps to do Develop your network Use the network from the contour example 2 and add the modules VoxelizeCSO, SoView2DOverlay and View2D to your workspace.</description></item><item><title>Contour Example 4: Annotation of Images</title><link>https://mevislab.github.io/examples/pull/47/tutorials/dataobjects/contours/contourexample4/</link><pubDate>Wed, 15 Jun 2022 08:56:33 +0200</pubDate><guid>https://mevislab.github.io/examples/pull/47/tutorials/dataobjects/contours/contourexample4/</guid><description>Contour Example 4: Annotation of Images Introduction In this example we like to calculate the volume of our object, in this case the part of the lunge we have segmented.
Steps to do Develop your network and calculate the lunge volume Add the module CalculateVolume and SoView2DAnnotation to your workspace and connect both modules as shown. Update the module CalculateVolume, which directly shows the volume of our object.
Data Objects Contours Example 4 Display the lung volume in the image We now like to display the volume in the image viewer.</description></item><item><title>Contour Example 5: Contours and Ghosting</title><link>https://mevislab.github.io/examples/pull/47/tutorials/dataobjects/contours/contourexample5/</link><pubDate>Wed, 15 Jun 2022 08:56:33 +0200</pubDate><guid>https://mevislab.github.io/examples/pull/47/tutorials/dataobjects/contours/contourexample5/</guid><description>Contour Example 5: Visualizing Contours and Images Introduction In this example, we like to automatically create CSOs based on a predefined iso value.
Steps to do Develop your network Add the following modules to your workspace and connect them as shown. Load the example image Bone.tiff.
Automatic creation of CSOs based on the iso value Now, open the panel of CSOIsoGenerator to set the Iso Value to 1200. If you press Update in the panel, you can see the creation of CSOs on every slide, when opening the module View2D.</description></item><item><title>Surface Objects (WEM)</title><link>https://mevislab.github.io/examples/pull/47/tutorials/dataobjects/surfaceobjects/</link><pubDate>Wed, 15 Jun 2022 08:56:33 +0200</pubDate><guid>https://mevislab.github.io/examples/pull/47/tutorials/dataobjects/surfaceobjects/</guid><description>Surface Objects (WEMs) Introduction In MeVisLab it is possible to create, visualize, process and manipulate surface objects, also known as polygon meshes. Here, we call surface objects Winged Edge Mesh, in short WEM. In this chapter you will get an introduction into WEMs. In addition, you will find examples on how to work with WEMs. For more information on WEMs take a look at the MeVislab Toolbox Reference . If you like to know which WEM formats can be imported into MeVisLab, take a look at the assimp documentation here.</description></item><item><title>Surface Example 1: Creation of WEMs</title><link>https://mevislab.github.io/examples/pull/47/tutorials/dataobjects/surfaces/surfaceexample1/</link><pubDate>Wed, 15 Jun 2022 08:56:33 +0200</pubDate><guid>https://mevislab.github.io/examples/pull/47/tutorials/dataobjects/surfaces/surfaceexample1/</guid><description>Surface Example 1: Create Winged Edge Mesh out of voxel images and CSOs Introduction In this example you will learn how to create a Winged Edge Mesh (WEM). There are several ways how to create WEMs, a few of them are shown in this example. Instead of creating WEMs, it is also possible to load existing WEMs. This was already shown in Surface Objects (WEM) chapter.
Steps to do From image to surface: Generating WEMs out of voxel images At first, we will create a WEM out of a voxel image using the module WEMIsoSurface.</description></item><item><title>Surface Example 2: Processing and Modification of WEM</title><link>https://mevislab.github.io/examples/pull/47/tutorials/dataobjects/surfaces/surfaceexample2/</link><pubDate>Wed, 15 Jun 2022 08:56:33 +0200</pubDate><guid>https://mevislab.github.io/examples/pull/47/tutorials/dataobjects/surfaces/surfaceexample2/</guid><description>Surface Example 2: Processing and Modification of WEM Introduction In this example, you will learn how to modify and process WEMs.
Steps to do Develop your network Modification of WEMs Use the module WEMLoad to load the file venus.off. Then add and connect the shown modules. We like to display the WEM venus two times, one time this WEM is modified. You can use the module WEMModify to apply modifications. In its panel, change the scale and the size of the WEM.</description></item><item><title>Surface Example 3: Interactions with WEM</title><link>https://mevislab.github.io/examples/pull/47/tutorials/dataobjects/surfaces/surfaceexample3/</link><pubDate>Tue, 21 Mar 2023 00:00:00 +0000</pubDate><guid>https://mevislab.github.io/examples/pull/47/tutorials/dataobjects/surfaces/surfaceexample3/</guid><description>Surface Example 3: Interactions with WEM Introduction In these examples, we are showing 2 different possibilities to interact with a WEM:
Scale, rotate and move a WEM in a scene Modify a WEM in a scene Scale, rotate and move a WEM in a scene We are using a SoTransformerDragger module to apply transformations on a 3D WEM object via mouse interactions.
Add a SoCube and a SoBackground module and connect both to a SoExaminerViewer.</description></item><item><title>Surface Example 4: Interactively moving WEM</title><link>https://mevislab.github.io/examples/pull/47/tutorials/dataobjects/surfaces/surfaceexample4/</link><pubDate>Wed, 15 Jun 2022 08:56:33 +0200</pubDate><guid>https://mevislab.github.io/examples/pull/47/tutorials/dataobjects/surfaces/surfaceexample4/</guid><description>Surface Example 4: Interactively moving WEM Introduction In this example, we like to interactively move WEMs using SoDragger modules insight a viewer.
Develop your network Interactively translating objects in 3D using SoDragger modules Add and connect the following modules as shown. In the panel of the module WEMInitialize select the Model Octasphere. After that, open the viewer SoExaminerViewer and make sure to select the Interaction Mode. Now, you are able to click on the presented Octaspehere and move it alongside one axis.</description></item><item><title>Chapter VI: Testing</title><link>https://mevislab.github.io/examples/pull/47/tutorials/testing/</link><pubDate>Wed, 15 Jun 2022 08:56:33 +0200</pubDate><guid>https://mevislab.github.io/examples/pull/47/tutorials/testing/</guid><description>MeVisLab Tutorial Chapter VI Testing, Profiling and Debugging in MeVisLab The MeVisLab Integrated Development Environment (IDE) provides tools for writing automated tests in Python, profiling your network performance and debugging your Python code.
In this chapter, all of these tools will be explained.
Testing The MeVisLab TestCenter is the starting point of your tests. Select [ File &amp;rarr; Run TestCaseManager ] to open the user interface of the TestCaseManager.
MeVisLab TestCaseManager Test Selection The Test Selection allows you to define a selection of test cases to be executed.</description></item><item><title>Marker Objects</title><link>https://mevislab.github.io/examples/pull/47/tutorials/dataobjects/markerobjects/</link><pubDate>Wed, 15 Jun 2022 08:56:33 +0200</pubDate><guid>https://mevislab.github.io/examples/pull/47/tutorials/dataobjects/markerobjects/</guid><description>Markers in MeVisLab In MeVisLab you can equip images and other data objects with markers. In this example you will see how to create, process and use markers.
Creation and Rendering To create markers, you can use a marker editor, for example the SoView2DMarkerEditor. Connect this editor to a viewer as shown below. Now you can interactively create new markers. Connect the module XMarkerListContainer to your marker editor to store markers in a list.</description></item><item><title>Example 1: Distance between Markers</title><link>https://mevislab.github.io/examples/pull/47/tutorials/dataobjects/markers/markerexample1/</link><pubDate>Wed, 15 Jun 2022 08:56:33 +0200</pubDate><guid>https://mevislab.github.io/examples/pull/47/tutorials/dataobjects/markers/markerexample1/</guid><description>Example 1: Calculating the distance between markers Introduction In this example, we will measure the distance between one position in an image to a list of markers.
Steps to do Develop your network Add the following modules and connect them as shown.
We changed the names of the modules SoView2DMarkerEditor and XMarkerLIstContainer, to distinguish these modules from two similar modules we will add later on. Open the panel of SoView2DMarkerEditor and select the tab Drawing.</description></item><item><title>Example 1: Writing a simple test case in MeVisLab</title><link>https://mevislab.github.io/examples/pull/47/tutorials/testing/testingexample1/</link><pubDate>Wed, 15 Jun 2022 08:56:33 +0200</pubDate><guid>https://mevislab.github.io/examples/pull/47/tutorials/testing/testingexample1/</guid><description>Example 1: Writing a simple test case in MeVisLab &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;This example is also available on YouTube. Introduction In this example, you will learn how to write an automated test for a simple network using the DicomImport, MinMaxScan and View3D modules. You can write test cases for any other module and network yourself.
Steps to do Creating the network to be used for testing Add the following modules to your workspace and connect them as seen below:</description></item><item><title>Example 2: Profiling in MeVisLab</title><link>https://mevislab.github.io/examples/pull/47/tutorials/testing/testingexample2/</link><pubDate>Wed, 15 Jun 2022 08:56:33 +0200</pubDate><guid>https://mevislab.github.io/examples/pull/47/tutorials/testing/testingexample2/</guid><description>Example 2: Profiling in MeVisLab &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;This example is also available on YouTube. Introduction In this example, we are using the MeVisLab Profiler to inspect the memory and CPU consumption of the modules in an example network.
Steps to do Creating the network to be used for profiling You can open any network you like, here we are using the example network of the module MinMaxScan for profiling. Add the module MinMaxScan to your workspace and open the example network via right-click and selecting [ Help &amp;rarr; Show Example Network ].</description></item><item><title>Curves</title><link>https://mevislab.github.io/examples/pull/47/tutorials/dataobjects/curves/</link><pubDate>Wed, 15 Jun 2022 08:56:33 +0200</pubDate><guid>https://mevislab.github.io/examples/pull/47/tutorials/dataobjects/curves/</guid><description>Curves in MeVisLab Introduction Curves can be used in MeVisLab to print the results of a function as two-dimensional mathematical curves into a diagram.
Curves in MeVisLab In the given example, only modules available in commercial MeVisLab Professional SDK have been used. The non-commercial MeVisLab Standard SDK provides more modules for curves.</description></item><item><title>Example 1: Drawing curves</title><link>https://mevislab.github.io/examples/pull/47/tutorials/dataobjects/curves/curvesexample1/</link><pubDate>Wed, 15 Jun 2022 08:56:33 +0200</pubDate><guid>https://mevislab.github.io/examples/pull/47/tutorials/dataobjects/curves/curvesexample1/</guid><description>Example 1: Drawing curves Introduction In this example, you will draw one or more curves into a diagram and define different styles for the curves.
Steps to do Develop your network A curve requires x- and y-coordinates to be printed. You can use the CurveCreator module as input for these coordinates. The SoDiagram2D draws the curves into a SoRenderArea. You can also define the style of the curves by using the StylePalette module.</description></item><item><title>assimp</title><link>https://mevislab.github.io/examples/pull/47/tutorials/thirdparty/assimp/</link><pubDate>Wed, 15 Jun 2022 08:56:33 +0200</pubDate><guid>https://mevislab.github.io/examples/pull/47/tutorials/thirdparty/assimp/</guid><description>Asset-Importer-Lib (assimp) Introduction Assimp (Asset-Importer-Lib) is a library to load and process geometric scenes from various 3D data formats.
This chapter provides some examples of how 3D formats can be imported into MeVisLab. In general you always need a SoSceneLoader module. The SoSceneLoader allows to load meshes as Open Inventor points/lines/triangles/faces using the Open Asset Import Library.
SoSceneLoader You can also use the SoSceneWriter module to export your 3D scenes from MeVisLab into any of the output formats listed below.</description></item><item><title>Example 1: 3D Printing in MeVisLab</title><link>https://mevislab.github.io/examples/pull/47/tutorials/thirdparty/assimp/assimpexample1/</link><pubDate>Wed, 15 Jun 2022 08:56:33 +0200</pubDate><guid>https://mevislab.github.io/examples/pull/47/tutorials/thirdparty/assimp/assimpexample1/</guid><description>Example 1: 3D Printing in MeVisLab Introduction This example uses the assimp library to load a 3D file and save the file as *.stl for 3D printing.
Steps to do Develop your network Add the modules SoSceneLoader, SoBackground and SoExaminerViewer to your workspace and connect them as seen below.
Example Network Open the 3D file Select the file vtkCow.obj from MeVisLab demo data directory. Open SoExaminerViewer and inspect the scene. You will see a 3D cow.</description></item></channel></rss>