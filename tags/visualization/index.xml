<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Visualization on MeVisLab Examples</title><link>https://mevislab.github.io/examples/tags/visualization/</link><description>Recent content in Visualization on MeVisLab Examples</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Mon, 08 Jan 2024 00:00:00 +0000</lastBuildDate><atom:link href="https://mevislab.github.io/examples/tags/visualization/index.xml" rel="self" type="application/rss+xml"/><item><title>Chapter III: Visualization</title><link>https://mevislab.github.io/examples/tutorials/visualization/</link><pubDate>Wed, 15 Jun 2022 08:56:33 +0200</pubDate><guid>https://mevislab.github.io/examples/tutorials/visualization/</guid><description>&lt;h1 id="TutorialVisualization">Visualization in MeVisLab&lt;/h1>
&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;p>Images and data objects can be rendered in 2D and 3D and interacted with in several ways using a set of tools available through MeVisLab.
In this chapter in particular, we will focus on simple image interaction with two- and three-dimensional visualizations.&lt;/p>

&lt;svg xmlns="http://www.w3.org/2000/svg" style="display: none;">
 &lt;symbol id="check-fill" fill="currentColor" viewBox="0 0 16 16">
 &lt;path d="M16 8A8 8 0 1 1 0 8a8 8 0 0 1 16 0zm-3.97-3.03a.75.75 0 0 0-1.08.022L7.477 9.417 5.384 7.323a.75.75 0 0 0-1.06 1.06L6.97 11.03a.75.75 0 0 0 1.079-.02l3.992-4.99a.75.75 0 0 0-.01-1.05z"/>
 &lt;/symbol>
 &lt;symbol id="info-fill" fill="currentColor" viewBox="0 0 16 16">
 &lt;path d="M8 16A8 8 0 1 0 8 0a8 8 0 0 0 0 16zm.93-9.412-1 4.705c-.07.34.029.533.304.533.194 0 .487-.07.686-.246l-.088.416c-.287.346-.92.598-1.465.598-.703 0-1.002-.422-.808-1.319l.738-3.468c.064-.293.006-.399-.287-.47l-.451-.081.082-.381 2.29-.287zM8 5.5a1 1 0 1 1 0-2 1 1 0 0 1 0 2z"/>
 &lt;/symbol>
 &lt;symbol id="warning-fill" fill="currentColor" viewBox="0 0 16 16">
 &lt;path d="M8.982 1.566a1.13 1.13 0 0 0-1.96 0L.165 13.233c-.457.778.091 1.767.98 1.767h13.713c.889 0 1.438-.99.98-1.767L8.982 1.566zM8 5c.535 0 .954.462.9.995l-.35 3.507a.552.552 0 0 1-1.1 0L7.1 5.995A.905.905 0 0 1 8 5zm.002 6a1 1 0 1 1 0 2 1 1 0 0 1 0-2z"/>
 &lt;/symbol>
 &lt;symbol id="danger-fill" fill="currentColor" viewBox="0 0 16 16">
 &lt;path d="M8.982 1.566a1.13 1.13 0 0 0-1.96 0L.165 13.233c-.457.778.091 1.767.98 1.767h13.713c.889 0 1.438-.99.98-1.767L8.982 1.566zM8 5c.535 0 .954.462.9.995l-.35 3.507a.552.552 0 0 1-1.1 0L7.1 5.995A.905.905 0 0 1 8 5zm.002 6a1 1 0 1 1 0 2 1 1 0 0 1 0-2z"/>
 &lt;/symbol>
&lt;/svg>

&lt;div class="alert alert-primary alert-info d-flex align-items-center" role="alert">
 &lt;svg class="bi flex-shrink-0 me-2" width="24" height="24" role="img" aria-label="Info:">&lt;use xlink:href="#info-fill"/>&lt;/svg>
 &lt;div>
 &lt;b>Info:&amp;nbsp;&lt;/b>
 Not only pixel- and voxel-based data, but also scene objects and 3D scenes can be visualized. See our tutorial on &lt;a href="https://mevislab.github.io/examples/tutorials/openinventor#TutorialOpenInventorModules">OpenInventorModules&lt;/a> for further information.
 &lt;/div>
&lt;/div>
&lt;h2 id="view2d-and-view3d">View2D and View3D&lt;/h2>
&lt;p>An easy way to display data and images in 2D and 3D is by using the Modules &lt;code>View2D&lt;/code> and &lt;code>View3D&lt;/code>. What can be done with these viewers?&lt;/p></description></item><item><title>Example 1: Synchronous view of two images</title><link>https://mevislab.github.io/examples/tutorials/visualization/visualizationexample1/</link><pubDate>Wed, 15 Jun 2022 08:56:33 +0200</pubDate><guid>https://mevislab.github.io/examples/tutorials/visualization/visualizationexample1/</guid><description>&lt;h1 id="VisualizationExample1">Example 1: Synchronous view of two images&lt;/h1>
&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;p>In this example we like to use the module &lt;code>SynchroView2D&lt;/code> to be able to inspect two different images simultaneously.&lt;/p>
&lt;p>The module &lt;code>SynchroView2D&lt;/code> provides two 2D viewers that are synchronized.&lt;/p>
&lt;p>As in Tutorial &lt;a href="https://mevislab.github.io/examples/tutorials/basicmechanisms/#TutorialParameterConnection">Chapter 1 - Basic Mechanics of MeVisLab&lt;/a>, the processed and the unprocessed image can be displayed simultaneously. Scrolling through one image automatically changes the slices of both viewers, so slices with the same slice number are shown in both images.&lt;/p></description></item><item><title>Example 2: Creating a magnifier</title><link>https://mevislab.github.io/examples/tutorials/visualization/visualizationexample2/</link><pubDate>Wed, 15 Jun 2022 08:56:33 +0200</pubDate><guid>https://mevislab.github.io/examples/tutorials/visualization/visualizationexample2/</guid><description>&lt;h1 id="TutorialVisualizationExample2">Example 2: Creating a magnifier&lt;/h1>
&lt;div class="alert alert-secondary d-flex align-items-center" role="alert">
 &lt;div>
 &lt;img width="100px" src="https://mevislab.github.io/examples/images/youtube.svg" />&amp;nbsp;&amp;nbsp;&lt;a href="https://www.youtube.com/watch?v=lfq_TkWOuCo" target="_blank">&lt;img width="100px" src="https://img.youtube.com/vi/lfq_TkWOuCo/0.jpg" />&lt;/a>&amp;nbsp;&amp;nbsp;&amp;nbsp;This example is also available on &lt;a href="https://www.youtube.com/watch?v=lfq_TkWOuCo" target="_blank">YouTube&lt;/a>.
 &lt;/div>
&lt;/div>
&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;p>Medical images are typically displayed in three different viewing directions (see image): coronal, axial and sagittal.&lt;/p>
&lt;p>Using the Viewer &lt;code>OrthoView2D&lt;/code> you are able to decide, which viewing direction you like to use. In addition to that, you have the opportunity to display all three orthogonal viewing directions simultaneously. Here, we like to display an image of the head in all three viewing directions and mark positions in the image.&lt;/p></description></item><item><title>Example 3: Image Overlays</title><link>https://mevislab.github.io/examples/tutorials/visualization/visualizationexample3/</link><pubDate>Wed, 15 Jun 2022 08:56:33 +0200</pubDate><guid>https://mevislab.github.io/examples/tutorials/visualization/visualizationexample3/</guid><description>&lt;h1 id="TutorialVisualizationExample3">Example 3: How to blend images over each other&lt;/h1>
&lt;div class="alert alert-secondary d-flex align-items-center" role="alert">
 &lt;div>
 &lt;img width="100px" src="https://mevislab.github.io/examples/images/youtube.svg" />&amp;nbsp;&amp;nbsp;&lt;a href="https://www.youtube.com/watch?v=e8iFGp-St0c" target="_blank">&lt;img width="100px" src="https://img.youtube.com/vi/e8iFGp-St0c/0.jpg" />&lt;/a>&amp;nbsp;&amp;nbsp;&amp;nbsp;This example is also available on &lt;a href="https://www.youtube.com/watch?v=e8iFGp-St0c" target="_blank">YouTube&lt;/a>.
 &lt;/div>
&lt;/div>
&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;p>In this example we will show you how to blend a 2D image over another one. With the help of the module &lt;code>SoView2DOverlay&lt;/code> we will create an overlay, which allows us to highlight all bones in the scan.&lt;/p>
&lt;h2 id="steps-to-do">Steps to do&lt;/h2>
&lt;h3 id="develop-your-network">Develop your network&lt;/h3>
&lt;p>Start this example by adding the shown modules, connecting the modules to form a network and loading the example image &lt;em>Bone.tiff&lt;/em>.&lt;/p></description></item><item><title>Example 4: Display 2D images in Open Inventor SoRenderArea</title><link>https://mevislab.github.io/examples/tutorials/visualization/visualizationexample4/</link><pubDate>Wed, 15 Jun 2022 08:56:33 +0200</pubDate><guid>https://mevislab.github.io/examples/tutorials/visualization/visualizationexample4/</guid><description>&lt;h1 id="TutorialVisualizationExample4">Example 4: Display images converted to Open Inventor scene objects&lt;/h1>
&lt;div class="alert alert-secondary d-flex align-items-center" role="alert">
 &lt;div>
 &lt;img width="100px" src="https://mevislab.github.io/examples/images/youtube.svg" />&amp;nbsp;&amp;nbsp;&lt;a href="https://www.youtube.com/watch?v=WaD6zuvVNek" target="_blank">&lt;img width="100px" src="https://img.youtube.com/vi/WaD6zuvVNek/0.jpg" />&lt;/a>&amp;nbsp;&amp;nbsp;&amp;nbsp;This example is also available on &lt;a href="https://www.youtube.com/watch?v=WaD6zuvVNek" target="_blank">YouTube&lt;/a>.
 &lt;/div>
&lt;/div>
&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;p>In the previous example you learned how to use the module &lt;code>SoView2DOverlay&lt;/code> together with a &lt;code>View2D&lt;/code>. MeVisLab provides a whole family of &lt;code>SoView2D*&lt;/code> modules (&lt;code>SoView2DOverlay&lt;/code>, &lt;code>SoView2DRectangle&lt;/code>, &lt;code>SoView2DGrid&lt;/code>, &amp;hellip;). All these modules create or interact with scene objects and are based on the module &lt;code>SoView2D&lt;/code>, which can convert a voxel-image into a scene object. In this example, you will get to know some members of the &lt;code>SoView2D&lt;/code>-family.&lt;/p></description></item><item><title>Example 5: Volume rendering and interactions</title><link>https://mevislab.github.io/examples/tutorials/visualization/visualizationexample5/</link><pubDate>Wed, 15 Jun 2022 08:56:33 +0200</pubDate><guid>https://mevislab.github.io/examples/tutorials/visualization/visualizationexample5/</guid><description>&lt;h1 id="TutorialVisualizationExample6">Example 5: Volume rendering and interactions&lt;/h1>
&lt;div class="alert alert-secondary d-flex align-items-center" role="alert">
 &lt;div>
 &lt;img width="100px" src="https://mevislab.github.io/examples/images/youtube.svg" />&amp;nbsp;&amp;nbsp;&lt;a href="https://www.youtube.com/watch?v=QViPqXs2LHc" target="_blank">&lt;img width="100px" src="https://img.youtube.com/vi/QViPqXs2LHc/0.jpg" />&lt;/a>&amp;nbsp;&amp;nbsp;&amp;nbsp;This example is also available on &lt;a href="https://www.youtube.com/watch?v=QViPqXs2LHc" target="_blank">YouTube&lt;/a>.
 &lt;/div>
&lt;/div>
&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;p>In this example we like to convert a scan of a head into a 3D scene-object. The scene-object allows to add some textures, interactions and animations.&lt;/p>
&lt;h2 id="steps-to-do">Steps to do&lt;/h2>
&lt;h3 id="develop-your-network">Develop your network&lt;/h3>
&lt;p>Implement the following network and open the image &lt;em>$(DemoDataPath)/BrainMultiModal/ProbandT1.tif&lt;/em>.&lt;/p>
&lt;p>&lt;p class="page-image">
 &lt;a data-modal="bs-lightbox" href="https://mevislab.github.io/examples/images/tutorials/visualization/V6_01.png" title="SoGVRVolumeRenderer">&lt;img id="SoGVRVolumeRenderer" class="img-fluid rounded" src="https://mevislab.github.io/examples/images/tutorials/visualization/V6_01.png" alt="SoGVRVolumeRenderer" title="SoGVRVolumeRenderer" />&lt;/a>
 &lt;figcaption class="figure-caption">SoGVRVolumeRenderer&lt;/figcaption>
&lt;/p>
&lt;/p>
&lt;p>The module &lt;code>SoGVRVolumeRenderer&lt;/code> allows volume rendering of 3D and 4D images.&lt;/p></description></item><item><title>Example 6: MeVis Path Tracer</title><link>https://mevislab.github.io/examples/tutorials/visualization/visualizationexample6/</link><pubDate>Thu, 23 Feb 2023 00:00:00 +0000</pubDate><guid>https://mevislab.github.io/examples/tutorials/visualization/visualizationexample6/</guid><description>&lt;h1 id="example-6-mevis-path-tracer">Example 6: MeVis Path Tracer&lt;/h1>
&lt;div class="alert alert-secondary d-flex align-items-center" role="alert">
 &lt;div>
 &lt;img width="100px" src="https://mevislab.github.io/examples/images/youtube.svg" />&amp;nbsp;&amp;nbsp;&lt;a href="https://youtube.com/shorts/U23QH2Pvwew" target="_blank">&lt;img width="100px" src="https://img.youtube.com/vi/U23QH2Pvwew/0.jpg" />&lt;/a>&amp;nbsp;&amp;nbsp;&amp;nbsp;We have a Short video showing the possibilities of the &lt;b>MeVis Path Tracer&lt;/b> on &lt;a href="https://youtube.com/shorts/U23QH2Pvwew" target="_blank">YouTube&lt;/a>.
 &lt;/div>
&lt;/div>
&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;p>The MeVis Path Tracer offers a Monte Carlo Path Tracing framework running on CUDA GPUs. It offers photorealistic rendering of volumes and meshes, physically based lightning with area lights and soft shadows and fully integrates into MeVisLab Open Inventor (camera, depth buffer, clipping planes, etc.).&lt;/p>

&lt;svg xmlns="http://www.w3.org/2000/svg" style="display: none;">
 &lt;symbol id="check-fill" fill="currentColor" viewBox="0 0 16 16">
 &lt;path d="M16 8A8 8 0 1 1 0 8a8 8 0 0 1 16 0zm-3.97-3.03a.75.75 0 0 0-1.08.022L7.477 9.417 5.384 7.323a.75.75 0 0 0-1.06 1.06L6.97 11.03a.75.75 0 0 0 1.079-.02l3.992-4.99a.75.75 0 0 0-.01-1.05z"/>
 &lt;/symbol>
 &lt;symbol id="info-fill" fill="currentColor" viewBox="0 0 16 16">
 &lt;path d="M8 16A8 8 0 1 0 8 0a8 8 0 0 0 0 16zm.93-9.412-1 4.705c-.07.34.029.533.304.533.194 0 .487-.07.686-.246l-.088.416c-.287.346-.92.598-1.465.598-.703 0-1.002-.422-.808-1.319l.738-3.468c.064-.293.006-.399-.287-.47l-.451-.081.082-.381 2.29-.287zM8 5.5a1 1 0 1 1 0-2 1 1 0 0 1 0 2z"/>
 &lt;/symbol>
 &lt;symbol id="warning-fill" fill="currentColor" viewBox="0 0 16 16">
 &lt;path d="M8.982 1.566a1.13 1.13 0 0 0-1.96 0L.165 13.233c-.457.778.091 1.767.98 1.767h13.713c.889 0 1.438-.99.98-1.767L8.982 1.566zM8 5c.535 0 .954.462.9.995l-.35 3.507a.552.552 0 0 1-1.1 0L7.1 5.995A.905.905 0 0 1 8 5zm.002 6a1 1 0 1 1 0 2 1 1 0 0 1 0-2z"/>
 &lt;/symbol>
 &lt;symbol id="danger-fill" fill="currentColor" viewBox="0 0 16 16">
 &lt;path d="M8.982 1.566a1.13 1.13 0 0 0-1.96 0L.165 13.233c-.457.778.091 1.767.98 1.767h13.713c.889 0 1.438-.99.98-1.767L8.982 1.566zM8 5c.535 0 .954.462.9.995l-.35 3.507a.552.552 0 0 1-1.1 0L7.1 5.995A.905.905 0 0 1 8 5zm.002 6a1 1 0 1 1 0 2 1 1 0 0 1 0-2z"/>
 &lt;/symbol>
&lt;/svg>

&lt;div class="alert alert-primary alert-info d-flex align-items-center" role="alert">
 &lt;svg class="bi flex-shrink-0 me-2" width="24" height="24" role="img" aria-label="Extra Infos:">&lt;use xlink:href="#info-fill"/>&lt;/svg>
 &lt;div>
 &lt;b>Extra Infos:&amp;nbsp;&lt;/b>
 CUDA is a parallel computing platform and programming model created by NVIDIA. For further information, see &lt;a href="https://blogs.nvidia.com/blog/2012/09/10/what-is-cuda-2/" target="_blank" rel="noopener">NVIDIA website&lt;/a>.
 &lt;/div>
&lt;/div>
&lt;div class="container">
 
 
 &lt;div class="row row-cols-1 row-cols-sm-2 row-cols-md-5">
 &lt;div class="col mt-5">
 &lt;p class="page-image">
 &lt;a data-modal="bs-lightbox" href="https://mevislab.github.io/examples/images/tutorials/visualization/pathtracer/PathTracer1.png" title="PathTracer1">&lt;img src="https://mevislab.github.io/examples/images/tutorials/visualization/pathtracer/PathTracer1.png" class="img-fluid" alt="PathTracer1">&lt;/a>
 &lt;figcaption class="figure-caption">PathTracer1&lt;/figcaption>
 &lt;/p></description></item><item><title>Example 6.1: Volume Rendering vs. Path Tracer</title><link>https://mevislab.github.io/examples/tutorials/visualization/pathtracer/pathtracerexample1/</link><pubDate>Thu, 23 Feb 2023 00:00:00 +0000</pubDate><guid>https://mevislab.github.io/examples/tutorials/visualization/pathtracer/pathtracerexample1/</guid><description>&lt;h1 id="example-61-volume-rendering-vs-path-tracer">Example 6.1: Volume Rendering vs. Path Tracer&lt;/h1>
&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;p>In this example you develop a network to show some differences between volume rendering and the MeVisLab Path Tracer. You will visualize the same scene using both 3D rendering techniques and some of the modules for path tracing.&lt;/p>

&lt;svg xmlns="http://www.w3.org/2000/svg" style="display: none;">
 &lt;symbol id="check-fill" fill="currentColor" viewBox="0 0 16 16">
 &lt;path d="M16 8A8 8 0 1 1 0 8a8 8 0 0 1 16 0zm-3.97-3.03a.75.75 0 0 0-1.08.022L7.477 9.417 5.384 7.323a.75.75 0 0 0-1.06 1.06L6.97 11.03a.75.75 0 0 0 1.079-.02l3.992-4.99a.75.75 0 0 0-.01-1.05z"/>
 &lt;/symbol>
 &lt;symbol id="info-fill" fill="currentColor" viewBox="0 0 16 16">
 &lt;path d="M8 16A8 8 0 1 0 8 0a8 8 0 0 0 0 16zm.93-9.412-1 4.705c-.07.34.029.533.304.533.194 0 .487-.07.686-.246l-.088.416c-.287.346-.92.598-1.465.598-.703 0-1.002-.422-.808-1.319l.738-3.468c.064-.293.006-.399-.287-.47l-.451-.081.082-.381 2.29-.287zM8 5.5a1 1 0 1 1 0-2 1 1 0 0 1 0 2z"/>
 &lt;/symbol>
 &lt;symbol id="warning-fill" fill="currentColor" viewBox="0 0 16 16">
 &lt;path d="M8.982 1.566a1.13 1.13 0 0 0-1.96 0L.165 13.233c-.457.778.091 1.767.98 1.767h13.713c.889 0 1.438-.99.98-1.767L8.982 1.566zM8 5c.535 0 .954.462.9.995l-.35 3.507a.552.552 0 0 1-1.1 0L7.1 5.995A.905.905 0 0 1 8 5zm.002 6a1 1 0 1 1 0 2 1 1 0 0 1 0-2z"/>
 &lt;/symbol>
 &lt;symbol id="danger-fill" fill="currentColor" viewBox="0 0 16 16">
 &lt;path d="M8.982 1.566a1.13 1.13 0 0 0-1.96 0L.165 13.233c-.457.778.091 1.767.98 1.767h13.713c.889 0 1.438-.99.98-1.767L8.982 1.566zM8 5c.535 0 .954.462.9.995l-.35 3.507a.552.552 0 0 1-1.1 0L7.1 5.995A.905.905 0 0 1 8 5zm.002 6a1 1 0 1 1 0 2 1 1 0 0 1 0-2z"/>
 &lt;/symbol>
&lt;/svg>

&lt;div class="alert alert-primary alert-warning d-flex align-items-center" role="alert">
 &lt;svg class="bi flex-shrink-0 me-2" width="24" height="24" role="img" aria-label="Attention:">&lt;use xlink:href="#warning-fill"/>&lt;/svg>
 &lt;div>
 &lt;b>Attention:&amp;nbsp;&lt;/b>
 &lt;p>The MeVis Path Tracer requires an NVIDIA graphics card with CUDA support. In order to check your hardware, open MeVisLab and add a &lt;code>SoPathTracer&lt;/code> module to your workspace. You will see a message if your hardware does not support CUDA:&lt;/p></description></item><item><title>Example 6.2: Visualization using Path Tracer</title><link>https://mevislab.github.io/examples/tutorials/visualization/pathtracer/pathtracerexample2/</link><pubDate>Tue, 02 Jan 2024 00:00:00 +0000</pubDate><guid>https://mevislab.github.io/examples/tutorials/visualization/pathtracer/pathtracerexample2/</guid><description>&lt;h1 id="example-62-visualization-using-sopathtracer">Example 6.2: Visualization using SoPathTracer&lt;/h1>
&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;p>In this tutorial, we will explain the basics of using the &lt;code>SoPathTracer&lt;/code> module in MeVisLab. You will learn how to create a scene, assign materials, add light sources, and configure the PathTracer to generate enhanced renderings.&lt;/p>

&lt;svg xmlns="http://www.w3.org/2000/svg" style="display: none;">
 &lt;symbol id="check-fill" fill="currentColor" viewBox="0 0 16 16">
 &lt;path d="M16 8A8 8 0 1 1 0 8a8 8 0 0 1 16 0zm-3.97-3.03a.75.75 0 0 0-1.08.022L7.477 9.417 5.384 7.323a.75.75 0 0 0-1.06 1.06L6.97 11.03a.75.75 0 0 0 1.079-.02l3.992-4.99a.75.75 0 0 0-.01-1.05z"/>
 &lt;/symbol>
 &lt;symbol id="info-fill" fill="currentColor" viewBox="0 0 16 16">
 &lt;path d="M8 16A8 8 0 1 0 8 0a8 8 0 0 0 0 16zm.93-9.412-1 4.705c-.07.34.029.533.304.533.194 0 .487-.07.686-.246l-.088.416c-.287.346-.92.598-1.465.598-.703 0-1.002-.422-.808-1.319l.738-3.468c.064-.293.006-.399-.287-.47l-.451-.081.082-.381 2.29-.287zM8 5.5a1 1 0 1 1 0-2 1 1 0 0 1 0 2z"/>
 &lt;/symbol>
 &lt;symbol id="warning-fill" fill="currentColor" viewBox="0 0 16 16">
 &lt;path d="M8.982 1.566a1.13 1.13 0 0 0-1.96 0L.165 13.233c-.457.778.091 1.767.98 1.767h13.713c.889 0 1.438-.99.98-1.767L8.982 1.566zM8 5c.535 0 .954.462.9.995l-.35 3.507a.552.552 0 0 1-1.1 0L7.1 5.995A.905.905 0 0 1 8 5zm.002 6a1 1 0 1 1 0 2 1 1 0 0 1 0-2z"/>
 &lt;/symbol>
 &lt;symbol id="danger-fill" fill="currentColor" viewBox="0 0 16 16">
 &lt;path d="M8.982 1.566a1.13 1.13 0 0 0-1.96 0L.165 13.233c-.457.778.091 1.767.98 1.767h13.713c.889 0 1.438-.99.98-1.767L8.982 1.566zM8 5c.535 0 .954.462.9.995l-.35 3.507a.552.552 0 0 1-1.1 0L7.1 5.995A.905.905 0 0 1 8 5zm.002 6a1 1 0 1 1 0 2 1 1 0 0 1 0-2z"/>
 &lt;/symbol>
&lt;/svg>

&lt;div class="alert alert-primary alert-warning d-flex align-items-center" role="alert">
 &lt;svg class="bi flex-shrink-0 me-2" width="24" height="24" role="img" aria-label="Attention:">&lt;use xlink:href="#warning-fill"/>&lt;/svg>
 &lt;div>
 &lt;b>Attention:&amp;nbsp;&lt;/b>
 &lt;p>The MeVis Path Tracer requires an NVIDIA graphics card with CUDA support. In order to check your hardware, open MeVisLab and add a &lt;code>SoPathTracer&lt;/code> module to your workspace. You will see a message if your hardware does not support CUDA:&lt;/p></description></item><item><title>Example 7: Add 3D viewer to OrthoView2D</title><link>https://mevislab.github.io/examples/tutorials/visualization/visualizationexample7/</link><pubDate>Tue, 21 Nov 2023 00:00:00 +0000</pubDate><guid>https://mevislab.github.io/examples/tutorials/visualization/visualizationexample7/</guid><description>&lt;h1 id="TutorialVisualizationExample7">Example 7: Add 3D viewer to OrthoView2D&lt;/h1>
&lt;div class="alert alert-secondary d-flex align-items-center" role="alert">
 &lt;div>
 &lt;img width="100px" src="https://mevislab.github.io/examples/images/youtube.svg" />&amp;nbsp;&amp;nbsp;&lt;a href="https://www.youtube.com/watch?v=vRtFcaPBAko" target="_blank">&lt;img width="100px" src="https://img.youtube.com/vi/vRtFcaPBAko/0.jpg" />&lt;/a>&amp;nbsp;&amp;nbsp;&amp;nbsp;This example is also available on &lt;a href="https://www.youtube.com/watch?v=vRtFcaPBAko" target="_blank">YouTube&lt;/a>.
 &lt;/div>
&lt;/div>
&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;p>In this example we will use the &lt;code>OrthoView2D&lt;/code> module and add a 3D viewer to the layout &lt;em>Cube&lt;/em>.&lt;/p>
&lt;h2 id="steps-to-do">Steps to do&lt;/h2>
&lt;h3 id="develop-your-network">Develop your network&lt;/h3>
&lt;p>Add the modules &lt;code>LocalImage&lt;/code> and &lt;code>OrthoView2D&lt;/code> to your workspace and connect them.&lt;/p>
&lt;p>&lt;p class="page-image">
 &lt;a data-modal="bs-lightbox" href="https://mevislab.github.io/examples/images/tutorials/image_processing/network_example7.png" title="Network">&lt;img id="Network" class="img-fluid rounded" src="https://mevislab.github.io/examples/images/tutorials/image_processing/network_example7.png" alt="Network" title="Network" />&lt;/a>
 &lt;figcaption class="figure-caption">Network&lt;/figcaption>
&lt;/p>
&lt;/p>
&lt;p>The &lt;code>OrthoView2D&lt;/code> module allows you to select multiple layouts. Select layout &lt;em>Cube Equal&lt;/em>. The layout shows your image in three orthogonal viewing directions. The top left segment remains empty.&lt;/p></description></item><item><title>Example 8: Vessel Segmentation using SoVascularSystem</title><link>https://mevislab.github.io/examples/tutorials/visualization/visualizationexample8/</link><pubDate>Fri, 08 Dec 2023 00:00:00 +0000</pubDate><guid>https://mevislab.github.io/examples/tutorials/visualization/visualizationexample8/</guid><description>&lt;h1 id="TutorialVisualizationExample8">Example 8: Vessel Segmentation using SoVascularSystem&lt;/h1>
&lt;div class="alert alert-secondary d-flex align-items-center" role="alert">
 &lt;div>
 &lt;img width="100px" src="https://mevislab.github.io/examples/images/youtube.svg" />&amp;nbsp;&amp;nbsp;&lt;a href="https://www.youtube.com/watch?v=tEwEgI_3ZGM" target="_blank">&lt;img width="100px" src="https://img.youtube.com/vi/tEwEgI_3ZGM/0.jpg" />&lt;/a>&amp;nbsp;&amp;nbsp;&amp;nbsp;This example is also available on &lt;a href="https://www.youtube.com/watch?v=tEwEgI_3ZGM" target="_blank">YouTube&lt;/a>.
 &lt;/div>
&lt;/div>
&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;p>In this tutorial, we are using an input mask to create a vessel centerline using the &lt;code>DtfSkeletonization&lt;/code> module and visualize the vascular structures in 3D using the &lt;code>SoVascularSystem&lt;/code> module. The second part uses the distance between centerline and surface of the vessel structures to color thin vessels red and thick vessels green.&lt;/p>
&lt;h2 id="steps-to-do">Steps to do&lt;/h2>
&lt;h3 id="develop-your-network">Develop your network&lt;/h3>
&lt;p>Load the example &lt;a href="https://mevislab.github.io/examples/visualization/example8/EditedImage.mlimage">tree mask&lt;/a> by using the &lt;code>LocalImage&lt;/code> module. Connect the output to a &lt;code>DtfSkeletonization&lt;/code> module as seen below. The initial output of the &lt;code>DtfSkeletonization&lt;/code> module is empty. Press the &lt;em>Update&lt;/em> button to calculate the skeleton and the erosion distances.&lt;/p></description></item><item><title>Example 9: Creating Dynamic 3D Animations using AnimationRecorder</title><link>https://mevislab.github.io/examples/tutorials/visualization/visualizationexample9/</link><pubDate>Mon, 08 Jan 2024 00:00:00 +0000</pubDate><guid>https://mevislab.github.io/examples/tutorials/visualization/visualizationexample9/</guid><description>&lt;h1 id="TutorialVisualizationExample9">Example 9: Creating Dynamic 3D Animations using AnimationRecorder&lt;/h1>
&lt;div class="alert alert-secondary d-flex align-items-center" role="alert">
 &lt;div>
 &lt;img width="100px" src="https://mevislab.github.io/examples/images/youtube.svg" />&amp;nbsp;&amp;nbsp;&lt;a href="https://www.youtube.com/watch?v=Sxfwwm6BGnA" target="_blank">&lt;img width="100px" src="https://img.youtube.com/vi/Sxfwwm6BGnA/0.jpg" />&lt;/a>&amp;nbsp;&amp;nbsp;&amp;nbsp;This example is also available on &lt;a href="https://www.youtube.com/watch?v=Sxfwwm6BGnA" target="_blank">YouTube&lt;/a>.
 &lt;/div>
&lt;/div>
&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;p>In this tutorial, we are using the &lt;code>AnimationRecorder&lt;/code> module to generate dynamic and visually appealing animations of our 3D scenes. We will be recording a video of the results of our previous project, particularly the detailed visualizations of the muscles, bones and blood vessels created using &lt;code>PathTracer&lt;/code>.&lt;/p>
&lt;h2 id="steps-to-do">Steps to do&lt;/h2>
&lt;p>Open the network and files of &lt;a href="https://mevislab.github.io/examples/tutorials/visualization/pathtracer/pathtracerexample2/">Example 6.2&lt;/a>, add a &lt;code>SoSeparator&lt;/code> module and an &lt;code>AnimationRecorder&lt;/code> module to your workspace and connect them as shown below.&lt;/p></description></item><item><title>Matplotlib</title><link>https://mevislab.github.io/examples/tutorials/thirdparty/matplotlib/</link><pubDate>Thu, 25 May 2023 00:00:00 +0000</pubDate><guid>https://mevislab.github.io/examples/tutorials/thirdparty/matplotlib/</guid><description>&lt;h1 id="matplotlib">Matplotlib&lt;/h1>
&lt;p>Matplotlib, introduced by John Hunter in 2002 and initially released in 2003, is a comprehensive data visualization library in Python. It is widely used among the scientific world as it is easy to grasp for beginners and provides high quality plots and images, that are widely customizable.&lt;/p>

&lt;svg xmlns="http://www.w3.org/2000/svg" style="display: none;">
 &lt;symbol id="check-fill" fill="currentColor" viewBox="0 0 16 16">
 &lt;path d="M16 8A8 8 0 1 1 0 8a8 8 0 0 1 16 0zm-3.97-3.03a.75.75 0 0 0-1.08.022L7.477 9.417 5.384 7.323a.75.75 0 0 0-1.06 1.06L6.97 11.03a.75.75 0 0 0 1.079-.02l3.992-4.99a.75.75 0 0 0-.01-1.05z"/>
 &lt;/symbol>
 &lt;symbol id="info-fill" fill="currentColor" viewBox="0 0 16 16">
 &lt;path d="M8 16A8 8 0 1 0 8 0a8 8 0 0 0 0 16zm.93-9.412-1 4.705c-.07.34.029.533.304.533.194 0 .487-.07.686-.246l-.088.416c-.287.346-.92.598-1.465.598-.703 0-1.002-.422-.808-1.319l.738-3.468c.064-.293.006-.399-.287-.47l-.451-.081.082-.381 2.29-.287zM8 5.5a1 1 0 1 1 0-2 1 1 0 0 1 0 2z"/>
 &lt;/symbol>
 &lt;symbol id="warning-fill" fill="currentColor" viewBox="0 0 16 16">
 &lt;path d="M8.982 1.566a1.13 1.13 0 0 0-1.96 0L.165 13.233c-.457.778.091 1.767.98 1.767h13.713c.889 0 1.438-.99.98-1.767L8.982 1.566zM8 5c.535 0 .954.462.9.995l-.35 3.507a.552.552 0 0 1-1.1 0L7.1 5.995A.905.905 0 0 1 8 5zm.002 6a1 1 0 1 1 0 2 1 1 0 0 1 0-2z"/>
 &lt;/symbol>
 &lt;symbol id="danger-fill" fill="currentColor" viewBox="0 0 16 16">
 &lt;path d="M8.982 1.566a1.13 1.13 0 0 0-1.96 0L.165 13.233c-.457.778.091 1.767.98 1.767h13.713c.889 0 1.438-.99.98-1.767L8.982 1.566zM8 5c.535 0 .954.462.9.995l-.35 3.507a.552.552 0 0 1-1.1 0L7.1 5.995A.905.905 0 0 1 8 5zm.002 6a1 1 0 1 1 0 2 1 1 0 0 1 0-2z"/>
 &lt;/symbol>
&lt;/svg>

&lt;div class="alert alert-primary alert-info d-flex align-items-center" role="alert">
 &lt;svg class="bi flex-shrink-0 me-2" width="24" height="24" role="img" aria-label="Info:">&lt;use xlink:href="#info-fill"/>&lt;/svg>
 &lt;div>
 &lt;b>Info:&amp;nbsp;&lt;/b>
 The documentation on Matplotlib along with general examples, cheat sheets and a starting guide can be found &lt;a href="https://matplotlib.org/" target="_blank" rel="noopener">here&lt;/a>.
 &lt;/div>
&lt;/div>
&lt;p>As MeVisLab supports the integration of Python scripts e. g. for test automation, Matplotlib can be used to visualize any data you might want to see. And as it is directly integrated into MeVisLab, you don&amp;rsquo;t have to install it (via &lt;code>PythonPip&lt;/code> module) first.&lt;/p></description></item><item><title>Example 1: Module Setup</title><link>https://mevislab.github.io/examples/tutorials/thirdparty/matplotlib/modulesetup/</link><pubDate>Fri, 26 May 2023 00:00:00 +0000</pubDate><guid>https://mevislab.github.io/examples/tutorials/thirdparty/matplotlib/modulesetup/</guid><description>&lt;h1 id="example-1-module-setup">Example 1: Module Setup&lt;/h1>
&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;p>To be able to access the data needed for our grayscale distribution plots, we need a network consisting of a module that imports DICOM data, a module that differentiates between slices and another that ouputs histogram data.&lt;/p>
&lt;h2 id="steps-to-do">Steps to do&lt;/h2>
&lt;p>Open up your MeVisLab workspace and add the modules &lt;code>LocalImage&lt;/code>, &lt;code>SubImage&lt;/code> and &lt;code>Histogram&lt;/code> to it.
Connect the output of &lt;code>LocalImage&lt;/code> to the input of &lt;code>SubImage&lt;/code> and the output of &lt;code>SubImage&lt;/code> with the input of &lt;code>Histogram&lt;/code>.
If you feel like using a shortcut, you can also download the base network below and open it in your MeVisLab.&lt;/p></description></item><item><title>Example 2: 2D Plotting</title><link>https://mevislab.github.io/examples/tutorials/thirdparty/matplotlib/2dplotting/</link><pubDate>Tue, 30 May 2023 00:00:00 +0000</pubDate><guid>https://mevislab.github.io/examples/tutorials/thirdparty/matplotlib/2dplotting/</guid><description>&lt;h1 id="example-2-2d-plotting">Example 2: 2D Plotting&lt;/h1>
&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;p>In this tutorial, we will equip the macro module we created in the &lt;a href="https://mevislab.github.io/examples/tutorials/thirdparty/matplotlib/modulesetup">previous tutorial&lt;/a> with a responsive and interactable panel to plot grayscale distributions of single slices as well as defined sequences of slices in 2D.&lt;/p>
&lt;h2 id="steps-to-do">Steps to do&lt;/h2>
&lt;p>Open the module definition folder of your macro module and the related .script file in MATE. Then activate the Preview as shown below:&lt;/p>
&lt;p>&lt;p class="page-image">
 &lt;a data-modal="bs-lightbox" href="https://mevislab.github.io/examples/images/tutorials/thirdparty/Matplotlib7.png" title="">&lt;img id="" class="img-fluid rounded" src="https://mevislab.github.io/examples/images/tutorials/thirdparty/Matplotlib7.png" alt="MATE Preview" />&lt;/a>
 &lt;figcaption class="figure-caption">&lt;/figcaption>
&lt;/p></description></item><item><title>Example 3: Slice Comparison</title><link>https://mevislab.github.io/examples/tutorials/thirdparty/matplotlib/slicecomparison/</link><pubDate>Wed, 31 May 2023 00:00:00 +0000</pubDate><guid>https://mevislab.github.io/examples/tutorials/thirdparty/matplotlib/slicecomparison/</guid><description>&lt;h1 id="example-3-slice-comparison">Example 3: Slice Comparison&lt;/h1>
&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;p>We will adapt the previously created macro module to be able to overlay two defined slices to compare their grayscale distributions.&lt;/p>
&lt;ul>
&lt;li>The module we are adapting has been set up in the &lt;a href="https://mevislab.github.io/examples/tutorials/thirdparty/matplotlib/modulesetup">Example 1: Module Setup&lt;/a> tutorial.&lt;/li>
&lt;li>The panel and two-dimensional plotting functionality has been added in [Example 2: 2D Plotting]
(/tutorials/thirdparty/matplotlib/2dplotting).&lt;/li>
&lt;/ul>
&lt;h2 id="steps-to-do">Steps to do&lt;/h2>
&lt;p>At first, we will extend the panel: Open your &lt;code>BaseNetwork&lt;/code> macro module within an empty MeVisLab workspace and select the .script file from its related files.&lt;/p></description></item><item><title>Example 4: 3D Plotting</title><link>https://mevislab.github.io/examples/tutorials/thirdparty/matplotlib/3dplotting/</link><pubDate>Wed, 31 May 2023 00:00:00 +0000</pubDate><guid>https://mevislab.github.io/examples/tutorials/thirdparty/matplotlib/3dplotting/</guid><description>&lt;h1 id="example-4-3d-plotting">Example 4: 3D Plotting&lt;/h1>
&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;p>In this tutorial, we will equip the macro module we created in the &lt;a href="https://mevislab.github.io/examples/tutorials/thirdparty/matplotlib/modulesetup">Example 1: Module Setup&lt;/a> and later on adapted by enabling it to plot grayscale distributions of single slices and sequences in 2D in &lt;a href="https://mevislab.github.io/examples/tutorials/thirdparty/matplotlib/2dplotting">Example 2: 2D Plotting&lt;/a> with a three dimensional plotting functionality.&lt;/p>
&lt;h2 id="steps-to-do">Steps to do&lt;/h2>
&lt;p>The fields and commands needed have already been prepared in the second tutorial. We will just have to modify our .py file a little to make them usable. Integrate the following code into your .py file and import numpy.&lt;/p></description></item></channel></rss>