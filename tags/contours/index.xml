<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Contours on MeVisLab Examples</title><link>https://mevislab.github.io/examples/tags/contours/</link><description>Recent content in Contours on MeVisLab Examples</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Wed, 15 Jun 2022 08:56:33 +0200</lastBuildDate><atom:link href="https://mevislab.github.io/examples/tags/contours/index.xml" rel="self" type="application/rss+xml"/><item><title>Chapter V: Data Objects</title><link>https://mevislab.github.io/examples/tutorials/dataobjects/</link><pubDate>Wed, 15 Jun 2022 08:56:33 +0200</pubDate><guid>https://mevislab.github.io/examples/tutorials/dataobjects/</guid><description>MeVisLab Tutorial Chapter V Data Objects in MeVisLab MeVisLab provides a lot of pre-defined data objects for usage such as Contours, Surface Objects (WEMs) and Markers.
Differences between these types are explained in the following chapters and example networks are built to learn how to use them.</description></item><item><title>Contour Example 1: Creation of Contours</title><link>https://mevislab.github.io/examples/tutorials/dataobjects/contours/contourexample1/</link><pubDate>Wed, 15 Jun 2022 08:56:33 +0200</pubDate><guid>https://mevislab.github.io/examples/tutorials/dataobjects/contours/contourexample1/</guid><description>Contour Example 1: Creation of Contours Introduction We like to start with the creation of CSOs. To create CSOs, you need a SoCSO*-Editor. There are several different editors, which can be used to create CSOs (see here). Some of them are introduced in this example.
Steps to do Develop your network For this example, we need the following modules. Add the modules to your workspace, connect them as shown below and load the example image $(DemoDataPath)/BrainMultiModal/ProbandT1.</description></item><item><title>Contour Example 2: Contour Interpolation</title><link>https://mevislab.github.io/examples/tutorials/dataobjects/contours/contourexample2/</link><pubDate>Wed, 15 Jun 2022 08:56:33 +0200</pubDate><guid>https://mevislab.github.io/examples/tutorials/dataobjects/contours/contourexample2/</guid><description>Contour Example 2: Creating Contours using Live Wire and Interpolation Introduction In this example, we like to create CSOs using the Live Wire Algorithm, which allows semi-automatic CSO creation. The algorithm uses edge detection to support the user creating CSOs.
We also like to interpolate CSOs over slices. That means additional CSOs are generated between manual segmentations based on a linear interpolation.
As a last step, we will group together CSOs of the same anatomical unit.</description></item><item><title>Contour Example 3: 2D and 3D Visualization of Contours</title><link>https://mevislab.github.io/examples/tutorials/dataobjects/contours/contourexample3/</link><pubDate>Wed, 15 Jun 2022 08:56:33 +0200</pubDate><guid>https://mevislab.github.io/examples/tutorials/dataobjects/contours/contourexample3/</guid><description>Contour Example 3: Overlay Creation and 3D Visualization of Contours Introduction In this example, we like to use the created CSOs to display an overlay. This allows us to mark one of two lungs. In addition to that, we will display the whole segmented lobe of the lung in a 3D image.
Steps to do Develop your network Use the network from the contour example 2 and add the modules VoxelizeCSO, SoView2DOverlay and View2D to your workspace.</description></item><item><title>Contour Example 4: Annotation of Images</title><link>https://mevislab.github.io/examples/tutorials/dataobjects/contours/contourexample4/</link><pubDate>Wed, 15 Jun 2022 08:56:33 +0200</pubDate><guid>https://mevislab.github.io/examples/tutorials/dataobjects/contours/contourexample4/</guid><description>Contour Example 4: Annotation of Images Introduction In this example we like to calculate the volume of our object, in this case the part of the lunge we have segmented.
Steps to do Develop your network and calculate the lunge volume Add the module CalculateVolume and SoView2DAnnotation to your workspace and connect both modules as shown. Update the module CalculateVolume, which directly shows the volume of our object.
Data Objects Contours Example 4 Display the lung volume in the image We now like to display the volume in the image viewer.</description></item><item><title>Contour Example 5: Contours and Ghosting</title><link>https://mevislab.github.io/examples/tutorials/dataobjects/contours/contourexample5/</link><pubDate>Wed, 15 Jun 2022 08:56:33 +0200</pubDate><guid>https://mevislab.github.io/examples/tutorials/dataobjects/contours/contourexample5/</guid><description>Contour Example 5: Visualizing Contours and Images Introduction In this example, we like to automatically create CSOs based on a predefined iso value.
Steps to do Develop your network Add the following modules to your workspace and connect them as shown. Load the example image Bone.tiff.
Automatic creation of CSOs based on the iso value Now, open the panel of CSOIsoGenerator to set the Iso Value to 1200. If you press Update in the panel, you can see the creation of CSOs on every slide, when opening the module View2D.</description></item><item><title>Contour Objects (CSO)</title><link>https://mevislab.github.io/examples/tutorials/dataobjects/contourobjects/</link><pubDate>Wed, 15 Jun 2022 08:56:33 +0200</pubDate><guid>https://mevislab.github.io/examples/tutorials/dataobjects/contourobjects/</guid><description>Contour Segmented Objects (CSOs) in MeVisLab Introduction Structure of CSOs MeVisLab provides modules to create contours in images. 3D objects which encapsulate these contours are called Contour Segmented Objects (CSOs).
In the next image, you can see a rectangular shaped CSO. The pink circles you can see are called Seed Points.
Seed Points define the shape of the CSO. In case of a rectangle, you need four Seed Points forming the corners, to define the whole rectangle.</description></item><item><title>Contour Example 1: Creation of Contours</title><link>https://mevislab.github.io/examples/examples/data_objects/contours/example1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://mevislab.github.io/examples/examples/data_objects/contours/example1/</guid><description>Contour Example 1: Creation of Contours This example shows how to create CSOs using SoCSOEditor modules.
Summary Contours (in MeVisLab CSO&amp;rsquo;s) can be created by many modules, such as:
SoCSOPointEditor SoCSOAngleEditor SoCSOArrowEditor SoCSODistanceLineEditor SoCSODistancePolylineEditor SoCSOEllipseEditor SoCSORectangleEditor SoCSOSplineEditor SoCSOPolygonEditor SoCSOIsoEditor SoCSOLiveWireEditor Whenever creating contours, they are managed and temporarily stored by a CSOManager. In this example, contours are created and colors and styles of these CSOs are customized by using a SoCSOVisualizationSettings module.</description></item><item><title>Contour Example 2: Contour interpolation</title><link>https://mevislab.github.io/examples/examples/data_objects/contours/example2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://mevislab.github.io/examples/examples/data_objects/contours/example2/</guid><description>Contour Example 2: Contour interpolation This example shows how to interpolate CSOs over slices.
Summary In this example, semi-automatic countours are created by using a SoCSOLiveWireEditor. The created contours are managed by a CSOManager. Visualization of the contours is customized by using a SoCSOVisualizationSettings module.
In the end, additional contours between the manual contours are generated by the CSOSliceInterpolator and added to the CSOManager. Different groups of contours are created for left and right lung lobe and colored separately.</description></item><item><title>Contour Example 3: 2D and 3D visualization of contours</title><link>https://mevislab.github.io/examples/examples/data_objects/contours/example3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://mevislab.github.io/examples/examples/data_objects/contours/example3/</guid><description>Contour Example 3: 2D and 3D visualization of contours This example shows how to display CSOs in 2D as an overlay. In addition, the CSOs are displayed in 3D.
Summary Images are loaded by using a LocalImage module and visualized in a 2D viewer. A SoCSOLiveWireEditor is added to draw contours on the images. The CSOSliceInterpolator generates additional contours between the manual CSOs by using a linear interpolation.
The module VoxelizeCSO is used to create a 3-dimensional voxel mask of the contours which can be used as overlay on the images in a View2D.</description></item><item><title>Contour Example 4: Annotation of images</title><link>https://mevislab.github.io/examples/examples/data_objects/contours/example4/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://mevislab.github.io/examples/examples/data_objects/contours/example4/</guid><description>Contour Example 4: Annotation of images This example shows how to add annotations to an image.
Summary In this example, the network of Contour Example 3 is extended so that the volume of the 3D mask generated by the VoxelizeCSO module is calculated. The CalculateVolume module counts the number of voxels in the given mask and returns the correct volume in ml. This volume is used for a custom SoView2DAnnotation displayed in the View2D.</description></item><item><title>Contour Example 5: Contours and ghosting</title><link>https://mevislab.github.io/examples/examples/data_objects/contours/example5/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://mevislab.github.io/examples/examples/data_objects/contours/example5/</guid><description>Contour Example 5: Contours and ghosting This image shows how to automatically create CSOs based on an iso value. In addition the visualization of CSOs of previous and subsequent slices is shown.
Summary In this example, the CSOIsoGenerator is used to generate contours based on a given iso value of the image. Contours are generated in the image where the given iso value is close to the one configured. These contours are stored in a CSOManager and ghosting is activated in the SoCSOVisualizationSettings.</description></item></channel></rss>