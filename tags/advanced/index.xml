<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Advanced on MeVisLab Examples</title><link>https://mevislab.github.io/examples/tags/advanced/</link><description>Recent content in Advanced on MeVisLab Examples</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Wed, 15 Jun 2022 08:58:44 +0200</lastBuildDate><atom:link href="https://mevislab.github.io/examples/tags/advanced/index.xml" rel="self" type="application/rss+xml"/><item><title>Example 2.5.2: Module interactions via Python scripting</title><link>https://mevislab.github.io/examples/tutorials/basicmechanisms/macromodules/scriptingexample2/</link><pubDate>Wed, 15 Jun 2022 08:58:44 +0200</pubDate><guid>https://mevislab.github.io/examples/tutorials/basicmechanisms/macromodules/scriptingexample2/</guid><description>Example 2.5.2: Module interactions via Python scripting &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;This example is also available on YouTube. Introduction In this example, you will learn how to add Python scripting to your User Interface. The network used in Chapter V will be used for creating the Macro Module.
Steps to do Creating the macro module First, we condense the example network into a macro module and then we create a panel for that module. To create a macro module use the Project Wizard, which you find under [ File &amp;rarr; Run Project Wizard ].</description></item><item><title>Example 3: Creating a simple application</title><link>https://mevislab.github.io/examples/tutorials/basicmechanisms/macromodules/viewerexample/</link><pubDate>Wed, 15 Jun 2022 08:58:44 +0200</pubDate><guid>https://mevislab.github.io/examples/tutorials/basicmechanisms/macromodules/viewerexample/</guid><description>Example 3: Creating a simple application Introduction In the previous examples, you already learned how to create Macro Modules, user interfaces and how to interact with your UI via Python scripting.
In this example, you will learn how to create a simple Prototype application in MeVisLab including a User Interface with 2D and 3D viewer. You will learn how to implement field listeners and react on events.
Steps to do Create your network Start with an empty network and add the Module ImageLoad to your workspace.</description></item><item><title>Chapter VII: Application Development</title><link>https://mevislab.github.io/examples/tutorials/summary/</link><pubDate>Wed, 15 Jun 2022 08:56:33 +0200</pubDate><guid>https://mevislab.github.io/examples/tutorials/summary/</guid><description>MeVisLab Tutorial Chapter VII Summary This chapter will summarize all previous chapters and you will develop a whole application in MeVisLab. The complete workflow from developing a prototype to delivering your final application to your customer is explained step-by-step.
Prototype to Product Licensing:&amp;nbsp; Some of the features described here will require a separate license. Building an installable executable requires the MeVisLab ApplicationBuilder license. It extends the MeVisLab SDK so that you can generate an installer of your developed Macro Module.</description></item><item><title>Chapter VIII: ThirdParty components</title><link>https://mevislab.github.io/examples/tutorials/thirdparty/</link><pubDate>Wed, 15 Jun 2022 08:56:33 +0200</pubDate><guid>https://mevislab.github.io/examples/tutorials/thirdparty/</guid><description>MeVisLab Tutorial Chapter VIII Using ThirdParty software integrated into MeVisLab MeVisLab comes with a lot of software already integrated and ready to use. Even if these tools are not available as a module, like itk and vtk for example, they can be used via Python scripting. This chapter shall give some examples of how to use a selection of integrated ThirdParty components.
OpenCV OpenCV (Open Source Computer Vision Library) is an open source computer vision and machine learning software library.</description></item><item><title>Example 1: Prototyping - Develop your Network</title><link>https://mevislab.github.io/examples/tutorials/summary/summary1/</link><pubDate>Wed, 15 Jun 2022 08:56:33 +0200</pubDate><guid>https://mevislab.github.io/examples/tutorials/summary/summary1/</guid><description>Example 1: Prototyping - Develop your Network Introduction In this example, we will develop a network which fulfills the requirements from the overview page. The network will be developed by re-using existing modules and defining basic field values.
Steps to do 2D viewer The 2D viewer shall visualize the loaded images. In addition to that, it shall be possible to click into the image for starting a RegionGrowing algorithm segmenting parts of the loaded image based on a threshold.</description></item><item><title>Example 1: WebCam access with OpenCV</title><link>https://mevislab.github.io/examples/tutorials/thirdparty/opencv/thirdpartyexample1/</link><pubDate>Wed, 15 Jun 2022 08:56:33 +0200</pubDate><guid>https://mevislab.github.io/examples/tutorials/thirdparty/opencv/thirdpartyexample1/</guid><description>Example 1: WebCam access with OpenCV Introduction In this example, we are using the PythonImage module and access your WebCam to show the video in a View2D.
Steps to do Creating the network to be used for testing Add the modules to your workspace and connect them as seen below.
Example Network The viewer is empty because the image needs to be set via Python scripting.
Info:&amp;nbsp; More information about the PythonImage module can be found here Create a Macro Module Now you need to create a Macro Module from your network.</description></item><item><title>Example 2: Face Detection with OpenCV</title><link>https://mevislab.github.io/examples/tutorials/thirdparty/opencv/thirdpartyexample2/</link><pubDate>Wed, 15 Jun 2022 08:56:33 +0200</pubDate><guid>https://mevislab.github.io/examples/tutorials/thirdparty/opencv/thirdpartyexample2/</guid><description>Example 2: Face Detection with OpenCV Introduction This example uses the OpenCV WebCam Python script and adds a basic face detection.
Info:&amp;nbsp; The Python code used in this example has been taken from Towards Data Science. Steps to do Open Example 1 Add the Macro Module developed in Example 1 to your workspace.
Download trained classifier XML file Initially you need to download the trained classifier XML file. It is available in the OpenCV GitHub repository.</description></item><item><title>Example 2: Prototyping - Create a Macro Module</title><link>https://mevislab.github.io/examples/tutorials/summary/summary2/</link><pubDate>Wed, 15 Jun 2022 08:56:33 +0200</pubDate><guid>https://mevislab.github.io/examples/tutorials/summary/summary2/</guid><description>Example 2: Prototyping - Create a Macro Module Introduction In this example, we encapsulate the previously developed prototype network into a Macro Module for future application development and automated testing.
Steps to do Make sure to have your *.mlab file from previous Example 1 available.
Package creation Packages are described in detail in Example 2.1: Package creation. If you already have your own package, you can skip this part and continue creating a Macro Module.</description></item><item><title>Example 3: Iterative tests in MeVisLab with Screenshots</title><link>https://mevislab.github.io/examples/tutorials/testing/testingexample3/</link><pubDate>Wed, 15 Jun 2022 08:56:33 +0200</pubDate><guid>https://mevislab.github.io/examples/tutorials/testing/testingexample3/</guid><description>Example 3: Iterative tests in MeVisLab &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;This example is also available on YouTube. Introduction In this example, you are writing an iterative test. Iterative test functions run a function for every specified input. They return a tuple consisting of the function object called and the inputs iterated over. The iterative test functions are useful if the same function should be applied to different input data. These could be input values, names of input images, etc.</description></item><item><title>Example 3: Prototyping - User Interface and Python scripting</title><link>https://mevislab.github.io/examples/tutorials/summary/summary3/</link><pubDate>Wed, 15 Jun 2022 08:56:33 +0200</pubDate><guid>https://mevislab.github.io/examples/tutorials/summary/summary3/</guid><description>Example 3: Prototyping - User Interface and Python scripting Introduction In this example, we will develop a user interface and add Python scripting to the Macro Module you created in Example 2.
Steps to do Develop the User Interface A mockup of the user interface you are going to develop is available here. The interface provides the possibility to load files and shows a 2D and a 3D viewer. In addition to that, some settings and information for our final application are available.</description></item><item><title>Example 4: Review - Automated Tests</title><link>https://mevislab.github.io/examples/tutorials/summary/summary4/</link><pubDate>Wed, 15 Jun 2022 08:56:33 +0200</pubDate><guid>https://mevislab.github.io/examples/tutorials/summary/summary4/</guid><description>Example 4: Review - Automated Tests Introduction In the previous chapters you developed a Macro Module with User Interface and Python scripting. In this example you will see how to implement an automated test to verify and validate the Requirements defined in Overview.
Steps to do Create a test network using your Macro Module Create a new and empty network and save it as *.mlab file. Remember the location.
Use Module Search and add your Macro Module developed in previous examples to your Workspace.</description></item><item><title>Example 4: Subtract 3D objects</title><link>https://mevislab.github.io/examples/tutorials/image_processing/image_processing4/</link><pubDate>Wed, 15 Jun 2022 08:56:33 +0200</pubDate><guid>https://mevislab.github.io/examples/tutorials/image_processing/image_processing4/</guid><description>Example 4: Subtract 3D objects Introduction In this example, we load an image and render it as WEMIsoSurface. Then we create a 3-dimensional SoSphere and subtract the sphere from the initial WEM.
Steps to do Develop your network Add a LocalImage module to your workspace and select load $(DemoDataPath)/BrainMultiModal/ProbandT1.dcm. Add a WEMIsoSurface, a SoWEMRenderer, a SoBackground and a SoExaminerViewer module and connect them as seen below. Make sure to configure the WEMIsoSurface to use a Iso Min.</description></item><item><title>Example 5: Clip Planes</title><link>https://mevislab.github.io/examples/tutorials/image_processing/image_processing5/</link><pubDate>Wed, 15 Jun 2022 08:56:33 +0200</pubDate><guid>https://mevislab.github.io/examples/tutorials/image_processing/image_processing5/</guid><description>Example 4: Subtract 3D objects Introduction In this example, we are using the SoGVRDrawOnPlane module to define the currently visible slice from a 2D view as a clip plane in 3D.
Steps to do Develop your network First we need to develop the network to scroll through the slices. Add a LocalImage module to your workspace and select the file ProbandT1 from MeVisLab demo data.
Add the modules OrthoReformat3, Switch, SoView2D, View2DExtensions and SoRenderArea and connect them as seen below.</description></item><item><title>Example 5: Review - Installer creation</title><link>https://mevislab.github.io/examples/tutorials/summary/summary5/</link><pubDate>Wed, 15 Jun 2022 08:56:33 +0200</pubDate><guid>https://mevislab.github.io/examples/tutorials/summary/summary5/</guid><description>Example 5: Review - Installer creation Introduction Your Macro Module has been tested manually and/or automatically? Then you should create your first installable executable and deliver it to your customer(s) for final evaluation.
Licensing:&amp;nbsp; This example requires a valid MeVisLab ApplicationBuilder license. It extends the MeVisLab SDK so that you can generate an installer of your developed Macro Module. Free evaluation licenses of the MeVisLab ApplicationBuilder, time-limited to 3 months, can be requested at sales(at)mevislab.</description></item><item><title>Example 6: Refine - Update Application</title><link>https://mevislab.github.io/examples/tutorials/summary/summary6/</link><pubDate>Wed, 15 Jun 2022 08:56:33 +0200</pubDate><guid>https://mevislab.github.io/examples/tutorials/summary/summary6/</guid><description>Example 6: Refine - Update Application Introduction In previous examples you developed an application which can be installed on your customers systems for usage. In this example we are going to integrate simple feedback into our executable and re-create the installer.
We want to show you how easy it is to update your application using MeVisLab.
Your customer requests an additional requirement to define the transparency of your 2D overlay in addition to defining the color.</description></item><item><title>Example 7: Refine - Re-Build Installer</title><link>https://mevislab.github.io/examples/tutorials/summary/summary7/</link><pubDate>Wed, 15 Jun 2022 08:56:33 +0200</pubDate><guid>https://mevislab.github.io/examples/tutorials/summary/summary7/</guid><description>Example 7: Refine - Re-Build Installer Introduction In this example you are re-creating your application installer after changing the UI in previous Example 6: Refine - Update Application.
Steps to do Update the *.mlinstall file You do not need to use the Project Wizard now, because you already have a valid *.mlinstall file. The location should be in your package, under .\Configuration\Installers\TutorialSummary. Open the file in any text editor and search for the $VERSION 0.</description></item><item><title>OpenCV</title><link>https://mevislab.github.io/examples/tutorials/thirdparty/opencv/</link><pubDate>Wed, 15 Jun 2022 08:56:33 +0200</pubDate><guid>https://mevislab.github.io/examples/tutorials/thirdparty/opencv/</guid><description>Open Source Computer Vision Library (OpenCV) Introduction OpenCV (Open Source Computer Vision Library) is an open source computer vision and machine learning software library.
This chapter provides some examples how to use OpenCV in MeVisLab.
Other resources You can find a lot of OpenCV examples and tutorials on their website.</description></item><item><title>Surface Example 5: WEM - Primitive Value Lists</title><link>https://mevislab.github.io/examples/tutorials/dataobjects/surfaces/surfaceexample5/</link><pubDate>Wed, 15 Jun 2022 08:56:33 +0200</pubDate><guid>https://mevislab.github.io/examples/tutorials/dataobjects/surfaces/surfaceexample5/</guid><description>Surface Example 5: WEM - Primitive Value Lists Introduction WEMs do not only contain the coordinates of nodes and surfaces, they can also contain additional information. These information are stored in so called Primitive Value Lists (PVLs). Every node, every surface and every edge can contains such a list. In these lists, you can for example store the color of the node or specific patient information. These information can be used for visualization or for further statistical analysis.</description></item></channel></rss>