<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Prototyping on MeVisLab Examples</title><link>https://mevislab.github.io/examples/tags/prototyping/</link><description>Recent content in Prototyping on MeVisLab Examples</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Wed, 15 Jun 2022 08:56:33 +0200</lastBuildDate><atom:link href="https://mevislab.github.io/examples/tags/prototyping/index.xml" rel="self" type="application/rss+xml"/><item><title>Example 1: Prototyping - Develop your Network</title><link>https://mevislab.github.io/examples/tutorials/summary/summary1/</link><pubDate>Wed, 15 Jun 2022 08:56:33 +0200</pubDate><guid>https://mevislab.github.io/examples/tutorials/summary/summary1/</guid><description>Example 1: Prototyping - Develop your Network Introduction In this example, we will develop a network which fulfills the requirements from the overview page. The network will be developed by re-using existing modules and defining basic field values.
Steps to do 2D viewer The 2D viewer shall visualize the loaded images. In addition to that, it shall be possible to click into the image for starting a RegionGrowing algorithm segmenting parts of the loaded image based on a threshold.</description></item><item><title>Example 2: Prototyping - Create a Macro Module</title><link>https://mevislab.github.io/examples/tutorials/summary/summary2/</link><pubDate>Wed, 15 Jun 2022 08:56:33 +0200</pubDate><guid>https://mevislab.github.io/examples/tutorials/summary/summary2/</guid><description>Example 2: Prototyping - Create a Macro Module Introduction In this example, we encapsulate the previously developed prototype network into a Macro Module for future application development and automated testing.
Steps to do Make sure to have your *.mlab file from previous Example 1 available.
Package creation Packages are described in detail in Example 2.1: Package creation. If you already have your own package, you can skip this part and continue creating a Macro Module.</description></item><item><title>Example 3: Prototyping - User Interface and Python scripting</title><link>https://mevislab.github.io/examples/tutorials/summary/summary3/</link><pubDate>Wed, 15 Jun 2022 08:56:33 +0200</pubDate><guid>https://mevislab.github.io/examples/tutorials/summary/summary3/</guid><description>Example 3: Prototyping - User Interface and Python scripting Introduction In this example, we will develop a user interface and add Python scripting to the Macro Module you created in Example 2.
Steps to do Develop the User Interface A mockup of the user interface you are going to develop is available here. The interface provides the possibility to load files and shows a 2D and a 3D viewer. In addition to that, some settings and information for our final application are available.</description></item><item><title>Example 4: Review - Automated Tests</title><link>https://mevislab.github.io/examples/tutorials/summary/summary4/</link><pubDate>Wed, 15 Jun 2022 08:56:33 +0200</pubDate><guid>https://mevislab.github.io/examples/tutorials/summary/summary4/</guid><description>Example 4: Review - Automated Tests Introduction In the previous chapters you developed a Macro Module with User Interface and Python scripting. In this example you will see how to implement an automated test to verify and validate the Requirements defined in Overview.
Steps to do Create a test network using your Macro Module Create a new and empty network and save it as *.mlab file. Remember the location.
Use Module Search and add your Macro Module developed in previous examples to your Workspace.</description></item><item><title>Example 5: Review - Installer creation</title><link>https://mevislab.github.io/examples/tutorials/summary/summary5/</link><pubDate>Wed, 15 Jun 2022 08:56:33 +0200</pubDate><guid>https://mevislab.github.io/examples/tutorials/summary/summary5/</guid><description>Example 5: Review - Installer creation Introduction Your Macro Module has been tested manually and/or automatically? Then you should create your first installable executable and deliver it to your customer(s) for final evaluation.
Licensing:&amp;nbsp; This example requires a valid MeVisLab ApplicationBuilder license. It extends the MeVisLab SDK so that you can generate an installer of your developed Macro Module. Free evaluation licenses of the MeVisLab ApplicationBuilder, time-limited to 3 months, can be requested at sales(at)mevislab.</description></item><item><title>Example 6: Refine - Update Application</title><link>https://mevislab.github.io/examples/tutorials/summary/summary6/</link><pubDate>Wed, 15 Jun 2022 08:56:33 +0200</pubDate><guid>https://mevislab.github.io/examples/tutorials/summary/summary6/</guid><description>Example 6: Refine - Update Application Introduction In previous examples you developed an application which can be installed on your customers systems for usage. In this example we are going to integrate simple feedback into our executable and re-create the installer.
We want to show you how easy it is to update your application using MeVisLab.
Your customer requests an additional requirement to define the transparency of your 2D overlay in addition to defining the color.</description></item><item><title>Example 7: Refine - Re-Build Installer</title><link>https://mevislab.github.io/examples/tutorials/summary/summary7/</link><pubDate>Wed, 15 Jun 2022 08:56:33 +0200</pubDate><guid>https://mevislab.github.io/examples/tutorials/summary/summary7/</guid><description>Example 7: Refine - Re-Build Installer Introduction In this example you are re-creating your application installer after changing the UI in previous Example 6: Refine - Update Application.
Steps to do Update the *.mlinstall file You do not need to use the Project Wizard now, because you already have a valid *.mlinstall file. The location should be in your package, under .\Configuration\Installers\TutorialSummary. Open the file in any text editor and search for the $VERSION 0.</description></item></channel></rss>