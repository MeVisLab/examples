<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>2D on MeVisLab Examples</title><link>https://mevislab.github.io/examples/tags/2d/</link><description>Recent content in 2D on MeVisLab Examples</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Wed, 15 Jun 2022 08:56:33 +0200</lastBuildDate><atom:link href="https://mevislab.github.io/examples/tags/2d/index.xml" rel="self" type="application/rss+xml"/><item><title>Chapter III: Visualization</title><link>https://mevislab.github.io/examples/tutorials/visualization/</link><pubDate>Wed, 15 Jun 2022 08:56:33 +0200</pubDate><guid>https://mevislab.github.io/examples/tutorials/visualization/</guid><description>Visualization in MeVisLab Introduction MeVisLab contains a whole toolkit to visualize data and images. 2D, 3D and 4D rendering is possible as well as the interaction with images and data objects.
In this chapter, we focus on 2D and 3D visualization and simple image interactions. Not only pixel- and voxel-based data can be visualized, but also scene objects and 3D scenes (see here).
View2D and View3D An easy way to display data and images in 2D and 3D is by using the Modules View2D and View3D.</description></item><item><title>Chapter V: Data Objects</title><link>https://mevislab.github.io/examples/tutorials/dataobjects/</link><pubDate>Wed, 15 Jun 2022 08:56:33 +0200</pubDate><guid>https://mevislab.github.io/examples/tutorials/dataobjects/</guid><description>MeVisLab Tutorial Chapter V Data Objects in MeVisLab MeVisLab provides a lot of pre-defined data objects for usage such as Contours, Surface Objects (WEMs) and Markers.
Differences between these types are explained in the following chapters and example networks are built to learn how to use them.</description></item><item><title>Contour Example 1: Creation of Contours</title><link>https://mevislab.github.io/examples/tutorials/dataobjects/contours/contourexample1/</link><pubDate>Wed, 15 Jun 2022 08:56:33 +0200</pubDate><guid>https://mevislab.github.io/examples/tutorials/dataobjects/contours/contourexample1/</guid><description>Contour Example 1: Creation of Contours Introduction We like to start with the creation of CSOs. To create CSOs, you need a SoCSO*-Editor. There are several different editors, which can be used to create CSOs (see here). Some of them are introduced in this example.
Steps to do Develop your network For this example, we need the following modules. Add the modules to your workspace, connect them as shown below and load the example image $(DemoDataPath)/BrainMultiModal/ProbandT1.</description></item><item><title>Contour Example 2: Contour Interpolation</title><link>https://mevislab.github.io/examples/tutorials/dataobjects/contours/contourexample2/</link><pubDate>Wed, 15 Jun 2022 08:56:33 +0200</pubDate><guid>https://mevislab.github.io/examples/tutorials/dataobjects/contours/contourexample2/</guid><description>Contour Example 2: Creating Contours using Live Wire and Interpolation Introduction In this example, we like to create CSOs using the Live Wire Algorithm, which allows semi-automatic CSO creation. The algorithm uses edge detection to support the user creating CSOs.
We also like to interpolate CSOs over slices. That means additional CSOs are generated between manual segmentations based on a linear interpolation.
As a last step, we will group together CSOs of the same anatomical unit.</description></item><item><title>Contour Example 3: 2D and 3D Visualization of Contours</title><link>https://mevislab.github.io/examples/tutorials/dataobjects/contours/contourexample3/</link><pubDate>Wed, 15 Jun 2022 08:56:33 +0200</pubDate><guid>https://mevislab.github.io/examples/tutorials/dataobjects/contours/contourexample3/</guid><description>Contour Example 3: Overlay Creation and 3D Visualization of Contours Introduction In this example, we like to use the created CSOs to display an overlay. This allows us to mark one of two lungs. In addition to that, we will display the whole segmented lobe of the lung in a 3D image.
Steps to do Develop your network Use the network from the contour example 2 and add the modules VoxelizeCSO, SoView2DOverlay and View2D to your workspace.</description></item><item><title>Contour Example 4: Annotation of Images</title><link>https://mevislab.github.io/examples/tutorials/dataobjects/contours/contourexample4/</link><pubDate>Wed, 15 Jun 2022 08:56:33 +0200</pubDate><guid>https://mevislab.github.io/examples/tutorials/dataobjects/contours/contourexample4/</guid><description>Contour Example 4: Annotation of Images Introduction In this example we like to calculate the volume of our object, in this case the part of the lunge we have segmented.
Steps to do Develop your network and calculate the lunge volume Add the module CalculateVolume and SoView2DAnnotation to your workspace and connect both modules as shown. Update the module CalculateVolume, which directly shows the volume of our object.
Data Objects Contours Example 4 Display the lung volume in the image We now like to display the volume in the image viewer.</description></item><item><title>Contour Example 5: Contours and Ghosting</title><link>https://mevislab.github.io/examples/tutorials/dataobjects/contours/contourexample5/</link><pubDate>Wed, 15 Jun 2022 08:56:33 +0200</pubDate><guid>https://mevislab.github.io/examples/tutorials/dataobjects/contours/contourexample5/</guid><description>Contour Example 5: Visualizing Contours and Images Introduction In this example, we like to automatically create CSOs based on a predefined iso value.
Steps to do Develop your network Add the following modules to your workspace and connect them as shown. Load the example image Bone.tiff.
Automatic creation of CSOs based on the iso value Now, open the panel of CSOIsoGenerator to set the Iso Value to 1200. If you press Update in the panel, you can see the creation of CSOs on every slide, when opening the module View2D.</description></item><item><title>Contour Objects (CSO)</title><link>https://mevislab.github.io/examples/tutorials/dataobjects/contourobjects/</link><pubDate>Wed, 15 Jun 2022 08:56:33 +0200</pubDate><guid>https://mevislab.github.io/examples/tutorials/dataobjects/contourobjects/</guid><description>Contour Segmented Objects (CSOs) in MeVisLab Introduction Structure of CSOs MeVisLab provides modules to create contours in images. 3D objects which encapsulate these contours are called Contour Segmented Objects (CSOs).
In the next image, you can see a rectangular shaped CSO. The pink circles you can see are called Seed Points.
Seed Points define the shape of the CSO. In case of a rectangle, you need four Seed Points forming the corners, to define the whole rectangle.</description></item><item><title>Example 1: Distance between Markers</title><link>https://mevislab.github.io/examples/tutorials/dataobjects/markers/markerexample1/</link><pubDate>Wed, 15 Jun 2022 08:56:33 +0200</pubDate><guid>https://mevislab.github.io/examples/tutorials/dataobjects/markers/markerexample1/</guid><description>Example 1: Calculating the distance between markers Introduction In this example, we will measure the distance between one position in an image to a list of markers.
Steps to do Develop your network Add the following modules and connect them as shown.
We changed the names of the modules SoView2DMarkerEditor and XMarkerLIstContainer, to distinguish these modules from two similar modules we will add later on. Open the panel of SoView2DMarkerEditor and select the tab Drawing.</description></item><item><title>Example 1: Synchronous view of two images</title><link>https://mevislab.github.io/examples/tutorials/visualization/visualizationexample1/</link><pubDate>Wed, 15 Jun 2022 08:56:33 +0200</pubDate><guid>https://mevislab.github.io/examples/tutorials/visualization/visualizationexample1/</guid><description>Example 1: Synchronous view of two images Introduction In this example we like to use the module SynchroView2D to be able to inspect two different images simultaneously.
The module SynchroView2D provides two 2D viewers that are synchronized.
As in Tutorial Chapter 1 - Basic Mechanics of MeVisLab, the processed and the unprocessed image can be displayed simultaneously. Scrolling through one image automatically changes the slices of both viewers, so slices with the same slice number are shown in both images.</description></item><item><title>Example 2: Creating a magnifier</title><link>https://mevislab.github.io/examples/tutorials/visualization/visualizationexample2/</link><pubDate>Wed, 15 Jun 2022 08:56:33 +0200</pubDate><guid>https://mevislab.github.io/examples/tutorials/visualization/visualizationexample2/</guid><description>Example 2: Creating a magnifier Introduction Medical images are typically displayed in three different viewing directions (see image): coronal, axial and sagittal.
Using the Viewer OrthoView2D you are able to decide, which viewing direction you like to use. In addition to that, you have the opportunity to display all three orthogonal viewing directions simultaneously. Here, we like to display an image of the head in all three viewing directions and mark positions in the image.</description></item><item><title>Example 3: Image Overlays</title><link>https://mevislab.github.io/examples/tutorials/visualization/visualizationexample3/</link><pubDate>Wed, 15 Jun 2022 08:56:33 +0200</pubDate><guid>https://mevislab.github.io/examples/tutorials/visualization/visualizationexample3/</guid><description>Example 3: How to blend images over each other Introduction In this example we will show you how to blend a 2D image over another one. With the help of the module SoView2DOverlay we will create an overlay, which allows us to highlight all bones in the scan.
Steps to do Develop your network Start this example by adding the shown modules, connecting the modules to form a network and loading the example image Bone.</description></item><item><title>Example 4: Display 2D images in Open Inventor SoRenderArea</title><link>https://mevislab.github.io/examples/tutorials/visualization/visualizationexample4/</link><pubDate>Wed, 15 Jun 2022 08:56:33 +0200</pubDate><guid>https://mevislab.github.io/examples/tutorials/visualization/visualizationexample4/</guid><description>Example 4: Display images converted to Open Inventor scene objects Introduction In the previous example you learned how to use the module SoView2DOverlay together with a View2D. MeVisLab provides a whole family of SoView2D* modules (SoView2DOverlay, SoView2DRectangle, SoView2DGrid, &amp;hellip;). All these modules create or interact with scene objects and are based on the module SoView2D, which can convert a voxel-image into a scene object. In this example, you will get to know some members of the SoView2D-family.</description></item><item><title>Marker Objects</title><link>https://mevislab.github.io/examples/tutorials/dataobjects/markerobjects/</link><pubDate>Wed, 15 Jun 2022 08:56:33 +0200</pubDate><guid>https://mevislab.github.io/examples/tutorials/dataobjects/markerobjects/</guid><description>Markers in MeVisLab Introduction In MeVisLab you can equip images and other data objects with markers. In this example you will see how to create, process and use markers.
Marker Creation and Rendering To create markers, you can use a marker editor, for example the SoView2DMarkerEditor. Connect this editor to a viewer as shown below. Now you can interactively create new markers. Connect the module XMarkerListContainer to your marker editor to store markers in a list.</description></item><item><title>Visualization Example 1: Synchronous view of two images</title><link>https://mevislab.github.io/examples/examples/visualization/example1/</link><pubDate>Wed, 15 Jun 2022 08:56:33 +0200</pubDate><guid>https://mevislab.github.io/examples/examples/visualization/example1/</guid><description>Visualization Example 1: Synchronous view of two images This very simple example shows how to load an image and apply a basic Convolution filter to the image. The image with and without filter is shown in a Viewer and scrolling is synchronized so that the same slice is shown for both images.
Download You can download the example network here</description></item><item><title>Contour Example 1: Creation of Contours</title><link>https://mevislab.github.io/examples/examples/data_objects/contours/example1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://mevislab.github.io/examples/examples/data_objects/contours/example1/</guid><description>Contour Example 1: Creation of Contours This example shows how to create CSOs using SoCSOEditor modules.
Summary Contours (in MeVisLab CSO&amp;rsquo;s) can be created by many modules, such as:
SoCSOPointEditor SoCSOAngleEditor SoCSOArrowEditor SoCSODistanceLineEditor SoCSODistancePolylineEditor SoCSOEllipseEditor SoCSORectangleEditor SoCSOSplineEditor SoCSOPolygonEditor SoCSOIsoEditor SoCSOLiveWireEditor Whenever creating contours, they are managed and temporarily stored by a CSOManager. In this example, contours are created and colors and styles of these CSOs are customized by using a SoCSOVisualizationSettings module.</description></item><item><title>Contour Example 2: Contour interpolation</title><link>https://mevislab.github.io/examples/examples/data_objects/contours/example2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://mevislab.github.io/examples/examples/data_objects/contours/example2/</guid><description>Contour Example 2: Contour interpolation This example shows how to interpolate CSOs over slices.
Summary In this example, semi-automatic countours are created by using a SoCSOLiveWireEditor. The created contours are managed by a CSOManager. Visualization of the contours is customized by using a SoCSOVisualizationSettings module.
In the end, additional contours between the manual contours are generated by the CSOSliceInterpolator and added to the CSOManager. Different groups of contours are created for left and right lung lobe and colored separately.</description></item><item><title>Contour Example 3: 2D and 3D visualization of contours</title><link>https://mevislab.github.io/examples/examples/data_objects/contours/example3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://mevislab.github.io/examples/examples/data_objects/contours/example3/</guid><description>Contour Example 3: 2D and 3D visualization of contours This example shows how to display CSOs in 2D as an overlay. In addition, the CSOs are displayed in 3D.
Summary Images are loaded by using a LocalImage module and visualized in a 2D viewer. A SoCSOLiveWireEditor is added to draw contours on the images. The CSOSliceInterpolator generates additional contours between the manual CSOs by using a linear interpolation.
The module VoxelizeCSO is used to create a 3-dimensional voxel mask of the contours which can be used as overlay on the images in a View2D.</description></item><item><title>Contour Example 4: Annotation of images</title><link>https://mevislab.github.io/examples/examples/data_objects/contours/example4/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://mevislab.github.io/examples/examples/data_objects/contours/example4/</guid><description>Contour Example 4: Annotation of images This example shows how to add annotations to an image.
Summary In this example, the network of Contour Example 3 is extended so that the volume of the 3D mask generated by the VoxelizeCSO module is calculated. The CalculateVolume module counts the number of voxels in the given mask and returns the correct volume in ml. This volume is used for a custom SoView2DAnnotation displayed in the View2D.</description></item><item><title>Contour Example 5: Contours and ghosting</title><link>https://mevislab.github.io/examples/examples/data_objects/contours/example5/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://mevislab.github.io/examples/examples/data_objects/contours/example5/</guid><description>Contour Example 5: Contours and ghosting This image shows how to automatically create CSOs based on an iso value. In addition the visualization of CSOs of previous and subsequent slices is shown.
Summary In this example, the CSOIsoGenerator is used to generate contours based on a given iso value of the image. Contours are generated in the image where the given iso value is close to the one configured. These contours are stored in a CSOManager and ghosting is activated in the SoCSOVisualizationSettings.</description></item><item><title>Marker Example 1: Distance between markers</title><link>https://mevislab.github.io/examples/examples/data_objects/markers/example1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://mevislab.github.io/examples/examples/data_objects/markers/example1/</guid><description>Marker Example 1: Distance between markers This examples shows how to create markers in a viewer and measure their distance. Download You can download the example network here</description></item><item><title>Visualization Example 2: Creating a magnifier</title><link>https://mevislab.github.io/examples/examples/visualization/example2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://mevislab.github.io/examples/examples/visualization/example2/</guid><description>Visualization Example 2: Creating a magnifier This example shows how to create a magnifier. Using the module SubImage a fraction of the original image can be extracted and enlarged. Download You can download the example network here</description></item><item><title>Visualization Example 3: Image overlays</title><link>https://mevislab.github.io/examples/examples/visualization/example3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://mevislab.github.io/examples/examples/visualization/example3/</guid><description>Visualization Example 3: Image overlays This example shows the creation of an overlay. Using the module SoView2DOverlay, an overlay can be blended over a 2D image. Download You can download the example network here</description></item><item><title>Visualization Example 4: Display images converted to Open Inventor scene objects</title><link>https://mevislab.github.io/examples/examples/visualization/example4/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://mevislab.github.io/examples/examples/visualization/example4/</guid><description>Visualization Example 4: Display images converted to Open Inventor scene objects This example shows how to convert images to Open Inventor scene objects using the module SoView2D and modules based on SoView2D. Download You can download the example network here</description></item></channel></rss>