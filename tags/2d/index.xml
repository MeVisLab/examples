<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>2D on MeVisLab Examples</title><link>https://mevislab.github.io/examples/tags/2d/</link><description>Recent content in 2D on MeVisLab Examples</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Wed, 15 Jun 2022 08:56:33 +0200</lastBuildDate><atom:link href="https://mevislab.github.io/examples/tags/2d/index.xml" rel="self" type="application/rss+xml"/><item><title>Chapter III: Visualization</title><link>https://mevislab.github.io/examples/tutorials/visualization/</link><pubDate>Wed, 15 Jun 2022 08:56:33 +0200</pubDate><guid>https://mevislab.github.io/examples/tutorials/visualization/</guid><description>Visualization in MeVisLab Introduction MeVisLab contains a whole toolkit to visualize data and images. 2D, 3D and 4D rendering is possible as well as the interaction with images and data objects.
In this chapter, we focus on 2D and 3D visualization and simple image interactions. Not only pixel- and voxel-based data can be visualized, but also scene objects and 3D scenes (see here).
View2D and View3D An easy way to display data and images in 2D and 3D is by using the Modules View2D and View3D.</description></item><item><title>Example 1: Synchronous view of two images</title><link>https://mevislab.github.io/examples/tutorials/visualization/visualizationexample1/</link><pubDate>Wed, 15 Jun 2022 08:56:33 +0200</pubDate><guid>https://mevislab.github.io/examples/tutorials/visualization/visualizationexample1/</guid><description>Example 1: Synchronous view of two images Introduction In this example we like to use the module SynchroView2D to be able to inspect two different images simultaneously.
The module SynchroView2D provides two 2D viewers that are synchronized.
As in Tutorial Chapter 1 - Basic Mechanics of MeVisLab, the processed and the unprocessed image can be displayed simultaneously. Scrolling through one image automatically changes the slices of both viewers, so slices with the same slice number are shown in both images.</description></item><item><title>Example 2: Creating a magnifier</title><link>https://mevislab.github.io/examples/tutorials/visualization/visualizationexample2/</link><pubDate>Wed, 15 Jun 2022 08:56:33 +0200</pubDate><guid>https://mevislab.github.io/examples/tutorials/visualization/visualizationexample2/</guid><description>Example 2: Creating a magnifier Introduction Medical images are typically displayed in three different viewing directions (see image): coronal, axial and sagittal.
Using the Viewer OrthoView2D you are able to decide, which viewing direction you like to use. In addition to that, you have the opportunity to display all three orthogonal viewing directions simultaneously. Here, we like to display an image of the head in all three viewing directions and mark positions in the image.</description></item><item><title>Example 3: Image Overlays</title><link>https://mevislab.github.io/examples/tutorials/visualization/visualizationexample3/</link><pubDate>Wed, 15 Jun 2022 08:56:33 +0200</pubDate><guid>https://mevislab.github.io/examples/tutorials/visualization/visualizationexample3/</guid><description>Example 3: How to blend images over each other Introduction In this example we will show you how to blend a 2D image over another one. With the help of the module SoView2DOverlay we will create an overlay, which allows us to highlight all bones in the scan.
Steps to do Develop your network Start this example by adding the shown modules, connecting the modules to form a network and loading the example image Bone.</description></item><item><title>Example 4: Display 2D images in Open Inventor SoRenderArea</title><link>https://mevislab.github.io/examples/tutorials/visualization/visualizationexample4/</link><pubDate>Wed, 15 Jun 2022 08:56:33 +0200</pubDate><guid>https://mevislab.github.io/examples/tutorials/visualization/visualizationexample4/</guid><description>Example 4: Display images converted to Open Inventor scene objects Introduction In the previous example you learned how to use the module SoView2DOverlay together with a View2D. MeVisLab provides a whole family of SoView2D* modules (SoView2DOverlay, SoView2DRectangle, SoView2DGrid, &amp;hellip;). All these modules create or interact with scene objects and are based on the module SoView2D, which can convert a voxel-image into a scene object. In this example, you will get to know some members of the SoView2D-family.</description></item></channel></rss>