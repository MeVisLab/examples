<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Image Processing on MeVisLab Examples</title><link>https://mevislab.github.io/examples/tags/image-processing/</link><description>Recent content in Image Processing on MeVisLab Examples</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Wed, 15 Jun 2022 08:56:33 +0200</lastBuildDate><atom:link href="https://mevislab.github.io/examples/tags/image-processing/index.xml" rel="self" type="application/rss+xml"/><item><title>Chapter IV: Image Processing</title><link>https://mevislab.github.io/examples/tutorials/image_processing/</link><pubDate>Wed, 15 Jun 2022 08:56:33 +0200</pubDate><guid>https://mevislab.github.io/examples/tutorials/image_processing/</guid><description>Image Processing in MeVisLab Digital image processing is the use of a digital computer to process digital images through an algorithm (see Wikipedia).
MeVisLab provides multiple modules for image processing tasks, such as:
Filters Masks Transformations Arithmetics Statistics For details about Image Processing in MeVisLab, see the MeVisLab Documentation In this chapter, you will find some examples for different types of image processing in MeVisLab.</description></item><item><title>Example 1: Arithmetic operations on two images</title><link>https://mevislab.github.io/examples/tutorials/image_processing/image_processing1/</link><pubDate>Wed, 15 Jun 2022 08:56:33 +0200</pubDate><guid>https://mevislab.github.io/examples/tutorials/image_processing/image_processing1/</guid><description>Example 1: Arithmetic operations on two images Introduction We are using the Arithmetic2 module to apply basic scalar functions on two images. The module provides 2 inputs for images and 1 output image for the result.
Steps to do Develop your network Add two LocalImage modules to your workspace for the input images. Select $(DemoDataPath)/BrainMultiModal/ProbandT1.dcm and $(DemoDataPath)/BrainMultiModal/ProbandT2.dcm from MeVisLab demo data and add a SynchroView2D to your network.
In the end, add the Arithmetic2 module and connect them as seen below.</description></item><item><title>Example 2: Masking images</title><link>https://mevislab.github.io/examples/tutorials/image_processing/image_processing2/</link><pubDate>Wed, 15 Jun 2022 08:56:33 +0200</pubDate><guid>https://mevislab.github.io/examples/tutorials/image_processing/image_processing2/</guid><description>Example 2: Masking images Introduction The background of medical images is black for most cases. In case an image is inverted or window/level values are adapted, these black pixels outside clinical relevant pixels might become very bright or even white.
Being in a dark room using a large screen, the user might be blended by these large white regions.
Image masking is a very good way to select a defined region where image processing shall be applied.</description></item><item><title>Example 3: Region Growing</title><link>https://mevislab.github.io/examples/tutorials/image_processing/image_processing3/</link><pubDate>Wed, 15 Jun 2022 08:56:33 +0200</pubDate><guid>https://mevislab.github.io/examples/tutorials/image_processing/image_processing3/</guid><description>Example 3: Region Growing Introduction A very simple approach to segment parts of an image is the region growing method. A general explanation can be found here.
In this example, you will segment the brain of an image and show the segmentation results as an overlay on the original image.
Steps to do Develop your network Add a LocalImage module to your workspace and select load $(DemoDataPath)/BrainMultiModal/ProbandT1.dcm. Add a View2D module and connect both as seen below.</description></item><item><title>Image Processing</title><link>https://mevislab.github.io/examples/examples/image_processing/</link><pubDate>Wed, 15 Jun 2022 08:56:33 +0200</pubDate><guid>https://mevislab.github.io/examples/examples/image_processing/</guid><description>Open Inventor Examples: Arithmetic Operations
Masking Images
Region Growing (Segmentation)</description></item><item><title>Image Processing Example 1: Arithmetic operations on two images</title><link>https://mevislab.github.io/examples/examples/image_processing/example1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://mevislab.github.io/examples/examples/image_processing/example1/</guid><description>Image Processing Example 1: Arithmetic operations on two images In this example, we apply scalar functions on two images like Add, Multiply, Subtract, etc.
Summary We are loading two images by using the LocalImage module and show them in a SynchroView2D. In addition to that, both images are used for arithmetic processing in the module Arithmetic2.
Download You can download the example network here</description></item><item><title>Image Processing Example 2: Masking images</title><link>https://mevislab.github.io/examples/examples/image_processing/example2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://mevislab.github.io/examples/examples/image_processing/example2/</guid><description>Image Processing Example 2: Masking images In this example, we create a simple mask on an image, so that background pixels are not affected by changes of the window/level values.
Summary We are loading images by using the LocalImage module and show them in a SynchroView2D. The same image is shown in the right viewer of the SynchroView2D but with a Threshold based Mask.
Download You can download the example network here</description></item><item><title>Image Processing Example 3: Region Growing (Segmentation)</title><link>https://mevislab.github.io/examples/examples/image_processing/example3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://mevislab.github.io/examples/examples/image_processing/example3/</guid><description>Image Processing Example 3: Region Growing (Segmentation) In this example, we create a simple mask on an image by using the RegionGrowing module.
Summary We are loading images by using the LocalImage module and show them in a SynchroView2D. The same image is used as input for the RegionGrowing module. The starting point for the algorithm is a list of markers created by the SoView2DMarkerEditor. As the RegionGrowing may leave gaps, an additional CloseGap module is added.</description></item></channel></rss>