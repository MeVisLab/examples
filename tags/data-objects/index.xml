<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Data Objects on MeVisLab Examples</title><link>https://mevislab.github.io/examples/tags/data-objects/</link><description>Recent content in Data Objects on MeVisLab Examples</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Wed, 15 Jun 2022 08:56:33 +0200</lastBuildDate><atom:link href="https://mevislab.github.io/examples/tags/data-objects/index.xml" rel="self" type="application/rss+xml"/><item><title>Chapter V: Data Objects</title><link>https://mevislab.github.io/examples/tutorials/dataobjects/</link><pubDate>Wed, 15 Jun 2022 08:56:33 +0200</pubDate><guid>https://mevislab.github.io/examples/tutorials/dataobjects/</guid><description>MeVisLab Tutorial Chapter V Data Objects in MeVisLab MeVisLab provides a lot of pre-defined data objects for usage such as Contours, Surface Objects (WEMs) and Markers.
Differences between these types are explained in the following chapters and example networks are built to learn how to use them.</description></item><item><title>Contour Example 1: Creation of Contours</title><link>https://mevislab.github.io/examples/tutorials/dataobjects/contours/contourexample1/</link><pubDate>Wed, 15 Jun 2022 08:56:33 +0200</pubDate><guid>https://mevislab.github.io/examples/tutorials/dataobjects/contours/contourexample1/</guid><description>Contour Example 1: Creation of Contours Introduction We like to start with the creation of CSOs. To create CSOs, you need a SoCSO*-Editor. There are several different editors, which can be used to create CSOs (see here). Some of them are introduced in this example.
Steps to do Develop your network For this example, we need the following modules. Add the modules to your workspace, connect them as shown below and load the example image $(DemoDataPath)/BrainMultiModal/ProbandT1.</description></item><item><title>Contour Example 2: Contour Interpolation</title><link>https://mevislab.github.io/examples/tutorials/dataobjects/contours/contourexample2/</link><pubDate>Wed, 15 Jun 2022 08:56:33 +0200</pubDate><guid>https://mevislab.github.io/examples/tutorials/dataobjects/contours/contourexample2/</guid><description>Contour Example 2: Creating Contours using Live Wire and Interpolation Introduction In this example, we like to create CSOs using the Live Wire Algorithm, which allows semi-automatic CSO creation. The algorithm uses edge detection to support the user creating CSOs.
We also like to interpolate CSOs over slices. That means additional CSOs are generated between manual segmentations based on a linear interpolation.
As a last step, we will group together CSOs of the same anatomical unit.</description></item><item><title>Contour Example 3: 2D and 3D Visualization of Contours</title><link>https://mevislab.github.io/examples/tutorials/dataobjects/contours/contourexample3/</link><pubDate>Wed, 15 Jun 2022 08:56:33 +0200</pubDate><guid>https://mevislab.github.io/examples/tutorials/dataobjects/contours/contourexample3/</guid><description>Contour Example 3: Overlay Creation and 3D Visualization of Contours Introduction In this example, we like to use the created CSOs to display an overlay. This allows us to mark one of two lungs. In addition to that, we will display the whole segmented lobe of the lung in a 3D image.
Steps to do Develop your network Use the network from the contour example 2 and add the modules VoxelizeCSO, SoView2DOverlay and View2D to your workspace.</description></item><item><title>Contour Example 4: Annotation of Images</title><link>https://mevislab.github.io/examples/tutorials/dataobjects/contours/contourexample4/</link><pubDate>Wed, 15 Jun 2022 08:56:33 +0200</pubDate><guid>https://mevislab.github.io/examples/tutorials/dataobjects/contours/contourexample4/</guid><description>Contour Example 4: Annotation of Images Introduction In this example we like to calculate the volume of our object, in this case the part of the lunge we have segmented.
Steps to do Develop your network and calculate the lunge volume Add the module CalculateVolume and SoView2DAnnotation to your workspace and connect both modules as shown. Update the module CalculateVolume, which directly shows the volume of our object.
Data Objects Contours Example 4 Display the lung volume in the image We now like to display the volume in the image viewer.</description></item><item><title>Contour Example 5: Contours and Ghosting</title><link>https://mevislab.github.io/examples/tutorials/dataobjects/contours/contourexample5/</link><pubDate>Wed, 15 Jun 2022 08:56:33 +0200</pubDate><guid>https://mevislab.github.io/examples/tutorials/dataobjects/contours/contourexample5/</guid><description>Contour Example 5: Visualizing Contours and Images Introduction In this example, we like to automatically create CSOs based on a predefined iso value.
Steps to do Develop your network Add the following modules to your workspace and connect them as shown. Load the example image Bone.tiff.
Automatic creation of CSOs based on the iso value Now, open the panel of CSOIsoGenerator to set the Iso Value to 1200. If you press Update in the panel, you can see the creation of CSOs on every slide, when opening the module View2D.</description></item><item><title>Contour Objects (CSO)</title><link>https://mevislab.github.io/examples/tutorials/dataobjects/contourobjects/</link><pubDate>Wed, 15 Jun 2022 08:56:33 +0200</pubDate><guid>https://mevislab.github.io/examples/tutorials/dataobjects/contourobjects/</guid><description>Contour Segmented Objects (CSOs) in MeVisLab Introduction Structure of CSOs MeVisLab provides modules to create contours in images. 3D objects which encapsulate these contours are called Contour Segmented Objects (CSOs).
In the next image, you can see a rectangular shaped CSO. The pink circles you can see are called Seed Points.
Seed Points define the shape of the CSO. In case of a rectangle, you need four Seed Points forming the corners, to define the whole rectangle.</description></item><item><title>Data Objects</title><link>https://mevislab.github.io/examples/examples/data_objects/</link><pubDate>Wed, 15 Jun 2022 08:56:33 +0200</pubDate><guid>https://mevislab.github.io/examples/examples/data_objects/</guid><description>Data Object Examples: Creation of Contours
Contour interpolation
2D and 3D visualization of contours
Annotation of images
Contours and ghosting
Distance between markers
Creation of WEMs
Processing and modification of WEMs
Interactively moving WEM
WEM - Primitive Value Lists</description></item><item><title>Example 1: Distance between Markers</title><link>https://mevislab.github.io/examples/tutorials/dataobjects/markers/markerexample1/</link><pubDate>Wed, 15 Jun 2022 08:56:33 +0200</pubDate><guid>https://mevislab.github.io/examples/tutorials/dataobjects/markers/markerexample1/</guid><description>Example 1: Calculating the distance between markers Introduction In this example, we will measure the distance between one position in an image to a list of markers.
Steps to do Develop your network Add the following modules and connect them as shown.
We changed the names of the modules SoView2DMarkerEditor and XMarkerLIstContainer, to distinguish these modules from two similar modules we will add later on. Open the panel of SoView2DMarkerEditor and select the tab Drawing.</description></item><item><title>Marker Objects</title><link>https://mevislab.github.io/examples/tutorials/dataobjects/markerobjects/</link><pubDate>Wed, 15 Jun 2022 08:56:33 +0200</pubDate><guid>https://mevislab.github.io/examples/tutorials/dataobjects/markerobjects/</guid><description>Markers in MeVisLab Introduction In MeVisLab you can equip images and other data objects with markers. In this example you will see how to create, process and use markers.
Marker Creation and Rendering To create markers, you can use a marker editor, for example the SoView2DMarkerEditor. Connect this editor to a viewer as shown below. Now you can interactively create new markers. Connect the module XMarkerListContainer to your marker editor to store markers in a list.</description></item><item><title>Surface Example 1: Creation of WEMs</title><link>https://mevislab.github.io/examples/tutorials/dataobjects/surfaces/surfaceexample1/</link><pubDate>Wed, 15 Jun 2022 08:56:33 +0200</pubDate><guid>https://mevislab.github.io/examples/tutorials/dataobjects/surfaces/surfaceexample1/</guid><description>Surface Example 1: Create Winged Edge Mesh out of voxel-images and CSOs Introduction In this example you will learn how to create a Winged Edge Mesh (WEM). There are several ways how to create WEMs, a few of them are shown in this example. Instead of creating WEMs, it is also possible to load existing WEMs. This was already shown in Surface Objects (WEM) chapter.
Steps to do From image to surface: Generating WEMs out of voxel images At first, we will create a WEM out of a voxel image using the module WEMIsoSurface.</description></item><item><title>Surface Example 2: Processing and Modification of WEM</title><link>https://mevislab.github.io/examples/tutorials/dataobjects/surfaces/surfaceexample2/</link><pubDate>Wed, 15 Jun 2022 08:56:33 +0200</pubDate><guid>https://mevislab.github.io/examples/tutorials/dataobjects/surfaces/surfaceexample2/</guid><description>Surface Example 2: Processing and Modification of WEM Introduction In this example, you will learn how to modify and process WEMs.
Steps to do Develop your network Modification of WEMs Use the module WEMLoad to load the file venus.off. Then add and connect the shown modules. We like to display the WEM venus two times, one time this WEM is modified. You can use the module WEMModify to apply modifications. In its panel, change the scale and the size of the WEM.</description></item><item><title>Surface Example 3: Interactions with WEM</title><link>https://mevislab.github.io/examples/tutorials/dataobjects/surfaces/surfaceexample3/</link><pubDate>Wed, 15 Jun 2022 08:56:33 +0200</pubDate><guid>https://mevislab.github.io/examples/tutorials/dataobjects/surfaces/surfaceexample3/</guid><description>Surface Example 3: Interactions with WEM Introduction In this example, we like to create networks, which enable interactive manipulations of WEMs inside a viewer. We will build a network to draw on WEMs and use this network to enable to cut WEMs.
Steps to do Interactively drawing on WEMs Interactively cutting WEMs Summary</description></item><item><title>Surface Example 4: Interactively moving WEM</title><link>https://mevislab.github.io/examples/tutorials/dataobjects/surfaces/surfaceexample4/</link><pubDate>Wed, 15 Jun 2022 08:56:33 +0200</pubDate><guid>https://mevislab.github.io/examples/tutorials/dataobjects/surfaces/surfaceexample4/</guid><description>Surface Example 4: Interactively moving WEM Introduction In this example, we like to interactively move WEMs using SoDragger modules insight a viewer.
Develop your network Interactively translating objects in 3D using SoDragger modules Add and connect the following modules as shown. In the panel of the module WEMInitialize select the Model Octasphere. After that, open the viewer SoExaminerViewer and make sure to select the Interaction Mode. Now, you are able to click on the presented Octaspehere and move it alongside one axis.</description></item><item><title>Surface Example 5: WEM - Primitive Value Lists</title><link>https://mevislab.github.io/examples/tutorials/dataobjects/surfaces/surfaceexample5/</link><pubDate>Wed, 15 Jun 2022 08:56:33 +0200</pubDate><guid>https://mevislab.github.io/examples/tutorials/dataobjects/surfaces/surfaceexample5/</guid><description>Surface Example 5: WEM - Primitive Value Lists Introduction WEMs do not only contain the coordinates of nodes and surfaces, they can also contain additional information. These information are stored in so called Primitive Value Lists (PVLs). Every node, every surface and every edge can contains such a list. In these lists, you can for example store the color of the node or specific patient information. These information can be used for visualization or for further statistical analysis.</description></item><item><title>Surface Objects (WEM)</title><link>https://mevislab.github.io/examples/tutorials/dataobjects/surfaceobjects/</link><pubDate>Wed, 15 Jun 2022 08:56:33 +0200</pubDate><guid>https://mevislab.github.io/examples/tutorials/dataobjects/surfaceobjects/</guid><description>Surface Objects (WEMs) Introduction In MeVisLab it is possible to create, visualize, process and manipulate surface objects, also known as polygon meshes. Here, we call surface objects Winged Edge Mesh, in short WEM. In this chapter you will get an introduction into WEMs. In addition, you will find examples on how to work with WEMs. For more information on WEMs take a look at the MeVislab Toolbox Reference . If you like to know which WEM formats can be imported into MeVisLab, take a look at the assimp documentation here.</description></item><item><title>Contour Example 1: Creation of Contours</title><link>https://mevislab.github.io/examples/examples/data_objects/contours/example1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://mevislab.github.io/examples/examples/data_objects/contours/example1/</guid><description>Contour Example 1: Creation of Contours This example shows how to create CSOs using SoCSOEditor modules.
Summary Contours (in MeVisLab CSO&amp;rsquo;s) can be created by many modules, such as:
SoCSOPointEditor SoCSOAngleEditor SoCSOArrowEditor SoCSODistanceLineEditor SoCSODistancePolylineEditor SoCSOEllipseEditor SoCSORectangleEditor SoCSOSplineEditor SoCSOPolygonEditor SoCSOIsoEditor SoCSOLiveWireEditor Whenever creating contours, they are managed and temporarily stored by a CSOManager. In this example, contours are created and colors and styles of these CSOs are customized by using a SoCSOVisualizationSettings module.</description></item><item><title>Contour Example 2: Contour interpolation</title><link>https://mevislab.github.io/examples/examples/data_objects/contours/example2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://mevislab.github.io/examples/examples/data_objects/contours/example2/</guid><description>Contour Example 2: Contour interpolation This example shows how to interpolate CSOs over slices.
Summary In this example, semi-automatic countours are created by using a SoCSOLiveWireEditor. The created contours are managed by a CSOManager. Visualization of the contours is customized by using a SoCSOVisualizationSettings module.
In the end, additional contours between the manual contours are generated by the CSOSliceInterpolator and added to the CSOManager. Different groups of contours are created for left and right lung lobe and colored separately.</description></item><item><title>Contour Example 3: 2D and 3D visualization of contours</title><link>https://mevislab.github.io/examples/examples/data_objects/contours/example3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://mevislab.github.io/examples/examples/data_objects/contours/example3/</guid><description>Contour Example 3: 2D and 3D visualization of contours This example shows how to display CSOs in 2D as an overlay. In addition, the CSOs are displayed in 3D.
Summary Images are loaded by using a LocalImage module and visualized in a 2D viewer. A SoCSOLiveWireEditor is added to draw contours on the images. The CSOSliceInterpolator generates additional contours between the manual CSOs by using a linear interpolation.
The module VoxelizeCSO is used to create a 3-dimensional voxel mask of the contours which can be used as overlay on the images in a View2D.</description></item><item><title>Contour Example 4: Annotation of images</title><link>https://mevislab.github.io/examples/examples/data_objects/contours/example4/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://mevislab.github.io/examples/examples/data_objects/contours/example4/</guid><description>Contour Example 4: Annotation of images This example shows how to add annotations to an image.
Summary In this example, the network of Contour Example 3 is extended so that the volume of the 3D mask generated by the VoxelizeCSO module is calculated. The CalculateVolume module counts the number of voxels in the given mask and returns the correct volume in ml. This volume is used for a custom SoView2DAnnotation displayed in the View2D.</description></item><item><title>Contour Example 5: Contours and ghosting</title><link>https://mevislab.github.io/examples/examples/data_objects/contours/example5/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://mevislab.github.io/examples/examples/data_objects/contours/example5/</guid><description>Contour Example 5: Contours and ghosting This image shows how to automatically create CSOs based on an iso value. In addition the visualization of CSOs of previous and subsequent slices is shown.
Summary In this example, the CSOIsoGenerator is used to generate contours based on a given iso value of the image. Contours are generated in the image where the given iso value is close to the one configured. These contours are stored in a CSOManager and ghosting is activated in the SoCSOVisualizationSettings.</description></item><item><title>Marker Example 1: Distance between markers</title><link>https://mevislab.github.io/examples/examples/data_objects/markers/example1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://mevislab.github.io/examples/examples/data_objects/markers/example1/</guid><description>Marker Example 1: Distance between markers This examples shows how to create markers in a viewer and measure their distance. Download You can download the example network here</description></item><item><title>Surface Example 1: Creation of WEMs</title><link>https://mevislab.github.io/examples/examples/data_objects/surface_objects/example1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://mevislab.github.io/examples/examples/data_objects/surface_objects/example1/</guid><description>Surface Example 1: Creation of WEMs This example shows how to create WEMs out of voxel images and CSOs. Download You can download the example network here</description></item><item><title>Surface Example 2: Processing and modification of WEMs</title><link>https://mevislab.github.io/examples/examples/data_objects/surface_objects/example2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://mevislab.github.io/examples/examples/data_objects/surface_objects/example2/</guid><description>Surface Example 2: Processing and modification of WEMs This example shows how to process and modify WEMs using the modules WEMModify, WEMSmooth and WEMSurfaceDistance. Download You can download the example network here</description></item><item><title>Surface Example 4: Interactively moving WEM</title><link>https://mevislab.github.io/examples/examples/data_objects/surface_objects/example4/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://mevislab.github.io/examples/examples/data_objects/surface_objects/example4/</guid><description>Surface Example 4: Interactively moving WEM This example shows how to use dragger modules, to modify objects in a 3D viewer. Download You can download the example network here</description></item><item><title>Surface Example 5: WEM - Primitive Value Lists</title><link>https://mevislab.github.io/examples/examples/data_objects/surface_objects/example5/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://mevislab.github.io/examples/examples/data_objects/surface_objects/example5/</guid><description>Surface Example 5: WEM - Primitive Value Lists This example shows how to use Primitive Value Lists (PVLs). With the help of PVLs the distance between the surfaces of WEMs is color coded. Download You can download the example network here</description></item></channel></rss>